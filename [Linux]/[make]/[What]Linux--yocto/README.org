* [What]yocto --> base
参考链接:[[www.yoctoproject.org/docs/2.3.1/mega-manual/mega-manual.html][yocto参考手册]]

** 快速准备与体验操作
*** 1. Yocto 开发环境介绍
yocto 提供了可以开发以及仿真ARM,MIPS,PowerPC,X86平台的开发环境, 并且可以完成Linux的
全栈仿真应用.

yocto具有如下特征:
- 提供最新的linux kernel 代码, 以及相应的嵌入式开发所需要的库环境
- 提供UI组件,包括X11,GTK+,Qt,Clutter,SDL.
- 提供稳定的开源嵌入式开发环境
- 提供QEMU来仿真全栈
- 基于分层式设计, 可以很好的开发和扩展

最终yocto可以生成镜像文件以在实际硬件平台上设置.
*** 2. 准备工作
为了能够保证yocto正常运行, 需要准备如下的运行环境:
*** 2.1 linux主机
目前支持的主机有 Ubuntu,Fedora,openSUSE,CentOS,Debian.

需要安装的依赖包有:
- git1.8.3.1 或更高等级
- tar1.2.4 或更高
- Python3.4.0 或更高 
*** 2.2 主机依赖包安装
**** Ubuntu 和 Debian 
- 安装QEMU所需要的基本依赖
#+begin_example
sudo apt install gawk wget git-core diffstat unzip texinfo gcc-multilib \
build-essential chrpath socat cpio python python3 python3-pip python3-pexpect \
xz-utils debianutils iputils-ping libsdl1.2-dev xterm
#+end_example
*** 2.3 yocto 获取
#+begin_example
git clone git://git.yoctoproject.org/poky
git checkout pyro
#+end_example
*** 3.编译镜像文件
*** 3.1 编译仿真环境
**** 基本配置
#+begin_example
cd poky
#切换到最新的release
git checkout -b pyro origin/pyro
#初始化编译环境,设置环境变量
source oe-init-build-env
#+end_example

注意: =source oe-init-build-env= 命令需要在重启后都执行一次, 否则会提示 =bitbake= 命令找不到!

执行以上步骤后,会在 =build/conf= 文件夹下生成 =local.conf, bblayers.conf= 文件, 可以通过配置这些文件来更改设置.

- 为了能够节约硬盘空间, 可以在 =local.conf= 文件中加入一行:
#+begin_example
INHERIT += "rm_work"
#+end_example
- 默认配置是用于QEMU仿真的32位X86平台, 可以通过修改 =MACHINE= 变量来修改.
- 默认生成的镜像文件是 RPM 格式, 可以通过修改 =PACKAGE_CLASSES= 变量改变包格式

**** 开始编译
首次编译需要一定的时间, 因为需要首次下载文件.

*注意:* 首次编译及下载会消耗很多CPU和内存, 所以最好将UI界面退出, 进入命令行界面.否则容易导致 *ubuntu自动重启*.

编译完成后, 下载的文件位于 =build/download= 文件夹下, 可以将其存储于网盘中.
#+begin_example
bitbake core-image-sato
#+end_example

**** 开始仿真
使用 =Ctrl -C= 退出仿真环境.
#+begin_example
runqemu qemux86
#+end_example
*** 3.2 为硬件环境生成镜像文件
此示例演示如何编译支持 =MinnowBoard MAX-64bit= 硬件.
**** 3.2.1 拷贝代码
#+begin_example
cd poky
git clone git://git.yoctoproject.org/meta-intel
#+end_example
**** 3.2.2 配置
配置编译结果, 需要配置文件 =bblayers.conf, local.conf= , 这两个文件都位于 =build/conf= 文件夹中.
#+begin_example
cd build
bitbake-layers "add-layer ../meta-intel"
echo 'MACHINE = "intel-corei7-64"' >> conf/local.conf
#+end_example
**** 3.2.3 编译
#+begin_example
#编译生成基础命令行版的 linux
bitbake core-image-base
#+end_example
当编译完成后, 生成的文件位于 =tmp/deploy/images/intel-corei7-64/core-image-base-intel-corei7-64.wic=.
**** 3.2.4 载入镜像文件
使用以下命令就可以生成一个可以启动的文件了:
#+begin_example
#TARGET_DEVICE 代表在硬件板上启动文件存放的位置, 比如 /dec/mmcblk0
sudo dd if=tmp/deploy/images/intel-corei7-64/core-image-base-intel-corei7-64.wic of=TARGET_DEVICE
#+end_example
** 详细说明
*** 1. 准备工作
**** 1.1 克隆代码库
在完成了快速准备后, yocto 已经下载了 yocto-source 的 git 库在 =downloads= 文件夹中, 我们需要把它 clone 出来.
#+begin_example
#clone linux代码
git clone ./build/downloads/git2/git.yoctoproject.org.linux-yocto-4.10.git linux-kernel
#clone metadata extras
git clone git://git.yoctoproject.org/meta-yocto-kernel-extras meta-yocto-kernel-extras 
#clone bsp 
git clone git://git.yoctoproject.org/meta-intel.git
#+end_example
*** 2. 概念


