* [What]yocto --> base
参考链接:[[www.yoctoproject.org/docs/2.3.1/mega-manual/mega-manual.html][yocto参考手册]]

** 快速准备与体验操作
*** Yocto 开发环境介绍

yocto 的编译部分是基于 OpenEmbedded(OE)项目, OE项目使用 BitBake 来构建完整的镜像文件.
在 yocto 中, *OE 和 BitBake两个组件结合在一起, 形成了一个新的组件, 叫做 Poky(也是yocto 项目的名称)*.


yocto 提供了可以开发以及仿真ARM,MIPS,PowerPC,X86平台的开发环境, 并且可以完成Linux的
全栈仿真应用.

[[./oe_workflow.bmp][OE流程]]

yocto具有如下特征:
- 提供最新的linux kernel 代码, 以及相应的嵌入式开发所需要的库环境
- 提供UI组件,包括X11,GTK+,Qt,Clutter,SDL.
- 提供稳定的开源嵌入式开发环境
- 提供QEMU来仿真全栈
- 基于分层式设计, 可以很好的开发和扩展

最终yocto可以生成镜像文件以在实际硬件平台上设置.
*** 准备工作
为了能够保证yocto正常运行, 需要准备如下的运行环境:
**** linux主机
目前支持的主机有 Ubuntu,Fedora,openSUSE,CentOS,Debian.

需要安装的依赖包有:
- git1.8.3.1 或更高等级
- tar1.2.4 或更高
- Python3.4.0 或更高 
**** 主机依赖包安装
***** Ubuntu 和 Debian 
- 安装QEMU所需要的基本依赖
#+begin_example
sudo apt install gawk wget git-core diffstat unzip texinfo gcc-multilib \
build-essential chrpath socat cpio python python3 python3-pip python3-pexpect \
xz-utils debianutils iputils-ping libsdl1.2-dev xterm
#+end_example
**** yocto 获取
#+begin_example
git clone git://git.yoctoproject.org/poky
git checkout pyro
#+end_example
*** 编译镜像文件
**** 编译仿真环境
**** 基本配置
#+begin_example
cd poky
#切换到最新的release
git checkout -b pyro origin/pyro
#初始化编译环境,设置环境变量
#使用此脚本后, 会新建一个 build 文件夹, 并进入这个文件夹, 以后编译的结果都在这个文件夹下.
source oe-init-build-env
#+end_example

注意: =source oe-init-build-env= 命令需要在重启后都执行一次, 否则会提示 =bitbake= 命令找不到!

执行以上步骤后,会在 =build/conf= 文件夹下生成 =local.conf, bblayers.conf= 文件, 可以通过配置这些文件来更改设置.

- 为了能够节约硬盘空间, 可以在 =local.conf= 文件中加入一行:
#+begin_example
INHERIT += "rm_work"
#+end_example
- 默认配置是用于QEMU仿真的32位X86平台, 可以通过修改 =local.conf= 中的 =MACHINE= 变量来修改.
- 默认生成的镜像文件是 RPM 格式, 可以通过修改 =local.conf= 中的 =PACKAGE_CLASSES= 变量改变包格式

**** 开始编译
首次编译需要一定的时间, 因为需要首次下载文件.

*注意:* 首次编译及下载会消耗很多CPU和内存, 所以最好将UI界面退出, 进入命令行界面.否则容易导致 *ubuntu自动重启*.

编译完成后, 下载的文件位于 =build/download= 文件夹下, 可以将其存储于网盘中.
#+begin_example
bitbake core-image-sato
#+end_example

**** 开始仿真
使用 =Ctrl -C= 退出仿真环境.
#+begin_example
runqemu qemux86
#+end_example
**** 为硬件环境生成镜像文件
此示例演示如何编译支持 =MinnowBoard MAX-64bit= 硬件.
**** 拷贝代码
#+begin_example
cd poky
git clone git://git.yoctoproject.org/meta-intel
git checkout pyro
#+end_example
**** 配置
配置编译结果, 需要配置文件 =bblayers.conf, local.conf= , 这两个文件都位于 =build/conf= 文件夹中.
#+begin_example
cd build
#增加层
bitbake-layers "add-layer ../meta-intel"
#指定BSP
echo 'MACHINE = "intel-corei7-64"' >> conf/local.conf
#+end_example
**** 编译
#+begin_example
#编译生成基础命令行版的 linux
bitbake core-image-base
#+end_example
当编译完成后, 生成的文件位于 =tmp/deploy/images/intel-corei7-64/core-image-base-intel-corei7-64.wic=.
**** 载入镜像文件
使用以下命令就可以生成一个可以启动的文件了:
#+begin_example
#TARGET_DEVICE 代表在硬件板上启动文件存放的位置, 比如 /dec/mmcblk0
sudo dd if=tmp/deploy/images/intel-corei7-64/core-image-base-intel-corei7-64.wic of=TARGET_DEVICE
#+end_example
*** 注意事项
**** 从别处拷贝整个工程
由于工程内部很多变量依然保存的是之前工程的配置, 所以需要先 *删除build/tmp/目录下的内容, 重新编译才能正常运行!*
**** 在编译的过程中 ubuntu 自动重启
原因不明.
** 系统概览
*** 准备工作
**** 克隆代码库
在完成了快速准备后, yocto 已经下载了 yocto-source 的 git 库在 =downloads= 文件夹中, 我们需要把它 clone 出来.
#+begin_example
#clone linux代码
git clone ./build/downloads/git2/git.yoctoproject.org.linux-yocto-4.10.git linux-kernel
#clone metadata extras
git clone git://git.yoctoproject.org/meta-yocto-kernel-extras meta-yocto-kernel-extras 
#clone bsp, bsp 命名规则: meta-bsp_name 
git clone git://git.yoctoproject.org/meta-intel.git
#+end_example
**** bmap-tools
=bmap-tools= 工具用于将镜像文件烧写到引导介质(比如 sdcard).

使用之前使用以下命令编译此工具:
#+begin_example
bitbake bmap-tools-native 
#或者也可以简单粗暴
sudo apt install bmap-tools
#+end_example
***** 示例:将 WIC 文件烧写至 flash
- 增加配置信息到文件 =local.conf=
#+begin_example
IMAGE_FSTYPES += "wic wic.bmap"
#+end_example
- 编译对应的镜像文件
#+begin_example
bitbake image
#+end_example
- 烧写
#+begin_example
#如果对介质具有写权限, 则使用以下命令
oe-run-native bmaptool copy ./tmp/deploy/images/qemux86-64/core-image-minimal-machine.wic /dev/sdx
#如果没有写权限则使用如下命令
sudo bash 
PATH=tmp/sysroots/x86_64-linux/usr/bin bmaptool copy ./tmp/deploy/images/qemux86-64/core-image-minimal-machine.wic /dev/sdx
#+end_example
- 寻求帮助
#+begin_example
bmaptool --help
oe-run-native bmaptool --help
#+end_example
*** 概念
yocto 项目通过 =gitolite= 托管, 整体项目基于分层设计, 项目的具体地址: [[http://git.yoctoproject.org/cgit/cgit.cgi][yocto repositories]].

*注意:* 在使用中, 要确保各个库的分支是一一对应的, 比如 poky 的分支为 pyro, 那么 meta-intel 的分支也要切换为 pyro.

在 linux的开发过程中, 分为应用开发和内核开发:
**** 应用开发
- 使用已经编译好的工具链, 使用普通的编辑器和Makefile来构建工程
- 使用 eclipse 并安装 yocto 插件, 使用此IDE来开发APP
**** 内核开发
在内核开发中, 开发者应该不直接修改内核代码, 而是修改顶层文件, 这样便于以后升级内核.
有以下几个方法便于提高开发速度:
1. 通过使用 =Shared State Cache= 来分享自己的编译结果, 这样开发组可以通过网络文件系统来访问,而不是从头编译.
2. 使用 =autobuilders=.
3. 将一些脱机工具压缩打包, 然后分享给其他的开发者.
4. 将工作站分享给开发者, 便于提高编译及测试速度.
5. 使能 =PR Service=.
**** 版本控制
除了要开发的代码, 还需要将 =Metadata= 加入git中.
**** autobuilders
autobuilders 是开发工程的核心工具链.
**** Append Files(附加文件)
此类文件是构建文件(.bb) =recipe file= 的附加文件, 后缀以 =.bbappend= 作为结尾, 此文件用于增改一些构建代码.

一般来说, 一个构建文件都会对应一个同名且不同后缀的附加文件.

附加文件也可以一个文件匹配多个文件.

**** BitBake
在 OpenEmbedded 构建系统中的一个工具, 用于构建镜像文件.此工具执行和调用一些线程来实现并行编译.
**** Build Directory
通过变量 =TOPDIR= 所指定的编译文件夹的位置.一般情况下都是 =poky/build/=.

创建一个编译文件夹使用:
#+begin_example
#在当前目录下创建一个 build 文件夹,设置对应的环境变量,并切换到文件夹下.
source oe-init-build-env (source oe-init-build-env-memres)
#在 home 目录下新建并指定新建文件夹名称为 test-builds
source oe-init-build-env test-builds


#+end_example

**** classes
将通用的逻辑进行封装和继承, 这样用户可以方便重用, 文件的后缀为 =.bbclass=.
**** Configuration File
=.conf= 为后缀的文件, 表明工程的配置信息, 文件中的变量调试全局的. 
- 在 =Build Directory= 中的 conf/local.conf 文件包含用户定义的变量, 影响编译过程.
- =meta-poky/conf/distro/poky.conf= 文件定义了 distro 配置变量, 对应于不同的编译策略.
- 在 =source directory= 中的配置文件, 定义了对应的目标板的配置.(比如 machine/beaglebone.conf)
**** Cross-Development Toolchain
yocto 支持两种不同的工具链:
- 在 BitBake 中运行的工具链用于编译镜像文件
- 在开发应用程序所使用的工具链
**** image
通过 BitBake 所生成的二进制文件.
**** layer
代表BSP, 内核, 以及应用程序的层次结构, 当前在这几个大类中,又由很多小的层次组成.
**** Metadata
用于 BitBake 在编译的过程中的解析文件, 也就是原始文件, 包括 recipes, classes, configuration files.
**** OE-Core
位于 =meta= 文件夹中, 用于 OE 和 yocto 共享的元数据.
**** OpenEmbedded Build System
特别针对于 yocto project 的构建系统.
**** Package 
由 bitbake 编译所生成的二进制包.
**** package groups
一些配置所组合成的一个包,包含了一系列的配置.
**** poky
一个开源项目的名称, poky 是 yocto 项目的基础项目, 所以 clone 下来的目录名称就叫做 poky.
**** recipe
以 =.bb= 后缀结尾,用于编译 packages 的一些设置命令, 调配各个部分之间的协调, 比如在哪里导入代码, 应用哪些补丁, 这些代码如何配置, 如何编译等等. 

也用于描述于其他 recipe 之间的关联,以及库的依赖关系.

**** source directory
一般来说就是指代 =clone= 而来的文件夹 =poky=.
**** task
bitbake 用于执行时的一个单元
**** upstream
远程代码库
*** 提交一次更改

yocto 维护的主分支就是 =master= , 其他普通开发者通过 clone 此库, 然后将满意的更改提交到特定库 =poky-contrib=.

然后由 yocto 的主要维护人员来判断是否合并入 =master= 分支中.

yocto 使用邮件列表和打补丁的方式来合并和讨论更改.

在开发社区, 有两个特殊的分支专用于测试一些提交申请:
- "ross/mut" : mut(master-under-test) 存在于 =poky-contrib= 库.
- "master-next" : 存在于 =poky= 库.
**** 使用 git 时的一些良好的习惯
1. 每完成一个小的改动,并且测试通过后,便可以提交一次.这样便于以后回溯,也更加清晰明了.
2. 要善于利用分支. =master= 分支代表的就是目前产品最新且最为稳定的阶段, 此分支通过很多 =tags= 来表明各个阶段.
*要增加一个新功能或者修复一个bug时,需要新建一个分支.在此分支测试通过后再合并到主分支中去,然后删除此分支.*
3. 在不同功能分支的情况下,如果几个分支都需要更改相同的部分, *那么应该修改它们的共同分支*.
**** 向 poky 提交(How to submit a Change)
poky库是 yocto 项目的参考库, 包含有很多的组件及工具.主要具有以下几大组件用于提交:
- *core metadata* : 当有 =meta= 或 =scripts= 中的内容改变时,需要提交这个分支的[[lists.openembedded.org/mailman/listinfo/openembedded-core][邮件列表]]
- *BitBake* : 当 =bitbake= 下的文件有更新时, 发送到此[[lists.openembedded.org/mailman/listinfo/bitbake-devel][邮件列表]]
- *meta-yocto-bsp" and "meta-poky" tress* : 当 =meta-yocto= 下的文件更新时, 提交补丁到此[[lists.yoctoproject.org/listinfo/poky][邮件列表]]
**** 其他地方的文件修改提交
其他文件,工具,文档的修改都提交到此[[https//lists.yoctoprojects.org/listinfo/yocto][邮件列表]], *当你修改文档的时候,有些文档内部会要求自己的邮件列表, 那么应该使用它所指定的列表*.
**** 提交具体操作
在提交更改之前,需要找到自己做了哪些改动以及修改历史, 使用以下方法来找出这些改动:
- *Maintenance File*: 查看 =meta-poky/conf/distro/include= 文件下的 =maintainers.inc= 文件, 此文件列出了提交者.
- *Search by File*:使用 git 命令来查看更改历史以及负责维护的作者联系方式, 比如 =git status / git diff / git shortlog --filename=

在提交的说明中,需要包含 =Signed-off-by:= 一行, 以及 =Developer's Certificate of Origin 1.1= 内容.也就是说, *一定要符合标准格式*.

提交具体格式参考手册对应章节.
**** 使用脚本来提交更改以及请求更新(首选)
- 在保证自己的更改在 git 库的控制范围内
- 加入更改 : git add .
- 提交到本地: git commit , *提交信息要写好*.
- 提交到远端库 : git push 
- 通知维护者,发出合并申请: 在 =scripts= 文件夹下使用脚本 =create-pull-request 和 send-pull-request= , 具体使用方法使用 =-h= 选项查看.
**** 使用 email 提交补丁
- 保证自己的工作在 git 库的控制范围
- 加入更改: git add .
- 提交到本地: *git commit --signoff*
- 转换提交细节到 email 消息中: git format-patch , 这样会生成 .patch 文件.
- 发送邮件: git send-email 

*** 通用开发模型(Common Development Models)
yocto 具有以下几种开发模型:
- *System Development* : 此模型包含 BSP以及内核的修改及配置开发.
- *User Application Development* : 此模型包含 APP 开发
- *Temporary Source Code Modification*: 此模型用于快速测试一些代码. 在测试代码完成后再更新到主分支中.
- *Image Development using Toaster*: 用于定制最终的镜像文件
- *Using a Development Shell*: 使用 shell 来调试组件
**** 系统开发的工作流程(System Development Workflow)
***** 开发BSP
[[./bsp_create_workflow.bmp][bsp开发流程]]
- 确保能够运行 yocto 的主机
- 拷贝 yocto 工程代码
- 拷贝 =meta-intel= 工程代码
- 使用 =yocto-bsp= 脚本来完成BSP层创建
- 配置 BSP 
- 配置 recipe 
- 为编译做准备
- 编译镜像文件
***** 修改内核
****** 内核概览
通过查看 yocto 的代码仓库可以发现有好几个版本的内核:
- *linux-yocto-3.14*: 基于 linux3.14 和 yocto 1.6,1.7 而生成的稳定版工程
- *linux-yocto-3.17*: 基于 linux3.17 和 yocto 1.7 而生成的工程, *目前已经没有维护*.
- *linux-yocto-3.19*: 基于 linux3.19 和 yocto 1.8 而生成的稳定版工程
- *linux-yocto-4.1*: 基于 linux4.1 和 yocto 2.0 而生成的稳定版工程
- *linux-yocto-4.4*: 基于 linux4.4 和 yocto 2.1 而生成的稳定版工程
- *linux-yocto-dev*: 最新的正在开发中的版本

其中, 长期支持的版本有:
- 基于 yocto 1.7,1.8,2.0 的 =linux-yocto-3.14
- 基于 yocto 2.1 的 =linux-yocto-4.1=

[[./kernel_branch.bmp][内核分支维护]]
内核的维护是基于分支的概念, 图中 =Kernel.org Branch Point= 就是原版的linux, 其他的维护分支都是基于此分支的.

=Branch Point= 右边的分支, 都代表对于不同硬件的开发, 每一个端点都是针对性的.但是它们又可以同步相互所公用的代码.

在编译内核的时候, 会将内核代码拷贝到一个临时的工作区来修改, 如下图所示:
[[./temporary.bmp][临时工作区]]
****** 修改内核的流程
[[./kernel_modi_workflow.bmp][内核修改流程]]
- 首次编译来建立临时文件夹, 然后使用 =oe-init-build-env / oe-init-build-env-memres= 来获取环境变量
- 根据需要修改内核代码
- 根据需要更改内核配置
- 再次重新编译内核

**** 使用 SDK 开发 APP 的流程
**** 修改应用代码
在 OpenEmbedded 中还有的工具:
- *devtool* : 
- *Quilt*: 
***** 使用 *devtool*
****** 使用 *devtool add* 来增加一个应用框架
[[./devtool_add.bmp][devtool_add]]
- 生成新的 recipe: 从上图可以看出有3中生成的方式.
  + =devtool add recipe fetchuri= 用于重头新建一个应用框架
  + =devtool add recipe srctree fetchuri= 也是重头新建一个应用框架,但是应用代码不存在默认位置, *srctree* 来指定位置.
  + =devtool add recipe srctree= 用于从外部导入一个应用代码
- 编辑 recipe: =devtool edit-recipe recipe=
- 编译 recipe 并且生成镜像文件: =devtool build recipe= 用于编译 recipe, =devtool build-image image= 用于生成镜像文件,文件中已经包含了 =recipe=.
- 部署编译输出: =devtool deploy-target recipe target= 输出文件到目标硬件(运行 SSH server)
- 完成开发 : =devtool finish recipe layer= 生成相比上次的补丁,并且复位 recipe 以用于别的开发.
****** 使用 *devtool modify* 来编辑代码
[[./devtool_modify.bmp][devtool modify]]
- 准备修改代码: 修改代码也有三种方式
  + =devtool modify recipe= : 与上一节的方式对应, 编辑本文件夹内的源码.
  + =devtool modify recipe srctree= : 指明编辑的文件路径
  + =devtool modify -n recipe srctree= : 指明使用外部代码和外部的 recipe 
- 编辑代码: 经过上面步骤后, 就可以使用任意的编辑器进行修改了.
- 编译: 正常编译即可.
- 部署编译输出: =devtool deploy-target recipe target= (目标板需要运行SSH server)
- 完成开发 : =devtool finish recipe layer= 生成相比上次的补丁,并且复位 recipe 以用于别的开发.

****** 使用 *devtool upgrade* 使用新版本
一般用于第三方软件有更新时, 使用此命令来获得更新的软件.
[[./devtool_upgrade.bmp][devtool upgrade]]
- 准备升级: =devtool upgrade -V version recipe= 默认将新代码提取到 workspace 中, 如果要指定提取路径,使用 =devtool upgrade -V version recipe srctree=.
- 解决冲突: 
- 编译
- 部署输出
- 完成

***** 使用 *Quilt*
quilt 用于捕捉代码的更改.
- 找到并切换到源代码的位置: 位于临时文件夹中
- 创建一个新的补丁: =quilt new my_changes.patch=
- 通知 quilt 将要改变哪些文件: =quilt add file1.c file2.c ...=
- 编辑代码
- 测试本次修改的代码: =bitbake -c compile -f package=,
- 代码测试合格后,需要更新补丁文件: =quilt refresh= ,补丁文件位于当前目录下的 =patches= 文件夹下.
- 拷贝补丁文件: 将补丁放在 =files= 文件夹下, 然后增加文件路径到 =SRC_URI= 变量中: SRC_URI += "file://my_changes.patch"
**** 找到临时源代码
使用临时源码目录, 可以用来测试代码, 在代码测试完毕后再保存此次更改.

临时代码目录对于编译目录是可用的, 路径被存在 =S= 变量中:
#+begin_example
# BP = "${BPN} -${PV}"
S = "${WORKDIR}/${BP}"

#工作目录定位到 recipe
# TMPDIR: 编译输出目录
# MULTIMACH_TARGET_SYS: 目标系统目录
# PN: recipe 的名字
# EXTENDPE: The epoch 
# PV: recipe 版本
# PR: recipe 修订版本
${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}{$PV}-{PR}
#比如
poky/build/tmp/work/qemux86-poky-linux/foo/1.3.0-r0
#+end_example
**** 使用 Toaster 配置镜像文件
**** 使用 development shell
使用 shell 可以很好的调试和配置.
#+begin_example
#使用 devshell 开发和配置 matchbox-desktop 目标
bitbake matchbox-desktop -c devshell
#+end_example
**** 使用 development python shell
#+begin_example
bitbake matchbox-desktop -c devpyshell
#+end_example
** 详细说明
*** 基本开发步骤(Common Tasks)
**** 创建一个层(understanding and creating layers)
在 =source directory= 目录中包含了通用层和BSP层,层目录以 =meta-= 作为开头.
***** 以非脚本的方式创建自己的层
使用以下通用步骤,在不使用脚本的情况下创建一个层:
- 首先需要检查已经创建了哪些层,有没有和自己冲突的.在 [[layers.openembedded.org/layerindex/branch/master/layers][OpenEmbedded layers]] 网站中查看已经开发好的层,可以直接拿来用.
- 创建一个文件夹,以 =meta-= 作为开头以代表一个层, 比如 =meta-mylayer, meta-GUI_xyz, meta-mymachine=
- 进入层文件夹,并创建 =conf/layer.conf= 文件(可以从 =meta-yocto-bsp/conf/layer.conf= 中拷贝).
#+begin_example
# 下面是 =meta-yocto-bsp/conf/layer.conf= 中的内容:
# BBPATH 后接的是配置文件和类文件的目录地址, LAYERDIR 就代表当前层的目录
# BitBake 通过 BBPATH 指明的路径来找到此层配置文件,类文件等等
#We have a conf and classes directory, and to BBPATH
BBPATH .= ":${LAYERDIR}"

# BBFILES 后接的是 recipes 文件以及其附加文件
#We have recipes-* directories , add to BBFILES
BBFILES += "${LAYERDIR}/recipes-*/*/*/*.bb \
            ${LAYERDIR}/recipes-*/*/*/*.bbappend"
# BBFILE_COLLECTIONS 接的是层的名称
BBFILE_COLLECTIONS += "yoctobsp"
# BBFILE_PATTERN_yoctobsp 后面是一个正则表达式, 用于匹配 BBFILES 中所选出来的文件
BBFILE_PATTERN_yoctobsp = "^${LAYERDIR}/"
# BBFILE_PRIORITY_yoctobsp 用于设置层的优先级, 当有同一个 recipe 在多个层中时,
# 用于选择先使用哪个层
BBFILE_PRIORITY_yoctobsp = "5"
# LAYERVERSION_yoctobsp 使用一个数字,用于表明层的版本
LAYERVERSION_yoctobsp = "3"
#+end_example
- 增加内容: 对比其他层,增加 =README= 文件, 然后根据层的作用创建其他内容.
  + 当用于支持一个新的硬件时, 增加 =conf/machine/=
  + 当用于增加发行版的功能, 增加 =conf/distro/=
  + 当用于创建新的 recipe, 在层目录下增加 =recipes-*= 目录
- 兼容性验证
***** 使用脚本的方式创建一个层
使用脚本 =yocto-layer= 就可以简单的创建一个层.
- 设置优先级
- 是否创建 recipe
- 是否创建附加文件

#+begin_example
#创建层文件名为 "meta-mylayer" 的层
#使用此命令后, 会自动创建 conf , COPYING.MIT , README 文件
#如果选择创建配方文件,则会创建 "layer/recies-example/example/"
#如果选择创建附加文件,则会创建 "layer/recipes-example-bbappend/example-bbappend/"
#使用 yocto-layer help 查看更多信息
yocto-layer create mylayer
#+end_example

- 在使用此脚本后, 还需要将层路径加入 =BBLAYERS= 变量中!

***** 创建层需要考虑的要点
- 不能从其他层中直接拷贝 recipes 文件然后修改, 正确的方式是创建其对应的附加文件 =.bbappend= 来修改.
- 不能从其他层中直接拷贝 include 文件, 使用 =.bbappend= 修改 recipes 文件的引用.或者在新的 recipes 文件中加入 include 文件的相对路径.
- 合理的使用附加文件,可以更加优雅且安全的配置.
#+begin_example
###########1. 通过修改变量来支持不同的硬件
# 比如新建层 meta-one 是用于对硬件 "one"的支持, 那么可以新建一个 base-files.bbappend
# 对于此硬件的依赖变量 DEPENDS 需要设置仅仅对 one 硬件有效, 需要为变量增加后缀
DEPENDS_one = "foo"
DEPENDS_append_one = "foo"  #_append 等价于 "+="
DEPENDS_prepend_one = "foo" #_prepend 等价于 "=+"
# 比如想要在系统使用 musl C 库的同时才依赖 "argp-standalone",需要如下使用
DEPENDS_append_libc-musl = "argp-standalone"

###########2. 将特殊的文件放在对应的位置
# 比如当新建层中具有 recipe 文件 "base-files.bb",此文件具有 SRC_URI 变量将此文件变为全局文件
# 那么如果想要对应硬件 "one" 而扩展此文件:
FILESEXTRAPATHS_prepend := "${THISDIR}/${BPN}:"
# 就应该将扩展文件放在指明硬件的文件夹下,比如将文件放在 "meta-one/recipes-core/base-files/base-files/one"
# 中,而不是放在 "meta-one/recipes-core/base-files/base-files/" 中,因为这样会导致附加文件应用于所有的硬件

###########3. 从远程库拷贝的层文件都要放在源文件下,于其他层文件属于同一目录!




#+end_example

***** 层兼容性测试
可以在 [[https://www.yoctoproject.org/webform/yocto-project-compatible-registration][兼容 logo 申请网站]] 申请 logo, 申请表格有以下几部分:
- contact information : 提供自己的信息,所使用的 yocto 版本,以及层说明
- Acceptance criteria: 做一些选择并给出自己选 "No" 的原因
- recommendations : 基本的选择

在填写表格之前, 还需要使用 =yocto-compat-layer.py= 脚本来做兼容性测试.
#+begin_example
source oe-init-build-env
yocto-compat-layer.py your_layer_directory
#+end_example
使用此命令后,脚本将会做以下测试:
- common.test_readme: 测试是否存在 README 文件,并且文件非空
- common.test_parse: 测试 bitbake 可以解析这些文件并且没有出错
- common.test_show_environment : 测试环境没有问题
- common.test_signatures: 测试 BSP 和 DISTRO 层没有改变 recipes 文件的签名
- bsp.test_bsp_defines_machines: 测试 BSP 层是否配置了当前支持的设备
- bsp.test_bsp_no_set_mathines: 确定当层被加入时 BSP 层没有设置设备
- distro.test_distro_defines_distros: 测试 DISTRO 层是否包含配置文件
- distro.test_distro_no_set_distro: 确定当层被加入时, DISTRO 层没有设置

***** 使能层
在使用层之前, 需要先使能层. 也就是将层的路径添加进 =BBLAYERS= 变量中,位于 build 文件夹下的 =conf/bblayers.conf= 

bitbake 就是通过此变量找到对应的层, 然后分析对应的 =conf/layer.conf= 文件, 将层的 recipes, classes,configurations 添加到源文件中.
#+begin_example
LCONF_VERSION = "6"

BBPATH = "${TOPDIR}"
BBFILES ?= ""

BBLAYERS ?= " \
  $HOME/poky/meta \
  $HOME/poky/meta-poky \
  $HOME/poky/meta-yocto-bsp \
  $HOME/poky/meta-mylayer\
#+end_example
***** 在层中使用 =.bbappend= 文件
通过使用 =.bbappend= 文件来修改位于他处的 =.bb= 文件,两个文件的名称必须相同.比如 =somapp_2.3.1.bbappend= 文件对应于 =someapp_2.3.1.bb= 文件.

如果没有找到对应的文件,那么 bitbake 在编译的时候是会报错的.通过查看 =BB_DANGLINGAPPENDS_WARNONLY= 变量获取更多信息.
***** 设定层的优先级(prioritizing your layer)
当多个层中有多个 =.bb= 或 =.bbappend= 文件时, 此优先级用于决定载入的先后顺序.

使用变量 =BBFILE_PRIOPITY= 来确定优先级:
#+begin_example
BBFILE_PRIOPITY = "1"
#+end_example
***** 层管理
使用工具可以查看层之间的关系:
#+begin_example
bitbake-layers command [arguments]
#command 具有以下几种:
# - help: 显示帮助
# - show-layers: 显示层
# - show-recipes: 显示层以及他的 recipes
# - show-overlayed: 显示具有相同名字的 recipes
# - show-appends: 显示附加文件以及原文件
# - show-cross-depends: 显示recipes之间的依赖关系
# - add-layer: 在 bblayers.conf 文件中增加一个层的路径
# - remove-layer: 从 bblayers.conf 文件中删除一个层
# - flatten: 将所有层的配置都列出来.这会创建一个 "flattened" 文件夹包含这些所有配置.
#+end_example

**** 配置镜像文件(customizing images)
***** 使用 local.conf 来增加包
=build/conf/local.conf= *仅仅是用来增加包(packages)*,不能会镜像文件进行深度配置.

增加一个包的时候使用 =IAMGE_INSTALL= 变量,并且增加 =_append= 后缀:
#+begin_example
#注意 strace 前面还有一个空格
IMAGE_INSTALL_append = " strace"
#+end_example

为了使增加的包仅仅对于指定的硬件,还可以再增加后缀:
#+begin_example
#指定仅仅在 core-image-minimal 中增加 strace 包
IMAGE_INSTALL_append-core-image-minimal = " strace"
#+end_example
***** 使用变量 =IMAGE_FEATURES / EXTRA_IMAGE_FEATURES= 
在 recipes 文件中使用 =IMATGE_FEATURES= , 在 =local.conf= 文件中使用 =EXTRA_IMAGE_FEATURES= , 
来使能或者关闭印象的一些特征.

参考文件 =meta/classes/core-image.bbclass, meta/conf/bitbake.conf= 中列出了如何使用这些变量.

实际上也是来添加包, 最终这些变量所指定的包都会添加到变量 =IMAGE_INSTALL= 中.




***** 使用 =.bb= 文件
可以自己新建一个 recipe 文件来指定镜像需要增加什么,在新建文件的开头需要加入以下两行:
#+begin_example
IMAGE_INSTALL = "packagegroup-core-x11-base package1 package2"
inherit core-image 
#+end_example

在实际使用中,可以拷贝其他的 .bb 文件,然后重命名为自己的文件,最后再来增加自己所需要的东西.
***** 使用包组(Custom Package Groups) 
当一个 image 需要进行很多的包定制时, 使用包组 recipe 文件, 参考 =meta/recipes-core/packagegroups/packagegroup-base.bb=.
***** 改变主机名称
默认情况下, 镜像的主机名称和变量 =MACHINE= 一致, 最终在运行的目标机上的 =/etc/hostname= 就保存了主机名.

可以通过新建 =base_files.bbappend= 然后使用变量 =hostname= 来设置主机名,也可以在配置文件中使用 =hostname_pn-base-files= 来设置:
#+begin_example
#in an append file 
hostname="myhostname"
#in a configuration file
hostname_pn-base-files = "myhostname"
#+end_example

**** 新建一个 recipe 文件(Writing a New Recipe)
[[./recipe_create.bmp][process]]
***** 新建
新建一个 recipe 可以使用以下3种快捷方式:
- devtool add : 
- recipetool create:使用此命令前需要进入 build 文件夹, 然后执行脚本 =oe-init-build-env / oe-init-build-env-memres=.
  + =recipetool create -o OUTFILE= 创建一个基本的recipe
  + =recipetool create -o OUTFILE source= 在文件夹 source 中创建 recipe 
  + =recipetool create -o OUTFILE -x EXTERNALSRC source= 基于 EXTERNALSRC 提取源码然后新建 recipe 到文件夹 source
  + =recipetool create -d -o OUTFILE source= 在文件夹 source 中创建 recipe, 并包含调试信息
- existing recipes: 拷贝一个已经存在的 recipe, 在此基础上作修改, openembedded 提供了很多: [[https://layers.openembedded.org/layerindex/branch/master/layers][recipe]]
  + 在使用此方法前,需要确保自己已经很熟悉这个存在的 recipe.
  + 如果不想使用 =recipetool= 也没有现成的 recipe 供参考, 那么使用如下结构:
#+begin_example
DESCRIPTION = ""
HOMEPAGE = ""
LICENSE = ""
SECTION = ""
DEPENDS = ""
LIC_FILES_CHKSUM = ""
SRC_URI = ""
#+end_example
***** 保存和命名 recipe
新建完 recipe 需要将其放在层中, 并正确命名,这样才能让 bitbake 识别这些文件.
- 保存: bitbake 通过每个层的 =conf/layer.conf= 和 =BBFILES= 变量来寻找 recipes.
#+begin_example
BBFILES += "${LAYERDIR}/recipes-*/*/*.bb\
            ${LAYERDIR}/recipes-*/*/*.bbappend"
#+end_example
- 命名: basename_version.bb , 使用小写字符.
#+begin_example
cups_1.7.0.bb
gawk_4.0.2.bb
irssi_0.8.16-rc1.bb
#+end_example
***** recipe 基本语法
****** 变量
变量以大写字母和下划线组成, 通过双引号包含的字符串给变量赋值, 字符串中可以包含其他变量名(${VAR})

除了赋值操作外, 还可以使用附加操作("+= , xxx_append"), 赋值操作 "= / += / ?= /:= " 与 makefile 语法一致.
- = : 使用时才真正赋值, 这样确保变量值最符合上下文
- := : 立即赋值
- ?= : 选择赋值. 当变量为空时, 才赋值, 否则不做改变
- += : 追加赋值. 将右值追加到变量中, *此操作会自动在两段内容间加空格*.
- =+ : 在前面增加赋值. 将右值增加到变量头, *此操作会自动在两段内容间加空格*.
- xx_append : 在变量 xx 后追加赋值. *此操作不会自动添加空格, 并且优先级在 \=+ , += , =, 之后*.
  + 可以在 append 后增加 target 来指明此追加仅仅对指定的目标. SRC_URI_append_sh4 = " file://fix-makefile.patch" (*注意引号的空格*)
- xx_perpend: 与 _append 类似, 对应加在变量最前(*空格要加在字符串后*). CFLAGS_perpend_sh4 = "-I${S}/myincludes " 

变量名可以重新赋值,或者对于特定的目标设置特定的值.


#+begin_example
S = "${WORKDIR}/postfix-${PV}"
CFLAGS += "-DNO_ASM"
SRC_URI_append = " file://fixup.patch"
KBRANCH = "standard/base"
KBRANCH_qemuarm = "standard/arm-versatile-926ejs"
#+end_example
****** 函数
函数的语法与 =shell= 一样.
#+begin_example
do_install(){
    autotoos_do_install
    install -d ${D} ${base_bindir}
    mv ${D} ${bindir}/sed ${D} ${base_bindir}/sed
    rmdir ${D}${bindir}/
}
#+end_example
****** 关键字
- inherit : 导入一个函数
- include / require : 包含其他文件
- export : 将局部变量转为全局变量
#+begin_example
export POSTCONF = "${STAGING_BINDIR}/postconf"
inherit autoconf
require otherfile.inc
#+end_example
****** 注释
与 shell 一样, 使用 =#= 做注释.
****** 续行符
使用 =\=
****** 使用 python
可以在 recipe 中嵌入 python 语法, 使用方式: =${@python_code}= , python_code 即为需要执行的代码
#+begin_example
SRC_URI = "ftp://ftp.info-zip.org/pub/infozip/src/zip${@d.getVar('PV',1).replace('.','')}.tgz"
#+end_example

***** 编译和运行 recipe 
这个过程会多次重复, 因为需要反复修改和重新配置 recipe.
#+begin_example
#提供 recipe 的基本名字
bitbake basename
#在编译过程中, bitbake 会生成一个临时文件夹, 存放了源码,日志,编译中间文件等等.
#使用以下命令找到临时文件夹地址
bitbake -e basename | grep ^WORKDIR=
#+end_example
在最终生成的文件夹中就可以验证 recipe.
***** 抓取代码

有很多开源的代码,可以直接从网上下载应用.

recipe 中的 =SRC_URI= 变量指明了源文件的路径.
#+begin_example
SRC_URI = "ftp://ftp.berlios.de/pub/cdrecord/alpha/cdrtools-${PV}.tar.bz2"
#+end_example
当路径是压缩包的形式时, =do_unpack= 任务会自动解包.

当路径是版本控制系统时, 那么还需要设置需要抓取的版本号.
#+begin_example
SRCREV = "d6918c8832....."

PR = "r6"
PV = "1.0.5+git${SRCPV}"

SRC_URI = "git://git.kernel.dk/blktrace.git \
           file://ldflags.patch"
#+end_example

当 =SRC_URI= 具有多个链接地址时, 需要指明它们的 =md5 和 sha256= 校验.
#+begin_example
SRC_URI = "${DEBIAN_MIRROR}/main/a/apmd/apmd_3.2.2.orig.tar.gz;name=tarball \
           ${DEBIAN_MIRROR}/main/a/apmd/apmd_${PV}.diff.gz;name=patch"

SRC_URI[tarball.md5sum] = "bl36309e8...."
SRC_URI[tarball.sha256sum] = "7f7d9....."

SRC_URI[patch.md5sum] = "57e1b58....."
SRC_URI[patch.sha256sum] = "7905ff..."
#+end_example

当 =SRC_URI= 中的地址以 =file:= 开头时, bitbake 自动搜寻本地文件夹, 路径根据 =FILESPATH= 决定.

***** 提取代码
在编译期间, =do_unpack= 任务会自动的解压缩 recipe, 变量 =S= 指定了压缩包的位置.

如果压缩包的内部结构与 =${BPN}-${PV}= 相同, 那么 =S= 就不需要设置.如果结构不统一或者是从 SCM 中获取的代码, 那么就需要指定 =S=.
***** 给代码打补丁
默认情况下, 当抓取的代码中具有补丁文件时, =do_patch= 任务会自动的打补丁.
***** 许可
recipe 中需要包含 =LICENSE= 和 =LIC_FILES_CHKSUM= 变量.
- LICENSE : 需要查看源码的 LICENSE 然后给此变量赋值, 标准的名字位于 =meta/files/common-license/ 或 meta/conf/licenses.conf 中的 SPDXLICENSEMAP 标记=.
- LIC_FILES_CHKSUM: 此变量用于确定 license 文件没有被修改过. 此值可以先随便设置一个,然后在编译过程中查看输出警告的正确值,再填入其中.
#+begin_example
LIC_FILES_CHKSUM = "file://COPYING;md5=xxx"
#+end_example

***** 依赖
编译时的依赖库使用变量 =DEPENDS= 指定, 运行时的依赖库由变量 =RDEPENDS= 指定.
***** 配置
在实际编译之前, 都需要配置源码的编译方式.
- autotools : 当源码中包含 =configure.ac= 文件时, 那么源码的构建就需要使用到 autotools.
所以 recipe 中需要 inherit =autotools= 类, 并且不需要包含 =do_configure= 任务.
- CMake: 当源码中包含 =CMakeLists.txt= 文件时, 就会用到 CMake, 所以 recipe 中需要 inherit =cmake= 类, 并且不需要包含 =do_configure= 任务.
- Other: 当源码中不包含 =configure.ac 或 CMakeLists.txt= 文件时, 那么 recipe 中就需要包含 =do_configure= 任务. 这种情况下还需要自己完成 Makfile 或者一些脚本.

当配置完成后, 可以查看文件 =log.do_configure= 来判断配置是否合理.
***** 头文件包含
当需要在编译的过程中与硬件通信或者配置内核等,都需要包含头文件.

*注意*: 无论在任何情况下都不能修改文件 =meta/recipes-kernel/linux-libc-headers/linux-libc-headers.inc= 文件, 这会影响很多.

需要修改文件的话, 最好还是通过 =.bbappend= 来完成.并且 recipe 需要如下行:
#+begin_example
do_configure[depends] += "virtual/kernel:do_shared_workdir"
#+end_example
***** 编译
在源码被抓取,解压缩并配置完成后, =do_compile= 任务便开始运行了.

在此任务执行失败的情况下, 有以下几种可能:
- 并行编译错误 : 由于编译任务之间的依赖关系, 如果依赖任务先于被依赖项执行,那么就会存在找不到文件的情况,解决方法是关闭此功能:
#+begin_example
PARALLEL_MAKE = ""
#+end_example
- 编译路径错误: 当路径错误时, 需要检查文件 =log.do_compile= .
- 没有找到文件或库: 这个由于依赖没有设置完整的原因, 需要去 recipe 中重新设置.
***** 安装