#+TITLE: [What]Yocto Project --> BitBake HelloWorld
#+DATE: <2018-09-16 日> 
#+TAGS: yocto
#+LAYOUT: post 
#+CATEGORIES: linux, make, yocto
#+NAME: <linux_make_yocto_bitbake_hello.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

参考书籍:Embedded Linux System with the Yocto Project
- 书籍比实际的yocto版本要低，所以yocto的详细命令需要参考其[[https://www.yoctoproject.org/docs/][对应版本手册]]

运行环境:
- ubuntu18.04 amd64
- yocto 2.5.1

前面讲了那么多的理论，现在就需要实际来控制BitBake完成构建，提高感性认知。
#+BEGIN_HTML
<!--more-->
#+END_HTML
在进行具体构建之前，先以文件夹的层次角度来看待构建流程:
[[./yocto_build_struct.jpg]]

可以看出，我们如果要编译一个软件包，需要:
1. 新建软件包层 (meta-xxx)
2. 配置软件包层(layer.conf,*.bb,*.bbappend)
3. 在构建目录(build)的 =bblayers.conf= 中包含该层
4. 启动bitbake构建并测试

* 软件包层
通过前面的基础理论知识可以知道：要增加一个软件包，正规的做法是为其增加一个layer并配置构建规则。
** 新建层
#+BEGIN_EXAMPLE
  bitbake-layers create-layer meta-nano
#+END_EXAMPLE

新建目录结构如下:
#+BEGIN_EXAMPLE
  meta-nano/
  ├── conf
  │   └── layer.conf
  ├── COPYING.MIT
  ├── README
  └── recipes-example
      └── example
          └── example_0.1.bb
#+END_EXAMPLE
** 配置层   
新增加的 =layer.conf= 已经填充好了对于该层的基础配置:
#+BEGIN_EXAMPLE
  # We have a conf and classes directory, add to BBPATH
  BBPATH .= ":${LAYERDIR}"

  # We have recipes-* directories, add to BBFILES
  BBFILES += "${LAYERDIR}/recipes-*/*/*.bb \
              ${LAYERDIR}/recipes-*/*/*.bbappend"

  BBFILE_COLLECTIONS += "meta-nano"
  BBFILE_PATTERN_meta-nano = "^${LAYERDIR}/"
  BBFILE_PRIORITY_meta-nano = "6"
#+END_EXAMPLE

在此基础之上，需要增加其兼容性声明:
#+BEGIN_EXAMPLE
  LAYERSERIES_COMPAT_meta-nano = "sumo"
#+END_EXAMPLE

可以看到： =recipes-example= 中的 =example_0.1.bb= 会被 bitbake 解析，所以接下来需要配置该 recipe 文件。

根据前面的理解，可以想象出编写 recipe 文件的流程：
1. 根据要下载软件包的链接，填充其路径到 =SRC_URL= 变量中
2. 依次编写 =do_download()、do_unpack()、do_compile()、do_build()、do_install()= 函数
3. 使用 =addtask= 将函数先后顺序串联起来 

其实步骤 2 和 3 在 =base.bbclass= 中都已经包含了，也就是说只需要配置 =SRC_URL= 即可。

*校验值的获取*

bb 文件需要被下载文件的 md5 以及 LICENSE 的 md5：
- 文件的 md5 获取，需要手动下载文件后，对 *最初压缩包* 使用 =md5sum= 生成值
- LICENSE 的 md5 获取，需要解压缩文件后，对文件 *COPYING* 使用 =md5sum= 生成值
  + LICENSE 变量的值需要与 COPYING 中的一致
  
最终，bb 文件的内容如下:
#+BEGIN_EXAMPLE
  SUMMARY = "bitbake-layers recipe"
  DESCRIPTION = "Recipe created by bitbake-layers"
  LICENSE = "GPLv3"
  LIC_FILES_CHKSUM = "file://COPYING;md5=f27defe1e96c2e1ecd4e0c9be8967949"

  # 对所下载文件的版本标识，此变量必须有
  PV = "4.4"

  SRC_URI = "https://nano-editor.org/dist/v4/nano-${PV}.tar.xz"
  SRC_URI[md5sum] = "9650dd3eb0adbab6aaa748a6f1398ccb"
#+END_EXAMPLE
* 构建
** 配置构建环境
仅需要在 =bblayers.conf= 中加入刚刚新建的层即可
#+BEGIN_EXAMPLE
  # POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf
  # changes incompatibly
  POKY_BBLAYERS_CONF_VERSION = "2"

  BBPATH = "${TOPDIR}"
  BBFILES ?= ""

  BBLAYERS ?= " \
    /home/cec/github/poky/meta \
    /home/cec/github/poky/meta-poky \
    /home/cec/github/poky/meta-yocto-bsp \
    /home/cec/github/poky/meta-nano \
    "
#+END_EXAMPLE
** 构建
#+BEGIN_EXAMPLE
  bitbake nano
#+END_EXAMPLE
即可在 =downloads= （用于保存下载包的文件夹）文件夹中看到：
#+BEGIN_EXAMPLE
  nano-4.4.tar.xz
  nano-4.4.tar.xz.done
#+END_EXAMPLE

