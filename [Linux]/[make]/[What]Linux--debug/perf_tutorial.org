#+TITLE: [What]perf 基本使用
#+DATE: <2018-02-11 Sun> 
#+TAGS: debug 
#+LAYOUT: post 
#+CATEGORIES: linux, debug, perf 
#+NAME: <linux_debug_perf_tutorial.org>
#+OPTIONS: ^:nil 
#+OPTIONS: ^:{}

perf 是Linux(2.6+)内置的强大的分析工具，所以其既可以用于PC也可以用于嵌入式Linux。
#+BEGIN_HTML
<!--more-->
#+END_HTML
* 目标机安装
但在编译过程中发现交叉编译器有很多的库提示没有安装，下面进行一一安装( *如果忽略这些警告，就会出现perf输出文件中很多符号都是 [unknown] 的情况，即使应用编译时使用了 =-g= 选项*):
- 其中最为重要的就是elf库
- 编译器使用的库路径一般在其安装在其目录下的 =/libc/usr/= 。
- 而目标机文件系统路径一般安装在 =/usr= 目录下
** 安装zlib
在[[https://sourceforge.net/projects/libpng/files/zlib/1.2.11/zlib-1.2.11.tar.gz/download?use_mirror=jaist&download=][sourceforge]]下载源码。
- *安装到编译器路径*
#+BEGIN_EXAMPLE
  tar -xzf zlib-1.2.11.tar.gz
  cd zlib-1.2.11/
  CC=arm-linux-gnueabihf-gcc ./configure --prefix=/opt/Xilinx/SDK/2016.2/gnu/aarch32/lin/gcc-arm-linux-gnueabi/arm-linux-gnueabihf/libc/usr
  make
  make install
#+END_EXAMPLE
- *安装到目标机根文件系统*
#+BEGIN_EXAMPLE
  CC=arm-linux-gnueabihf-gcc ./configure --prefix=/usr
  make
  make install DESTDIR=/home/cec/zlib
#+END_EXAMPLE
最后将此文件夹内容拷入根文件系统 =/usr= 即可。
** 安装libc6
在[[https://packages.debian.org/search?keywords=libc6][Debian]]找到交叉编译版本的libc6。
- *安装到编译器路径*
#+BEGIN_EXAMPLE
  mkdir libc6
  dpkg-deb -x libc6-armel-cross_2.24-10cross1_all.deb libc6
  cd libc6
  cp -R usr/arm-linux-gnueabi/lib/** /opt/Xilinx/SDK/2016.2/gnu/aarch32/lin/gcc-arm-linux-gnueabi/arm-linux-gnueabihf/libc/usr/lib/
#+END_EXAMPLE
- *安装到目标机根文件系统*
最后将此文件夹内容拷入根文件系统 =/usr= 即可。
** 安装elfutils
根据编译提示，在[[https://sourceware.org/elfutils/][下载站]]下载与之更新的版本。
- *安装到编译器路径*
#+BEGIN_EXAMPLE
  #下载及解压
  axel -n 20 https://sourceware.org/elfutils/ftp/0.172/elfutils-0.172.tar.bz2
  tar -xjf elfutils-0.172.tar.bz2
  cd elfutils-0.172/
  #查看其INSTALL文件得出其配置命令
  CC=arm-linux-gnueabihf-gcc ./configure --host=arm --prefix=/opt/Xilinx/SDK/2016.2/gnu/aarch32/lin/gcc-arm-linux-gnueabi/arm-linux-gnueabihf/libc/usr
  make
  make install
#+END_EXAMPLE
- *安装到目标机根文件系统*
#+BEGIN_EXAMPLE
  CC=arm-linux-gnueabihf-gcc ./configure --host=arm --prefix=/usr
  make
  make install DESTDIR=/home/cec/elflib
#+END_EXAMPLE
最后将此文件夹内容拷入根文件系统 =/usr= 即可。
** 安装libunwind(失败)
- *安装到编译器路径*
#+BEGIN_EXAMPLE
  git clone git://git.sv.gnu.org/libunwind.git
  cd libunwind/
  #查看README
  ./autogen.sh 
  CC=arm-linux-gnueabihf-gcc ./configure --host=arm --prefix=/opt/Xilinx/SDK/2016.2/gnu/aarch32/lin/gcc-arm-linux-gnueabi/arm-linux-gnueabihf/libc/usr
  make
  make install
#+END_EXAMPLE
*说明：* 此步出现错误 =undefined reference to `_Uarm_is_signal_frame'= 还未解决。
- *安装到目标机根文件系统*
** 安装libaudit(失败)
- *安装到编译器路径*
#+BEGIN_EXAMPLE
  git clone https://github.com/Distrotech/libaudit
  cd libaudit/
#+END_EXAMPLE
- *安装到目标机根文件系统*
** 安装binutils
- *安装到编译器路径*
在[[http://ftp.gnu.org/gnu/binutils/][官网]]下载源码。
#+BEGIN_EXAMPLE
  tar -xjf binutils-2.25.tar.bz2
  cd binutils-2.25/
  mkdir build
  cd build/
  CC=arm-linux-gnueabihf-gcc ../configure --host=arm-linux-gnueabihf --target=arm-linux-gnueabihf --prefix=/opt/Xilinx/SDK/2016.2/gnu/aarch32/lin/gcc-arm-linux-gnueabi/arm-linux-gnueabihf/libc/usr
  make
  make install
#+END_EXAMPLE
- *安装到目标机根文件系统*
** 安装perf
perf 是在 =tools/perf= 文件中的一个独立应用软件，所以需要先编译它以可以用在目标机上。

在此目录下查看文件 =Makefile.perf= 发现有如下几行:
#+BEGIN_EXAMPLE
  Define ARCH as name of target architecture if you want cross-builds.
  Define CROSS_COMPILE as prefix name of compiler if you want cross-builds.
#+END_EXAMPLE
可以通过这两个选项来指定编译器和编译架构:
#+BEGIN_EXAMPLE
  make CROSS_COMPILE=arm-linux-gnueabihf- ARCH=arm
#+END_EXAMPLE
- *安装到目标机根文件系统*
将编译出的可执行文件拷贝进目标机 =/usr/bin/= 即可。
* 全局概览
在shell中输入 =perf= 便可列出其可执行的所有命令：
#+begin_example
cec@box:~/github/lepd$ perf

 usage: perf [--version] [--help] [OPTIONS] COMMAND [ARGS]

 The most commonly used perf commands are:
 annotate        Read perf.data (created by perf record) and display annotated code
 archive         Create archive with object files with build-ids found in perf.data file
 bench           General framework for benchmark suites
 buildid-cache   Manage build-id cache.
 buildid-list    List the buildids in a perf.data file
 c2c             Shared Data C2C/HITM Analyzer.
 config          Get and set variables in a configuration file.
 data            Data file related processing
 diff            Read perf.data files and display the differential profile
 evlist          List the event names in a perf.data file
 ftrace          simple wrapper for kernel's ftrace functionality
 inject          Filter to augment the events stream with additional information
 kallsyms        Searches running kernel for symbols
 kmem            Tool to trace/measure kernel memory properties
 kvm             Tool to trace/measure kvm guest os
 list            List all symbolic event types
 lock            Analyze lock events
 mem             Profile memory accesses
 record          Run a command and record its profile into perf.data
 report          Read perf.data (created by perf record) and display the profile
 sched           Tool to trace/measure scheduler properties (latencies)
 script          Read perf.data (created by perf record) and display trace output
 stat            Run a command and gather performance counter statistics
 test            Runs sanity tests.
 timechart       Tool to visualize total system behavior during a workload
 top             System profiling tool.
 probe           Define new dynamic tracepoints
 trace           strace inspired tool

 #使用这种方式会进入一个命令的手册进行详细解说，
 #也可以使用 perf COMMAND -h 来简略列出命令说明
 See 'perf help COMMAND' for more information on a specific command.
#+end_example
* 命令简略说明
** perf list (系统事件捕捉列表)
系统事件分为：
- 软件事件(Software Event):偏向系统及用户运行软件的事件，与具体的CPU类型无关
- 硬件事件(Performance Monitoring Unit,PMU): 与CPU相关的事件，需要参考CPU相关手册
- 捕捉点事件(Tracepoint event): 内核中的 tracepoint 事件相关

*** 使用
- 根据自身需求确定需要捕捉哪种事件
- 输入 =perf list= 根据其列出的事件名列表以及说明确定需要使用的事件名
- 使用 =sudo perf top -e <event name1>[,<event name2>]= 来确定捕捉哪些事件


