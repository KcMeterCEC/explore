* [What]Linux --> 调试技巧
** 通用调试工具
*** GDB
*** DDD
** 内核调试
调试嵌入式linux内核的方法如下:
1. 目标机"插桩",如打上KGDB补丁,这样主机上的GDB可以与目标机KGDB通过串口或网口通信
2. 使用仿真器,仿真器可以直接连接目标机的JTAG/BDM,这样主机GDB就可以通过与仿真器的通信来控制目标机.
3. 在目标板上通过printk(),Oops,strace等软件方法进行观察调试,这些方法不具备查看和修改数据结构,断点,単步等功能.

所以不管时目标机"插桩"函数使用仿真器,主要的调试工具还是GDB.
*** 调试信息输出
内核默认有很多使用 =pr_debug()/dev_dbg()= 的输出,但需要满足如下条件:
1. 开启了 DEBUG 宏
2. kernel printk 的默认日志级别大于7
**** 开启DEBUG
- 方法1
在要输出信息的文件开头加上宏定义 =#define DEBUG=
- 方法2
在编译内核的时候传入参数 KCFLAGS=-DDEBUG 打开全局输出
*** printk
printk()会将内核信息输出到信息缓冲区中, *内核信息缓冲区是一个环形缓冲区(Ring Buffer),所以塞入消息过多则会将之前的消息冲刷掉*.
printk()定义了8个消息级别(0~7), *数值越低,级别越高*.
#+BEGIN_SRC C
#define KERN_EMERG "<0>" //紧急事件,一般是系统崩溃之前提示的消息
#define KERN_ALERT "<1>" //必须立即采取行动
#define KERN_CRIT "<2>" //临界状态,通常涉及严重的硬件或软件操作失败
#define KERN_ERR "<3>" //用于报告错误状态,设备驱动代码经常使用它报告硬件问题
#define KERN_WARNING "<4>" //对可能出现问题的情况进行警告,不会对系统造成严重的问题
#define KERN_NOTICE "<5>" //有必要进行提示的正常情形,许多与安全攸关的情况用这个级别
#define KERN_INFO "<6>" //提示性的信息,驱动程序使用它打印出一般信息
#define KERN_DEBUG "<7>" //调试信息
#+END_SRC
**** 调试信息的输出
- pr_xxx()
通常使用封装了 printk() 的宏,来显示调试信息.比如 pr_debug(),pr_info().
使用 pr_xxx() API的好处是,可以在文件最开头通过 pr_fmt() 定义一个打印格式.
#+BEGIN_SRC C
//打印消息头带有 "NMI watchdog:"前缀
#define pr_fmt(fmt) "NMI watchdog:" fmt
#+END_SRC
- dev_xxx()
使用dec_xxx()打印的时候,设备名称会被自动打印到打印消息的前面:
**** 修改调试等级的方法
***** 在系统中修改 prink 文件
通过 =/proc/sys/kernel/printk= 文件可以调节 printk() 的输出等级,该文件的4个数值表示为:
1. 控制台的日志级别:当前的打印级别,优先级高于该值(值越小,优先级越高)的消息将被打印至控制台
2. 默认的消息日志级别: 将用该优先级来打印没有优先级前缀的消息,也就是直接写 =printk("xxx")= 而不带打印级别的情况下,会使用该打印级别
3. 最低的控制台日志级别: 控制台日志级别可被设置的最小值(一般是1)
4. 默认的控制台日志级别: 控制台日志级别的默认值
使用如下命令打印所有信息:
=#echo 8 > /proc/sys/kernel/printk=
*注意*:
此文件并不控制内核消息进入 __log_buf 的门槛,因此无论消息级别是多少,都会进入 __log_buf 中,但是最终只有高于当前打印级别的内核消息才会从控制台打印.
可以通过 =dmesg= 命令查看内核打印缓冲区, 当使用 =dmesg-c= 则不仅会显示 __log_buf 还会清楚该缓冲区的内容.也可以通过 =cat /proc/kmesg= 命令来一直显示
内核信息.
***** 修改启动参数
通过在 bootargs 中设置 =ignore_loglevel= 来忽略打印级别.
在系统启动后,也可以通过写 =/sys/module/printk/parameters/ignore_loglevel= 文件来动态设置是否忽略打印级别.
*** DEBUG_LL 和 EARLY_PRINTK
为了能够在控制台驱动初始化之前就打印信息,需要选择 DEBUG_LL 和 EARLY_PRINTK,也需要在 bootargs 中设置 earlyprintk 选项.
*** 使用 /proc
/proc 文件系统是一个虚拟文件系统,通过它可以在Linux内核空间和用户空间之间通信.可以将对虚拟文件的读写作为与内核中实体进行通信的手段.
Linux系统的许多命令都是通过分析 /proc 下的文件来完成的.
**** meminfo 文件
=cat /proc/meminfo= 显示内存概况
**** free 命令
统计内存使用情况
*** Oops
当内核出现类似用户空间的 Segmentation Fault 时,Oops 会被打印到控制台和写入内核log缓冲区.

在Oops 的输出信息中, 需要注意的一些信息是:
- PC is at [function_name] + [address]
此行指出了出错的函数, 以及执行语句在函数中的偏移地址. 然后可以通过命令得出反汇编代码, 找出C代码位置
#+begin_example
arm-linux-gnueabihf-objdump -d -D file.o
#+end_example
- 寄存器列表
当出错的函数有参数时, 可以通过寄存器列表来查看输入的参数是否正确(如果参数过多, 还要查看栈信息)
- 函数调用顺序
通过查看栈信息, 可以知道此函数是如何被以层层调用进来的


*** BUG_ON() 和 WARN_ON()
内核中有许多地方调用类似的 BUG() 语句,它非常像一个内核运行时的断言,意味着本来不该执行到BUG()这条语句,一旦执行即抛出 Oops. 

BUG()的变体叫做 =BUG_ON(condition)= ,当 *条件成立则抛出Oops*. 

除此之外,内核还有 =WARN_ON(condition)=, 当 *条件成立则抛出栈回溯, 但是不会抛出Oops*. 

有时候,WARN_ON()也可以作为一个调试技巧,比如,我们要查看这个函数时怎么一级一级被调用进来的,那可以在函数中加入一个 =WARN_ON(1)= 
*** strace
用于跟踪一个程序的运行状况,可以查看被调用函数的参数值以及它的返回值.
*** KGDB
1. 需要在 menuconfig 中打开KGDB选项
2. 在 bootargs 中添加 KGDB 与对应的串口信息.

如果想一开机就进入等待GDB连接的调试状态,可以在 bootargs 中设置 =kgdbwait=.
** 性能监控与调优工具
*** 使用 top,vmstat,iostat,sysctl 等
- top 命令用于显示处理器的活动状况.
- vmstat 用于报告关于内核线程,虚拟内存,磁盘,陷阱和CPU活动的统计信息.
- iostat 用于分析磁盘传输的闲忙状况.
- netstat 用来监测网络信息的工具
- sar 用于显示数据
- sysctl 读取系统变量
*** 使用OProfile,gprof 查看性能
- OProfile
帮助用户识别模块的占用时间,循环的展开,高速缓存的使用率低,低效的类型转换和冗余操作,错误预测转移等问题.
- gprof
打印除程序运行中各个函数消耗的时间,还可以产生程序运行时的函数调用关系,调用次数.
*** LTTng 进行内核跟踪
跟踪系统详细的运行状态和流程,可以跟踪记录系统中的特定事件.
*** LTP 压力测试
*** Benchmark 评估系统
** 应用调试
*** 文件传输
**** lrzsz(串口传输)
当有网络的情况下, 通常是使用 tftp 来收发文件, 但当没有网络时, 则可以使用 =lrzsz= 来完成.

下载 [[https://ohse.de/uwe/software/lrzsz.html][源码]] , 并解压缩后使用下面的命令编译
#+begin_example
# prefix 指定编译输出的文件夹路径
CC=arm-linux-gnueabihf-gcc ./configure --target=arm --prefix=/home/cec/Downloads/lrzsz-0.12.20/build/
make
make install
#+end_example
然后将编译好的 =bin= 目录下的应用拷贝至文件系统, 其中 lrz 接收, lsz 发送.

在 linux 主机下一般使用终端 minicom.连接好开发板后, 开发板首先运行 =lrz= ,然后在主机下 =CTRL-A s= ,选择 zmodem 然后传输文件.
