#+TITLE: [What]Linux文件系统基本操作
#+DATE:  <2018-04-06 Fri> 
#+TAGS: filesystem
#+LAYOUT: post 
#+CATEGORIES: linux, fs, overview
#+NAME: <linux_fs_overview_usage.org>
#+OPTIONS: ^:nil 
#+OPTIONS: ^:{}

参考宋宝华老师的书 =Linux设备驱动开发详解= ，来整理文件系统操作。
#+BEGIN_HTML
<!--more-->
#+END_HTML
* 编程接口
此节只列出Linux和c库操作接口，具体的详细信息还是要找 =man= 。
- 其实在实际应用中，还是尽量使用标准的 c/c++ 库便于以后移植。

需要注意的是：标准的ISOC库的I/O操作默认是带有缓存的，也就是填充一定的缓存后才会区调用系统接口。
而如果直接使用POSIX标准的系统接口，相当于上层没有做缓存，但实际上 *内核为了尽量批量化的操作I/O，其内部也会做缓存。*
** 常用接口
*** 文件的创建
- linux
#+BEGIN_SRC c
  /**
   ,* @brief 设置文件在创建时需要去掉的权限
   ,*/
  int umask(int newmask);
  /**
   ,* @brief 创建文件并设置权限
   ,* @note 权限与 umask 相与决定最终的权限
   ,* - 此函数使用较少，一般使用 open(path, O_RDWR | O_CREAT | O_TRUNC, mode);
   ,*/
  int creat(const char *pathname, mode_t mode);
#+END_SRC
| mode value | 含义                 |
|------------+----------------------|
| S_IRUSR    | 用户可读             |
| S_IWUSR    | 用户可写             |
| S_IXUSR    | 用户可执行           |
| S_IRWXU    | 用户可读、写、执行   |
| S_IRGRP    | 组可读               |
| S_IWGRP    | 组可写               |
| S_IXGRP    | 组可执行             |
| S_IRWXG    | 组可读、写、执行     |
| S_IROTH    | 其他人可读           |
| S_IWOTH    | 其他人可写           |
| S_IXOTH    | 其他人可执行         |
| S_IRWXO    | 其他人可读、写、执行 |
| S_ISUID    | 设置用户执行ID       |
| S_ISGID    | 设置组执行ID         |
- c 创建及打开
#+BEGIN_SRC c
FILE *fopen( const char *filename, const char *mode );
#+END_SRC
详解: [[http://zh.cppreference.com/w/c/io/fopen][fopen]]
*** 文件打开
- linux
#+BEGIN_SRC c
  /**
   ,* @brief 以flags指定的方式打开 pathname 指定的文件
   ,* @note
   ,* 1. 当 flags 为 O_CREAT 时，需要指定其 mode
   ,* 2. 当pathname为相对路径时，可以使用 openat 为其指定一个 dirfd，以此dir为相对路径
   ,*/
  int open(const char *pathname, int flags, .../*mode_t mode*/);
  int openat(int dirfd, const char *pathname, int flags, .../*mode_t mode*/);
#+END_SRC
| flags value | 含义                                       |
|-------------+--------------------------------------------|
| O_RDONLY    | 只读方式打开                               |
| O_WRONLY    | 只写方式打开                               |
| O_RDWR      | 读写方式打开                               |
| O_APPEND    | 追加方式打开                               |
| O_CREAT     | 创建                                       |
| O_EXCL      | 如果使用了O_CREATE且文件存在，就会发生错误 |
| O_NOBLOCK   | 以非阻塞的方式打开                         |
| O_TRUNC     | 如果文件存在则删除其内容                   |
| ...         | ...                                        |

- 在POSIX标准中的标准输入、输出、错误对应的宏依次为 =STDIN_FILENO,STDOUT_FILENO,STDERR_FILENO= 位于头文件 =<unistd.h>= 中

*** 文件读写
- linux
    进行read和write大量数据读写时，需要考虑单次读写的字节数，取文件系统的block大小(比如4096字节)，
能在尽量减小系统调用的同时保证较高的写入效率。
#+BEGIN_SRC c
  ssize_t read(int fd, void *buf, size_t count);
  ssize_t write(int fd, const void *buf, size_t count);
#+END_SRC
- c
#+BEGIN_SRC c
size_t fread( void          *buffer, size_t size, size_t count,
              FILE          *stream );
size_t fwrite( const void *buffer, size_t size, size_t count,
               FILE *stream );
#+END_SRC
详解： [[http://zh.cppreference.com/w/c/io/fread][fread]]  [[http://zh.cppreference.com/w/c/io/fwrite][fwrite]]
*** 文件定位
- linux
#+BEGIN_SRC c
  /**
   ,* @brief 以 whence 为起始移动 offset 字节
   ,* @note
   ,* 1. 获取当前文件位置使用 currpos = lseek(fd, 0, SEEK_CUR);
   ,* 当返回负数代表此文件对象不能做移动操作，比如FIFO，SOCKET
   ,*/
  off_t lseek(int fd, off_t offset, int whence);
#+END_SRC
| whence value | 含义     |
|--------------+----------|
| SEEK_SET     | 文件开头 |
| SEEK_CUR     | 当前位置 |
| SEEK_END     | 文件尾   |
- c
#+BEGIN_SRC c
int fseek( FILE *stream, long offset, int origin );
#+END_SRC
详解： [[http://zh.cppreference.com/w/c/io/fseek][fseek]]
*** 文件关闭
- linux
#+BEGIN_SRC c
  int close(int fd);
#+END_SRC
- c
#+BEGIN_SRC c
int fclose( FILE *stream );
#+END_SRC
详解： [[http://zh.cppreference.com/w/c/io/fclose][fclose]]
*** 实例
#+BEGIN_SRC c
  /*!
   ,* ### 文件操作
   ,* 1. 创建
   ,* > int create(const char *filename, mode_t mode);
   ,* > mode 与 umask (mode & umask)共同决定文件的最终权限
   ,* > int umask(int newmask);
   ,*
   ,* > FILE *fopen(const char *path, const char *mode);
   ,* > mode --> "r"/"rb"/"w"/"wb"/"a"/"ab"/"r+"/"r+b"/"rb+"/"w+"/"w+b"/"wb+"/"a+"/"a+b"/"ab+"
   ,* 2. 打开
   ,* > int open(const char *pathname, int flags);
   ,* > int open(const char *pathname, int flags, mode_t mode);
   ,* > flag --> O_RDONLY / O_WRONLY / O_RDWR / O_APPEND / O_CREAT / O_EXEC / O_NOBLOCK / O_TRUNC;
   ,* > mode --> S_IRUSR / S_IWUSR/ S_IXUSR / S_IRWXU / S_IRGRP / S_IWGRP / S_IXGRP / S_IRWXGRP / S_IROTH / S_IWOTH / S_IXOTH / S_IRWXO / S_ISUID / S_ISGID;
   ,*
   ,* 3. 读写
   ,* > int read(int fd, const void *buf, size_t length);
   ,* > int write(int fd, const void *buf, size_t length);
   ,*
   ,* > int fgetc(FILE *stream);
   ,* > int fputc(int c, FILE *stream);
   ,* > char *fgets(char *s, int n, FILE *stream);
   ,* > int fputs(const char *s, FILE *stream);
   ,* > int fprintf(FILE *stream, const char *format, ...);
   ,* > int fscanf(FILE *stream, const char *format, ...);
   ,* > size_t fread(void *ptr, size_t size, size_t n, FILE *stream);
   ,* > size_t fwrite(const void *ptr, size_t size, size_t n, FILE *stream);
   ,*
   ,* 4. 定位
   ,* > int lseek(int fd, offset_t offset, int whence);
   ,* > whence --> SEEK_SET / SEEK_CUR / SEEK_END;
   ,* > 得到文件长度 lseek(fd, 0, SEEK_END);
   ,*
   ,* > int fgetpos(FILE *stream, fpos_t *pos);
   ,* > int fsetpos(FILE *stream, const fpos_t *pos);
   ,* > int fseek(FILE *stream, long offset, int whence);
   ,*
   ,* 5. 关闭
   ,* > int close(int fd);
   ,*
   ,* > int fclose(FILE *stream);
   ,*
   ,*/
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <unistd.h>
  #include <stdio.h>
  #include <string.h>

  #define LENGTH      (100)

  int main(int argc, char *argv[])
  {
          int fd, len;
          char str[LENGTH];
          FILE *p_fd;

          fd = open("hello.txt", O_CREAT | O_RDWR, S_IRUSR | S_IWUSR);
          if(fd)
          {
                  write(fd, "Hello world", strlen("Hello world"));
                  close(fd);
          }
          p_fd = fopen("hello_lib.txt", "w+");
          if(p_fd)
          {
                  fputs("Hello world! ^_^ \n", p_fd);
                  fclose(p_fd);
          }

          fd = open("hello.txt", O_RDWR);
          len = read(fd, str, LENGTH);
          str[len] = '\0';
          printf("%s\n", str);
          close(fd);

          p_fd = fopen("hello_lib.txt", "r");
          fgets(str, LENGTH, p_fd);
          printf("%s\n", str);
          fclose(p_fd);
  }
#+END_SRC
** 多个进程打开同一个文件
多个进程打开同一个文件时，每个进程的 =task_struct= 都会包含此文件的资源描述，但是最终它们都是指向同一个 =inode= 。
- 每个文件资源描述都包含对该文件的操作状态，位置偏移等信息
- 当进行 =lseek= 这种操作时，如果没有造成文件的扩大，其实是直接操作的资源描述结构体，而没有去操作inode。
*** 互斥操作
如果有多个进程在操作同一个文件，则很有可能会造成竞态，有以下方式来避免此问题的发生：
- pread , pwrite
#+BEGIN_SRC c
  /**
   ,* @brief : 在文件为起始的 offset 字节处开始读或者写
   ,* @note :
   ,* 1. 这两个函数的操作是原子性的
   ,* 2. 此函数并不会改变对应进程本身所保存的 offset
   ,*/
  ssize_t pread(int fd, void *buf, size_t count, off_t offset);

  ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);

#+END_SRC
* 文件系统与设备驱动(include/linux/fs.h)
在设备驱动中，会关心file和inode这两个结构体。
- 每打开一个文件，在内核空间中就有与之关联的 file 结构体
  + 设备驱动通过此结构体判断用户操作模式(比如是阻塞还是非阻塞等)
- inode 则包含了一个文件的详细信息
** file
#+BEGIN_SRC c
struct file {
        union {
                struct llist_nodefu_llist;
                struct rcu_head fu_rcuhead;
        } f_u;
        struct pathf_path;
        struct inode*f_inode;/* cached value */
        const struct file_operations*f_op;

        /*
         ,* Protects f_ep_links, f_flags.
         ,* Must not be taken from IRQ context.
         ,*/
        spinlock_tf_lock;
        atomic_long_tf_count;
        unsigned int f_flags;
        fmode_tf_mode;
        struct mutexf_pos_lock;
        loff_tf_pos;
        struct fown_structf_owner;
        const struct cred*f_cred;
        struct file_ra_statef_ra;

        u64f_version;
        #ifdef CONFIG_SECURITY
        void*f_security;
        #endif
        /* needed for tty driver, and maybe others */
        void*private_data;

        #ifdef CONFIG_EPOLL
        /* Used by fs/eventpoll.c to link all the hooks to this file */
        struct list_headf_ep_links;
        struct list_headf_tfile_llink;
#endif /* #ifdef CONFIG_EPOLL */
        struct address_space*f_mapping;
} __attribute__((aligned(4)));/* lest something weird decides that 2 is OK */
#+END_SRC
** inode 
#+BEGIN_SRC c
/*
 ,* Keep mostly read-only and often accessed (especially for
 ,* the RCU path lookup and 'stat' data) fields at the beginning
 ,* of the 'struct inode'
 ,*/
struct inode {
        umode_ti_mode;
        unsigned shorti_opflags;
        kuid_ti_uid;
        kgid_ti_gid;
        unsigned inti_flags;

        #ifdef CONFIG_FS_POSIX_ACL
        struct posix_acl*i_acl;
        struct posix_acl*i_default_acl;
        #endif

        const struct inode_operations*i_op;
        struct super_block*i_sb;
        struct address_space*i_mapping;

        #ifdef CONFIG_SECURITY
        void*i_security;
        #endif

        /* Stat data, not accessed from path walking */
        unsigned longi_ino;
        /*
         ,* Filesystems may only read i_nlink directly.  They shall use the
         ,* following functions for modification:
         ,*
         ,*    (set|clear|inc|drop)_nlink
         ,*    inode_(inc|dec)_link_count
         ,*/
        union {
                const unsigned int i_nlink;
                unsigned int __i_nlink;
        };
        dev_ti_rdev;
        loff_ti_size;
        struct timespeci_atime;
        struct timespeci_mtime;
        struct timespeci_ctime;
        spinlock_ti_lock;/* i_blocks, i_bytes, maybe i_size */
        unsigned short          i_bytes;
        unsigned inti_blkbits;
        blkcnt_ti_blocks;

        #ifdef __NEED_I_SIZE_ORDERED
        seqcount_ti_size_seqcount;
        #endif

        /* Misc */
        unsigned longi_state;
        struct mutexi_mutex;

        unsigned longdirtied_when;/* jiffies of first dirtying */
        unsigned longdirtied_time_when;

        struct hlist_nodei_hash;
        struct list_headi_io_list;/* backing dev IO list */
        #ifdef CONFIG_CGROUP_WRITEBACK
        struct bdi_writeback*i_wb;/* the associated cgroup wb */

        /* foreign inode detection, see wbc_detach_inode() */
        inti_wb_frn_winner;
        u16i_wb_frn_avg_time;
        u16i_wb_frn_history;
        #endif
        struct list_headi_lru;/* inode LRU list */
        struct list_headi_sb_list;
        union {
                struct hlist_headi_dentry;
                struct rcu_headi_rcu;
        };
        u64i_version;
        atomic_ti_count;
        atomic_ti_dio_count;
        atomic_ti_writecount;
        #ifdef CONFIG_IMA
        atomic_ti_readcount; /* struct files open RO */
        #endif
        const struct file_operations*i_fop;/* former ->i_op->default_file_ops */
        struct file_lock_context*i_flctx;
        struct address_spacei_data;
        struct list_headi_devices;
        union {
                struct pipe_inode_info*i_pipe;
                struct block_device*i_bdev;
                struct cdev*i_cdev;
                char*i_link;
        };

        __u32i_generation;

        #ifdef CONFIG_FSNOTIFY
        __u32i_fsnotify_mask; /* all events this inode cares about */
        struct hlist_headi_fsnotify_marks;
        #endif

        void*i_private; /* fs or device private pointer */
};
#+END_SRC

* udev 用户空间设备管理
#+begin_example
Linux设计中强调的一个基本观点是机制和策略分离。
机制是做某样事情的固定步骤、方法，而策略是每一个步骤所采取的不同方式。
机制是固定的，而每个步骤采用的策略是不固定的。机制是稳定的，而策略是灵活的。
因此，在Linux内核中，不应该实现策略。
#+end_example
udev完全在用户态工作，利用设备加入或移出时内核所发送的热拔插事件(Hotplug Event)来工作。
在热拔插时，设备的详细信息会由内核通过netlink套接字发送出来，发出的事件叫uevent。udev的设备
命名策略、权限控制和事件处理都是在用户态下完成的，它利用从内核收到的信息来进行创建设备文件节点等工作。

udev的工作过程：
1. 当内核检测到系统中出现了新设备后，内核会通过netlink套接字发送uevent
2. udev获取内核发送的信息，进行规则的匹配。匹配的事物包括SUBSYSTEM,ACTION,attribute,内核提供的名称(通过KERNEL=)以及其他的环境变量

