#+TITLE: [What]linux -> ALSA 调试
#+DATE:  <2018-04-16 Mon> 
#+TAGS: driver
#+LAYOUT: post 
#+CATEGORIES: linux, driver, ALSA
#+NAME: <linux_driver_ALSA_debug.org>
#+OPTIONS: ^:nil 
#+OPTIONS: ^:{}

记录ALSA的驱动和上层调试。
#+BEGIN_HTML
<!--more-->
#+END_HTML
* ALSA自带调试输出
在内核的子系统中已经自带了很多调试信息，而不需要我们在这些子系统代码中再手动的插入。

通过查看文件 =include/sound/core.h= 发现有宏 =CONFIG_SND_DEBUG , CONFIG_SND_DEBUG_VERBOSE, CONFIG_SND_VERBOSE_PRINTK=, 通过在 menuconfig 中搜索发现其路径为：
#+begin_example
Device Drivers -> Sound card support -> Advanced Linux Sound Architecture 
#+end_example
- CONFIG_SND_DEBUG : 输出基本的调试信息
- CONFIG_SND_VERBOSE_PRINTK : 在调试信息头前加上文件及位置标记
- CONFIG_SND_DEBUG_VERBOSE: 更多的调试信息输出
  + 在选中 =Debug= 后才会出现 =More verbose debug= 的选项。
* 数据验证
上层的数据是会通过 wirte 类函数发送下来，可以在驱动中打印缓冲中的值以确认数据对齐操作。

比较常见的方法就是写一个递增的数据，下层来依次匹配。
* 注意I2S协议
除了标准的I2S协议外，还有左右对齐两种方式，如果这个没有配置与codec芯片一致，那么听到的声音就会有类似过载的效果。(因为上一个通道的低位数据被采用到了下一个通道的高位上去)
* codec配置
有些芯片的配置默认是静音，有些复杂的芯片(比如AD1761)内部还有很多通路，这些都可以先通过 =amixer= 命令配置, 再确定参数后再使用程序配置。
- 首先使用 =amixer contents= 列出其默认配置
- 根据芯片的datasheet来查看其中一些不合适的配置罗列出来
- 根据需要配置的id号(numid=xx)，使用命令配置 =amixer cset numid=xx <value>=
* ALSA中的生产者和消费者模型
** 问题描述
一般来说是需要消费者的平均速度大于生产者的平均数据才能保证数据不丢失，但是在音频
这种情况下，为了播放的声音和产生的声音一致，那就需要生产者和消费者的速度理论上一致。

在播放一个音频文件时，可以保证消费者一直可以不间断的获取数据，但在其他场合（比如先解调再产生音频数据），
生产者需要一定时间才会产生有效数据，这就从宏观上导致消费者会间歇的等待生产者。
在这种情况下上层便会产生 =Broken pipe= 也就是 =underrun= 错误。
** 解决方案
ALSA出现此错误的根本原因就是这个特殊的消费者需要时刻都有数据，那么解决思路就是：
当生产者还没有及时产生数据时，自己先伪造一段空数据送给消费者(对于喇叭来说，就是一小段静音)。

至于这个数据取多大，要根据当前的数据速率和消费者产生数据的时间消耗来算。
#+BEGIN_EXAMPLE
  比如当前数据速率是 44100 Hz，那么一个frame的时间就是23微秒，而上层在接收到采样原始数据后
  进行解调的时间需要5毫秒，那么这段空数据至少要包含218个frame才可以保证与解调算法持平。
  加上线程的切换时间取300个frame的空间才比较合适。
#+END_EXAMPLE
