#+TITLE: [What]linux -> kernel解析设备树
#+DATE:  <2018-06-28 四> 
#+TAGS: driver
#+LAYOUT: post 
#+CATEGORIES: linux, driver, devicetree
#+NAME: <linux_driver_devicetree_source.org>
#+OPTIONS: ^:nil 
#+OPTIONS: ^:{}


参考文档: =/Documentation/devicetree/booting-without-of.txt= , =Documentation/arm/Booting=

了解内核如何解析设备树对于写驱动至关重要。
#+BEGIN_HTML
<!--more-->
#+END_HTML
* bootloader 将设备树传递给kernel
** bootloader 到 kernel
对于arm来讲，其参数传递的状态具体说明位于 =/arch/arm/kernel/head.S= :
#+BEGIN_EXAMPLE
  /*
   ,* Kernel startup entry point.
   ,* ---------------------------
   ,*
   ,* This is normally called from the decompressor code.  The requirements
   ,* are: MMU = off, D-cache = off, I-cache = dont care, r0 = 0,
   ,* r1 = machine nr, r2 = atags or dtb pointer.
   ,*
   ,* This code is mostly position independent, so if you link the kernel at
   ,* 0xc0008000, you call this at __pa(0xc0008000).
   ,*
   ,* See linux/arch/arm/tools/mach-types for the complete list of machine
   ,* numbers for r1.
   ,*
   ,* We're trying to keep crap to a minimum; DO NOT add any machine specific
   ,* crap here - that's what the boot loader (or in extreme, well justified
   ,* circumstances, zImage) is for.
   ,*/
#+END_EXAMPLE
对于uboot对应的代码位于 =/arch/arm/lib/bootm.c= :
#+BEGIN_SRC c
  static void boot_jump_linux(bootm_headers_t *images, int flag)
  {
  #ifdef CONFIG_ARM64
    ...
  #else
    //目标id
    unsigned long machid = gd->bd->bi_arch_number;
    char *s;
    //入口函数，分别传入 r0, r1, r2
    void (*kernel_entry)(int zero, int arch, uint params);
    unsigned long r2;
    int fake = (flag & BOOTM_STATE_OS_FAKE_GO);

    //得到kernel的入口点地址
    kernel_entry = (void (*)(int, int, uint))images->ep;

    s = getenv("machid");
    if (s) {
      if (strict_strtoul(s, 16, &machid) < 0) {
        debug("strict_strtoul failed!\n");
        return;
      }
      printf("Using machid 0x%lx from environment\n", machid);
    }

    debug("## Transferring control to Linux (at address %08lx)" \
      "...\n", (ulong) kernel_entry);
    bootstage_mark(BOOTSTAGE_ID_RUN_OS);
    announce_and_cleanup(fake);

    //得到设备树或taglist地址
    if (IMAGE_ENABLE_OF_LIBFDT && images->ft_len)
      r2 = (unsigned long)images->ft_addr;
    else
      r2 = gd->bd->bi_boot_params;

    if (!fake) {
  #ifdef CONFIG_ARMV7_NONSEC
      ...
  #endif
      //PC指向此地址并运行，此时便进入了内核
        kernel_entry(0, machid, r2);
    }
  #endif
  }
#+END_SRC
** kernel获取到 r0,r1,r2
依然需要分析文件 =/arch/arm/kernel/head.S= .

此文件前面部分并没有看到明确的对设备树和taglist的区分代码，不过在最后有 =#include "head-common.S"= ，所以继续往下跟 =/arch/arm/kernel/head-common.S= 。

哈哈，一开始就出现了区别二者的宏定义:
#+BEGIN_SRC asm
  #define ATAG_CORE 0x54410001
  #define ATAG_CORE_SIZE ((2*4 + 3*4) >> 2)
  #define ATAG_CORE_SIZE_EMPTY ((2*4) >> 2)

  #ifdef CONFIG_CPU_BIG_ENDIAN
  #define OF_DT_MAGIC 0xd00dfeed
  #else
  #define OF_DT_MAGIC 0xedfe0dd0 /* 0xd00dfeed in big-endian */
  #endif
#+END_SRC
然后是格式标记的判断:
#+BEGIN_SRC asm
  #ifdef CONFIG_OF_FLATTREE
  ldr	r6, =OF_DT_MAGIC		@ is it a DTB?
  cmp	r5, r6
  beq	2f
  #endif
#+END_SRC
到此，原来 =head.S= 已经调用了此代码 =bl	__vet_atags= .

接下来是 =__mmap_switched= 功能模块:
#+BEGIN_SRC asm
  /*
   ,* The following fragment of code is executed with the MMU on in MMU mode,
   ,* and uses absolute addresses; this is not position independent.
   ,*
   ,*  r0  = cp#15 control register
   ,*  r1  = machine ID
   ,*  r2  = atags/dtb pointer
   ,*  r9  = processor ID
   ,*/
    __INIT
  __mmap_switched:
    adr	r3, __mmap_switched_data

    ldmia	r3!, {r4, r5, r6, r7}
    cmp	r4, r5				@ Copy data segment if needed
  1:	cmpne	r5, r6
    ldrne	fp, [r4], #4
    strne	fp, [r5], #4
    bne	1b

    mov	fp, #0				@ Clear BSS (and zero fp)
  1:	cmp	r6, r7
    strcc	fp, [r6],#4
    bcc	1b

   ARM(	ldmia	r3, {r4, r5, r6, r7, sp})
   THUMB(	ldmia	r3, {r4, r5, r6, r7}	)
   THUMB(	ldr	sp, [r3, #16]		)
    str	r9, [r4]			@ Save processor ID
    str	r1, [r5]			@ Save machine type
    str	r2, [r6]			@ Save atags pointer
    cmp	r7, #0
    strne	r0, [r7]			@ Save control register values
    b	start_kernel
  ENDPROC(__mmap_switched)

    .align	2
    .type	__mmap_switched_data, %object
  __mmap_switched_data:
    .long	__data_loc			     @ r4
    .long	_sdata				       @ r5
    .long	__bss_start			     @ r6
    .long	_end				         @ r7
    .long	processor_id			   @ r4
    .long	__machine_arch_type	 @ r5
    .long	__atags_pointer			 @ r6
  #ifdef CONFIG_CPU_CP15
    .long	cr_alignment			   @ r7
  #else
    .long	0				             @ r7
  #endif
    .long	init_thread_union + THREAD_START_SP @ sp
    .size	__mmap_switched_data, . - __mmap_switched_data
#+END_SRC
由上可以看出 :
- machine type 被赋值给了变量 =__machine_arch_type=
- atags pointer 被赋值给了变量 =__atags_pointer= 

那么接下来就是着重追踪 =__atags_pointer= 变量.

* 解析设备树
通过 =grep= 变量 =__atags_pointer= 找到了c的入口点函数 =setup_arch= 位于 =/arch/arm/kernel/setup.c= ,下面就来看看它到底是如何解析设备树的。
** 获取设备树结构
查看函数 =setup_arch= 中的代码:
#+BEGIN_SRC c
  const struct machine_desc *mdesc;

  setup_processor();
  mdesc = setup_machine_fdt(__atags_pointer);
  if (!mdesc)
    mdesc = setup_machine_tags(__atags_pointer, __machine_arch_type);
  machine_desc = mdesc;
  machine_name = mdesc->name;
  dump_stack_set_arch_desc("%s", mdesc->name);
#+END_SRC
可以知道最终的设备树被结构 =struct machine_desc= 所描述，而 =__atags_pointer= 的任务已经完成了。

下面就得看看 =struct machine_desc= 结构体是如何被填充的:
#+BEGIN_SRC c
  bool __init early_init_dt_verify(void *params)
  {
    if (!params)
      return false;

    /* check device tree validity */
    if (fdt_check_header(params))
      return false;

    /* Setup flat device-tree pointer */
    //此处保存了device tree 在虚拟空间中的地址
    initial_boot_params = params;
    of_fdt_crc32 = crc32_be(~0, initial_boot_params,
                            fdt_totalsize(initial_boot_params));
    return true;
  }
  /**
   ,* setup_machine_fdt - Machine setup when an dtb was passed to the kernel
   ,* @dt_phys: physical address of dt blob
   ,*
   ,* If a dtb was passed to the kernel in r2, then use it to choose the
   ,* correct machine_desc and to setup the system.
   ,*/
  const struct machine_desc * __init setup_machine_fdt(unsigned int dt_phys)
  {
    const struct machine_desc *mdesc, *mdesc_best = NULL;

    //判断地址和设备树错误校验
    if (!dt_phys || !early_init_dt_verify(phys_to_virt(dt_phys)))
      return NULL;

    mdesc = of_flat_dt_match_machine(mdesc_best, arch_get_next_mach);

    if (!mdesc) {
      //设备树内容识别错误处理
      ...
    }

    /* We really don't want to do this, but sometimes firmware provides buggy data */
    if (mdesc->dt_fixup)
      mdesc->dt_fixup();

    early_init_dt_scan_nodes();

    /* Change machine number to match the mdesc we're using */
    __machine_arch_type = mdesc->nr;

    return mdesc;
  }

  /**
   ,* of_flat_dt_match_machine - Iterate match tables to find matching machine.
   ,*
   ,* @default_match: A machine specific ptr to return in case of no match.
   ,* @get_next_compat: callback function to return next compatible match table.
   ,*
   ,* Iterate through machine match tables to find the best match for the machine
   ,* compatible string in the FDT.
   ,*/
  const void * __init of_flat_dt_match_machine(const void *default_match,
      const void * (*get_next_compat)(const char * const**))
  {
    const void *data = NULL;
    const void *best_data = default_match;
    const char *const *compat;
    unsigned long dt_root;
    unsigned int best_score = ~1, score = 0;

    dt_root = of_get_flat_dt_root();
    //获取一个machine描述字符串
    while ((data = get_next_compat(&compat))) {
      //进行匹配比较，匹配得越直接，score越低
      score = of_flat_dt_match(dt_root, compat);
      if (score > 0 && score < best_score) {
        best_data = data;
        best_score = score;
      }
    }
    //如果都已经搜寻到列表尾还没有找到匹配数据，则打印警告
    if (!best_data) {
      const char *prop;
      int size;

      pr_err("\n unrecognized device tree list:\n[ ");

      prop = of_get_flat_dt_prop(dt_root, "compatible", &size);
      if (prop) {
        while (size > 0) {
          printk("'%s' ", prop);
          size -= strlen(prop) + 1;
          prop += strlen(prop) + 1;
        }
      }
      printk("]\n\n");
      return NULL;
    }

    //在终端输出设备树中的 "model" 属性值
    pr_info("Machine model: %s\n", of_flat_dt_get_machine_name());

    return best_data;
  }
#+END_SRC
*** 在machine中查找匹配
获取一个machine的compatible字符串是使用下面的函数:
#+BEGIN_SRC c
  static const void * __init arch_get_next_mach(const char *const **match)
  {
    static const struct machine_desc *mdesc = __arch_info_begin;
    const struct machine_desc *m = mdesc;

    if (m >= __arch_info_end)
      return NULL;

    mdesc++;
    ,*match = m->dt_compat;
    return m;
  }
#+END_SRC
其中 =__arch_info_begin= 和 =__arch_info_end= 在链接脚本中定义:
#+BEGIN_EXAMPLE
  .init.arch.info : {
    __arch_info_begin = .;
    ,*(.arch.info.init)
    __arch_info_end = .;
  }
#+END_EXAMPLE
可以看出，只要将代码限定在 =.arch.info.init= 段中，就会被遍历到，实现的宏为:
#+BEGIN_SRC c
  #define DT_MACHINE_START(_name, _namestr)               \
    static const struct machine_desc __mach_desc_##_name	\
    __used                                                \
    __attribute__((__section__(".arch.info.init"))) = {   \
      .nr		= ~0,                                         \
      .name		= _namestr,

  #define MACHINE_END                             \
    };
#+END_SRC
比如zynq中的定义为:
#+BEGIN_SRC c
  static const char * const zynq_dt_match[] = {
    "xlnx,zynq-7000",
    NULL
  };

  DT_MACHINE_START(XILINX_EP107, "Xilinx Zynq Platform")
  /* 64KB way size, 8-way associativity, parity disabled */
    .l2c_aux_val    = 0x00400000,
    .l2c_aux_mask	= 0xffbfffff,
    .smp		= smp_ops(zynq_smp_ops),
    .map_io		= zynq_map_io,
    .init_irq	= zynq_irq_init,
    .init_machine	= zynq_init_machine,
    .init_late	= zynq_init_late,
    .init_time	= zynq_timer_init,
    .dt_compat	= zynq_dt_match,
    .reserve	= zynq_memory_init,
    MACHINE_END
#+END_SRC
于此同时，设备树中的machine compatible 为 :
#+BEGIN_EXAMPLE
  compatible = "xlnx,zynq-7000";
#+END_EXAMPLE

通过匹配就可以找出对应的 =struct machine_desc= ,也就可以找到对于当前machine的初始化回调函数了。


*** 获取启动参数
设备树结构中，通过 =chosen= 节点来传递启动参数已及一些配置命令，关于这些配置参数的详细描述位于文档 =/Documentation/kernel-parameters.txt=

在函数 =setup_arch()= 中调用了解析设备树函数 =unflatten_device_tree()= :
#+BEGIN_SRC c
  /**
   ,* unflatten_device_tree - create tree of device_nodes from flat blob
   ,*
   ,* unflattens the device-tree passed by the firmware, creating the
   ,* tree of struct device_node. It also fills the "name" and "type"
   ,* pointers of the nodes so the normal device-tree walking functions
   ,* can be used.
   ,*/
  /**
   ,* @brief 此函数将设备树以 struct device_node 的形式树形化的表示
   ,*/
  void __init unflatten_device_tree(void)
  {
    __unflatten_device_tree(initial_boot_params, &of_root,
                            early_init_dt_alloc_memory_arch);

    /* Get pointer to "/chosen" and "/aliases" nodes for use everywhere */
    of_alias_scan(early_init_dt_alloc_memory_arch);
  }
#+END_SRC
目前首先关注启动参数的获取:
#+BEGIN_SRC c
  /**
   ,* of_alias_scan - Scan all properties of the 'aliases' node
   ,*
   ,* The function scans all the properties of the 'aliases' node and populates
   ,* the global lookup table with the properties.  It returns the
   ,* number of alias properties found, or an error code in case of failure.
   ,*
   ,* @dt_alloc:	An allocator that provides a virtual address to memory
   ,*		for storing the resulting tree
   ,*/
  void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align))
  {
    struct property *pp;

    of_aliases = of_find_node_by_path("/aliases");
    of_chosen = of_find_node_by_path("/chosen");
    if (of_chosen == NULL)
      of_chosen = of_find_node_by_path("/chosen@0");

    if (of_chosen) {
      //此处主要是获取标准输出的配置
      /* linux,stdout-path and /aliases/stdout are for legacy compatibility */
      const char *name = of_get_property(of_chosen, "stdout-path", NULL);
      if (!name)
        name = of_get_property(of_chosen, "linux,stdout-path", NULL);
      if (IS_ENABLED(CONFIG_PPC) && !name)
        name = of_get_property(of_aliases, "stdout", NULL);
      if (name)
        of_stdout = of_find_node_opts_by_path(name, &of_stdout_options);
    }

    if (!of_aliases)
      return;

    ...
  }
#+END_SRC
在这里只有标准输入，那比较重要的 =bootargs= 在哪里呢?
原来还是在之前的 =setup_machine_fdt()= 函数中调用了 =early_init_dt_scan_nodes()= 函数:
#+BEGIN_SRC c
  void __init early_init_dt_scan_nodes(void)
  {
    /* Retrieve various information from the /chosen node */
    //获取chosen中的bootargs设置，保存于boot_command_line中
    //另外跟进函数也会发现其内部还会获取 linux,initrd-start,linux,initrd-end 设置
    of_scan_flat_dt(early_init_dt_scan_chosen, boot_command_line);

    /* Initialize {size,address}-cells info */
    //得到 #size-cells,#address-cells 并分别保存于dt_root_size_cells,dt_root_addr_cells 变量
    //用于后面扫描内存节点信息 
    of_scan_flat_dt(early_init_dt_scan_root, NULL);

    /* Setup memory, calling early_init_dt_add_memory_arch */
    //获取memory节点信息,底层调用 memblock_add_range 将内存加入代码控制区
    of_scan_flat_dt(early_init_dt_scan_memory, NULL);
  }
#+END_SRC

** 映射 device_node
在函数 =unflatten_device_tree()= 中调用了函数 =__unflatten_device_tree()= :
#+BEGIN_SRC c
  void __init unflatten_device_tree(void)
  {
    //此处的 initial_boot_params 就是在最开始被赋值的设备树的虚拟地址
    //而 of_root 就是设备树的根节点了
    __unflatten_device_tree(initial_boot_params, &of_root,
                            early_init_dt_alloc_memory_arch);

    ...
  }
  /**
   ,* __unflatten_device_tree - create tree of device_nodes from flat blob
   ,*
   ,* unflattens a device-tree, creating the
   ,* tree of struct device_node. It also fills the "name" and "type"
   ,* pointers of the nodes so the normal device-tree walking functions
   ,* can be used.
   ,* @blob: The blob to expand
   ,* @mynodes: The device_node tree created by the call
   ,* @dt_alloc: An allocator that provides a virtual address to memory
   ,* for the resulting tree
   ,*/
  static void __unflatten_device_tree(const void *blob,
             struct device_node **mynodes,
             void * (*dt_alloc)(u64 size, u64 align))
  {
    unsigned long size;
    int start;
    void *mem;

    //打印调试信息以及检查基本格式
    ...

    /* First pass, scan for size */
    start = 0;
    size = (unsigned long)unflatten_dt_node(blob, NULL, &start, NULL, NULL, 0, true);
    size = ALIGN(size, 4);

    pr_debug("  size is %lx, allocating...\n", size);

    /* Allocate memory for the expanded device tree */
    mem = dt_alloc(size + 4, __alignof__(struct device_node));
    memset(mem, 0, size);

    ,*(__be32 *)(mem + size) = cpu_to_be32(0xdeadbeef);

    pr_debug("  unflattening %p...\n", mem);

    /* Second pass, do actual unflattening */
    start = 0;
    //此处开始正式的解析设备树，并赋值给 mynodes
    unflatten_dt_node(blob, mem, &start, NULL, mynodes, 0, false);
    if (be32_to_cpup(mem + size) != 0xdeadbeef)
      pr_warning("End of tree marker overwritten: %08x\n",
           be32_to_cpup(mem + size));

    pr_debug(" <- unflatten_device_tree()\n");
  }
#+END_SRC

