#+TITLE: [What]Linux 守护进程基本使用
#+DATE:  <2018-06-01 五> 
#+TAGS: operations
#+LAYOUT: post 
#+CATEGORIES: linux, operations, process
#+NAMA: <linux_operations_process_daemon.org>
#+OPTIONS: ^:nil 
#+OPTIONS: ^:{}

如果需要进程一开机就后台运行，则需要以守护进程的方式运行。
#+BEGIN_HTML
<!--more-->
#+END_HTML
* 基本概念
** 什么是守护进程
守护进程开系统启动后就会一直运行, 直到系统关闭.并且这些进程不会占用终端.
** 进程组,会话
在一个终端下运行的程序(进程)会共享同一个控制终端, 会话(session) 指的就是一个或多个进程组的集合.

一个进程都有它属于的进程组, 而进程组的ID号(GID), 也就是组长进程的ID号(PID).

*在控制终端退出后, 基于此终端的进程也会退出*.

从上面可以得出: 一个进程要摆脱一个控制终端, 需要脱离会话和进程组.对应的函数就是 =setsid()=

setsid()具有如下特性:
1. 当进程不是进程组组长时, 会新建一个会话, 否则返回错误.
2. 此进程组会成为会话的首进程, 同时此进程是进程组的组长.
3. 此进程将脱离控制终端
** 创建守护进程编写步骤
基于上面的概念, 以及参考APUE, 可以得出编写守护进程的步骤为:
1. 调用 =umask= 设置新建文件的权限为0. 
2. 使用 =fork=  新建进程, 并且使用 =exit= 使父进程退出,使新进程不是进程组长, 保证 =setsid= 正常执行.
3. 使用 =setsid= 脱离当前会话, 并建立与终端无关的会话, 进进程会成为新组长
4. 将工作目录切换到根目录下,否则当前目录不能被卸载
  + 当如果确保当前目录不会被卸载时，不用切换目录
5. 关闭父进程所持有文件描述符, 节约空间.
  + 主要原因还是 kernel对文件描述符的数量是有限制的
6. 设置当前进程的输入,输出,以及错误输出到 =/dev/null= , 用于清除显示.
7. 再次使用 =fork= 创建一个子进程, 并退出父进程, 让当前进程不为组长, 避免申请终端操作.
** 守护进程如何通过日志调试？
一般来讲，应用守护进程作为服务端，为了更好的调试通常在初始阶段不会直接将其配置为守护进程。
而是在服务端通过基本测试之后才会将其配置为守护进程。

问题就在于：如果在配置守护进程时挂了如何调试？

有以下两个方法：
- 将调试信息写入特定日志文件
  + 如果有多个守护进程，那么文件管理是个麻烦
- 使用syslog工具
  
*** syslogd
[[./syslogd.jpg]]
由上图可以看出，使用syslogd是将日志输出到了一个统一的位置，并没有经过终端。
- 内核通过日志打印，可以通过设备 =/dev/kmsg= 或 =dmesg= 来查看内核日志
- 用户通过向 =/dev/log= 写日志
- 外部网络代码通过UDP的514端口写日志
  
与之相关的函数接口：
#+BEGIN_SRC c
  void openlog(const char *ident, int option, int facility);
  void syslog(int priority, const char *format, ...);
  void closelog(void);
#+END_SRC




#+BEGIN_SRC c
  #include "apue.h"
  #include <stdio.h>
  #include <syslog.h>
  #include <fcntl.h>
  #include <sys/resource.h>

  void daemonize(const char *cmd)
  {
          int    i, fd0, fd1, fd2;
          pid_t  pid;
          struct rlimit rl;
          struct sigaction sa;

          /**
           ,* @note clear file creation mask
           ,*/
          umask(0);
          /**
           ,* get maximum number of file descriptors
           ,*/
          if(getrlimit(RLIMIT_NOFILE, &rl) < 0)
          {
                  printf("%s, can't get file limit", cmd);
          }
          /**
           ,* @note become a session leader to lose controlling TTY.
           ,*/
          if((pid == fork()) < 0)
          {
                  printf("%s, can't fork", cmd);
          }
          else if(pid != 0) /// parent
          {
                  exit(0);
          }
          setsid();
          /**
           ,* @note ensure future opens won't allocate controlling TTYs.
           ,*/
          sa.sa_handler = SIG_IGN;
          sigemptyset(&sa.sa_mask);
          sa.sa_flags = 0;
          if(sigaction(SIGHUP, &sa, NULL) < 0)
          {
                  printf("%s, can't ignore SIGHUP", cmd);
          }
          if((pid = fork() < 0))
          {
                  printf("%s, can't fork", cmd);
          }
          if(pid != 0)/// parent
          {
                  exit(0);
          }
          /**
           ,* @note change the current working directory to the root so
           ,* we won't prevent file systems from being unmounted
           ,*/
          if(chdir("/") < 0)
          {
                  printf("%s, can't change directory to /", cmd);
          }
          /**
           ,* @note close all open file descriptors
           ,*/
          if(rl.rlim_max == RLIM_INFINITY)
          {
                  rl.rlim_max = 1024;
          }
          for(i = 0; i < ri.rlim_max; i++)
          {
                  close(i);
          }
          /**
           ,* @note attach file descriptors 0, 1, and 2 to /dev/null
           ,*/
          fd0 = open("/dev/null", O_RDWR);
          fd1 = dup(0);
          fd2 = dup(0);
          /**
           ,* @note initialize the log file
           ,*/
          openlog(cmd, LOG_CONS, LOG_DAEMON);
          if(fd0 != 0 || fd1 != 1 || fd2 != 2)
          {
                  printf("unexpected file descriptors %d %d %d", fd0, fd1, fd2);
                  exit(1);
          }
  }
#+END_SRC

