#+TITLE: [What]linux -> kfifo
#+DATE:  <2018-03-19 Mon> 
#+TAGS: kernel
#+LAYOUT: post 
#+CATEGORIES: linux, kernel, data_structure
#+NAME: <linux_kernel_data_structure_kfifo.org>
#+OPTIONS: ^:nil 
#+OPTIONS: ^:{}

参考: 
1. 《Linux 内核设计与实现》

| kernel version | arch  |
|----------------+-------|
| v5.4.x lts     | arm32 |

罗列内核已经提供的 FIFO数据结构的使用方式。
#+BEGIN_HTML
<!--more-->
#+END_HTML
Linux 内核中对 fifo 的操作已经支持得相当完善了，没必要重新造轮子，需要注意的是：
- 当只有一个生产者和一个消费者时，不需要使用锁机制
- 当有多个生产者和一个消费者时，仅需要给生产者加锁
- 当有一个生产者和多个消费者时，仅需要给消费者加锁
* API(include/linux/kfifo.h) 
Linux使用宏来封装成一系列可以操作的API。
#+BEGIN_SRC c
/**
 ,* @brief: 声明一个指向fifo的指针
 ,* @fifo: 指针的名字
 ,* @type: 元素的类型
 ,*/
#define DECLARE_KFIFO_PTR(fifo, type)     STRUCT_KFIFO_PTR(type) fifo

/**
 ,* @brief: 声明一个fifo
 ,* @fifo: fifo 名称
 ,* @type: 元素类型
 ,* @size: 元素的个数（必须是2的整数次方）
 ,*/
#define DECLARE_KFIFO(fifo, type, size)   STRUCT_KFIFO(type, size) fifo

/**
 ,* @brief: 初始化fifo 
 ,* @fifo: fifo 名称
 ,*/
#define INIT_KFIFO(fifo) \
        (void)({ \
                        typeof(&(fifo)) __tmp = &(fifo); \
                        struct __kfifo *__kfifo = &__tmp->kfifo; \
                        __kfifo->in = 0; \
                        __kfifo->out = 0; \
                        __kfifo->mask = __is_kfifo_ptr(__tmp) ? 0 : ARRAY_SIZE(__tmp->buf) - 1;\
                        __kfifo->esize = sizeof(*__tmp->buf); \
                        __kfifo->data = __is_kfifo_ptr(__tmp) ?  NULL : __tmp->buf; \
                })

/**
 ,* @brief: 声明并初始化fifo
 ,*/
#define DEFINE_KFIFO(fifo, type, size) \
        DECLARE_KFIFO(fifo, type, size) = \
                (typeof(fifo)) { \
                { \
                        { \
                                .in= 0, \
                                .out= 0, \
                                .mask= __is_kfifo_ptr(&(fifo)) ? \
                                         0 : \
                                ARRAY_SIZE((fifo).buf) - 1, \
                                .esize= sizeof(*(fifo).buf), \
                                .data= __is_kfifo_ptr(&(fifo)) ? \
                                         NULL : \
                                (fifo).buf, \
                        } \
                } \
        }

/**
 ,* @brief: 检查fifo是否已经被初始化
 ,* @fifo: fifo的地址
 ,* @return: true -> 已经被初始化
 ,*          false -> 未初始化
 ,*/
#define kfifo_initialized(fifo) ((fifo)->kfifo.mask)
/**
 ,* @brief: 获取fifo一个元素所占用的字节数
 ,* @fifo: fifo的地址
 ,*/
#define kfifo_esize(fifo)  ((fifo)->kfifo.esize)
/**
 ,* @brief: returns the size of the record length field
 ,* @fifo: fifo的地址
 ,*/
#define kfifo_recsize(fifo) (sizeof(*(fifo)->rectype))
/**
 ,* @brief: 获取fifo中元素的个数
 ,* @fifo: address of the fifo to be used
 ,*/
#define kfifo_size(fifo)  ((fifo)->kfifo.mask + 1)
/**
 ,* @brief: 清空fifo
 ,* @fifo: fifo的地址
 ,* @note: 在使用此宏前，要确保没有其他线程在访问它
 ,*/
#define kfifo_reset(fifo) ...
/**
 ,* @brief: 清空fifo
 ,* @fifo: fifo的地址
 ,* @note: 在仅有一个读线程访问时，可以使用此宏
 ,*/
#define kfifo_reset_out(fifo) ...
/**
 ,* @brief: 获取已经使用的元素的个数
 ,* @fifo: fifo的地址
 ,*/
#define kfifo_len(fifo) ...
/**
 ,* @brief: 如果fifo为空返回true
 ,* @fifo: fifo的地址
 ,*/
#define kfifo_is_empty(fifo) ...
/**
 ,* @brief: 如果fifo为满返回true
 ,* @fifo: fifo的地址
 ,*/
#define kfifo_is_full(fifo) ...
/**
 ,* @brief: 获取空闲的元素个数
 ,* @fifo: fifo的地址
 ,*/
#define kfifo_avail(fifo) ...
/**
 ,* @brief: 跳过一个元素
 ,* @fifo: fifo的地址
 ,*/
#define kfifo_skip(fifo) ...
/**
 ,* @brief: 申请一个fifo内存
 ,* @fifo: pointer to the fifo
 ,* @size: the number of elements in the fifo, this must be a power of 2
 ,* @gfp_mask: get_free_pages mask, passed to kmalloc()
 ,*
 ,* This macro dynamically allocates a new fifo buffer.
 ,*
 ,* The numer of elements will be rounded-up to a power of 2.
 ,* The fifo will be release with kfifo_free().
 ,* Return 0 if no error, otherwise an error code.
 ,*/
#define kfifo_alloc(fifo, size, gfp_mask) ...
/**
 ,* @brief: 释放申请的fifo内存
 ,* @fifo: the fifo to be freed
 ,*/
#define kfifo_free(fifo) ...
/**
 ,* @brief: 初始化申请的缓存
 ,* @fifo: the fifo to assign the buffer
 ,* @buffer: the preallocated buffer to be used
 ,* @size: the size of the internal buffer, this have to be a power of 2
 ,*
 ,* This macro initialize a fifo using a preallocated buffer.
 ,*
 ,* The numer of elements will be rounded-up to a power of 2.
 ,* Return 0 if no error, otherwise an error code.
 ,*/
#define kfifo_init(fifo, buffer, size) ...

/**
 ,* @brief: 存入一个数据到fifo
 ,* @fifo: fifo的地址
 ,* @val: 数据的值
 ,* @return: 0 -> fifo 满 ，否则返回处理的个数
 ,* @note: 单生产者和单消费者使用此宏时不用外加锁
 ,*/
#define kfifo_put(fifo, val) ...
/**
 ,* @brief: 从fifo读取一个值
 ,* @fifo: fifo的地址
 ,* @val: 数据存储的地址
 ,* @return: 0 -> fifo 空 ，否则返回处理的个数
 ,* @note: 单生产者和单消费者使用此宏时不用外加锁
 ,*/
#define kfifo_get(fifo, val) ...
/**
 ,* @brief: 将buf中的值存入fifo
 ,* @return: 实际存入的个数
 ,* @note: 单生产者和单消费者使用此宏时不用外加锁
 ,*/
#define kfifo_in(fifo, buf, n) ...
/**
 ,* @brief: 读取fifo中的元素到buf
 ,* @return: 实际读取的个数
 ,* @note: 单生产者和单消费者使用此宏时不用外加锁
 ,*/
#define kfifo_out(fifo, buf, n) ...
/**
 ,* @brief: 使用自旋锁来保护操作
 ,* @lock: 锁地址
 ,*/
#define kfifo_in_locked(fifo, buf, n, lock) ...
#define kfifo_out_locked(fifo, buf, n, lock) ...
/**
 ,* @brief: 从用户态拷贝数据到内核fifo中
 ,* @fifo: fifo地址
 ,* @from: buf地址
 ,* @len: 数据字节数
 ,* @copied: 实际拷贝的字节数
 ,* @note: 单生产者和单消费者使用此宏时不用外加锁
 ,*
 ,*/
#define kfifo_from_user(fifo, from, len, copied) ...
/**
 ,* @brief: 从内核态拷贝数据到用户态中
 ,* @fifo: fifo地址
 ,* @to: buf地址
 ,* @len: 数据字节数
 *  @copied: 实际拷贝的字节数变量的地址
 *
 * @note: 单生产者和单消费者使用此宏时不用外加锁
 */
#define kfifo_to_user(fifo, to, len, copied) ...
#+END_SRC
