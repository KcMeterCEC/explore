#+TITLE: GUI方面使用总结
#+AUTHOR: kcmetercec
#+OPTIONS: ^:nil
* [What] program --> GUI

** GUI 的选择

目前将编程平台分为三类：

1. 基于裸机或者 RTOS 的单片机平台

首先考虑的必是优秀的国产 RTOS --> RT Thread, 如果单片机是 emwin 授权的那就使用 emwin，否则使用 rt thread配套的 RTGUI。

如果单片机资源不够，或者是RT Thread没有移植好的，那么可以考虑 FreeRTOS 或者是自己写个合作式调度器， 那么对应的GUI 就是**免费
且开源的GUI** --> [littlev](http://www.gl.littlev.hu/)

2. 基于 linux 的嵌入式平台

u-boot 使用 littlev

app 使用 miniGUI 或 littlev

3. 基于 linux / windows等系统的桌面应用

需求 *运行效率* 的使用 Qt

需求 *开发效率* 的使用 Python

** littlev
littlev 是免费且开源的基于 C 代码的 GUI，移植性相当强，并且其具有 PC 端仿真代码，大大提高了调试效率。
*** 安装仿真环境
**** 安装 SDL2

SDL2 是一个库，提供一个可以直接控制硬件的接口。
#+begin_example
apt-cache search libsdl2
sudo apt install libsdl2-2.0-0
sudo apt install libsdl2-dev
sudo apt install build-essential
#+end_example

**** 安装 eclipse

[[http://mirrors.opencas.org/eclipse/technology/epp/downloads/release/][国内镜像站点]] 下载 eclipse 选择CPP版本。

在安装 eclipse 之前需要先安装 java 环境：

1. 懒人安装

#+begin_example
sudo apt install default-jdk
设置环境变量,  编辑文件 "~/.bash_aliases" 输入 "export JAVA\_HOME='/usr/lib/jvm/java-8-openjdk-amd64/jre/bin'"
#+end_example

2. 安装正式版本
#+begin_example
sudo add-apt-repository ppa:webupd8team/java
sudo apt update
sudo apt install oracle-java8-install  (可以安装 java6/7/8/9)
sudo apt install oracle-java8-set-default (可以安装 java6/7/8/9)
java -version (查看版本)
配置在各个 java 版本间切换， sudo update-alternatives --config java  , 星号代表正在使用的版本，输入编号即可选择
设置环境变量,  编辑文件 "~/.bash_aliases" 输入 "export JAVA\_HOME='/usr/lib/jvm/java-8-oracle/jre/bin'"
#+end_example

**** 下载 pc 仿真代码

#+begin_example
git clone https://github.com/littlevgl/proj_pc
cd proj_pc
git submodule init
git submodule update
#+end_example

**** 启动 eclipse 并导入 littlev 工程， 编译， 运行。
Close the start up window and go to =File->Import= choose
=General-Existing project into workspace=.  *Browse the root
directory* of the project and click Finish.

**** 实体按键模拟
PC模拟是基于 SDL2 库来实现与系统底层交互的, 所以需要使用 SDL2 来创建按键.

*** 移植到嵌入式linux
**** 基本移植
移植过程相当简单, 仅仅提供一些画点函数及滴答时钟即可.然后将 *根目录的路径添加到Makefile即可*.

*** 应用说明
**** 基本概念
***** 面向对象
1. littlev 是基于面向对象的程序设计思想, 但代码依然是使用 C 来实现的, 所有的类都继承自基类 =lv_obj_t=.所有的对象都可以动态的删除和创建.
2. 对象相对于基类 =lv_obj_t= 来将, 实际上是在基类的基础上增加了新的ext数据.

***** 位置
1. 除了 =screen= 对象外(screen 代表一个基础画布), 其他的对象都具有父对象, 并且父对象移动时, 子对象也会跟着移动.
2. 所以需要注意的是: 子对象所设置的坐标是 *相对于父对象的坐标.*
3. 当子对象相对于父对象为负坐标时, 也就是代表子对象的负坐标范围被遮挡了.
***** 显示层
1. 当两个对象继承于同一个父对象时, 先创建的对象位于底层, 最新创建的位于顶层


***** 组
littlev 提供了组(group)的概念, 可以将实体按键与对象绑定在一起.

**** 使用
***** 对象的创建和删除
所有的对象多有与之对应的创建函数, 但是它们的 *参数却是统一的!*
#+BEGIN_SRC c
/**
 ,* @brief 创建一个对象, "type" 代表对象的类型
 ,* @param parent: 父对象地址, 当创建一个 screen 时, 此值为 NULL
 ,* @param copy: 复制同类型对象的属性, 当为NULL时, 则创建一个全新的对象
 ,* @return 新建对象的地址
 ,*/
lv_obj_t * lv_type_create(lv_obj_t *parent, lv_obj_t *copy);

/**
 ,* @brief 删除对象
 ,*/
void lv_obj_dev(lv_obj_t *obj);
#+END_SRC

***** 对象的属性
对象的属性使用 =lv_style_t= 来配置, 使用函数 =lv_obj_set_style= 来设置, *当不配置 style 时, 其默认继承父对象的设置*.并且还可以为一个对象设置两个 style, 并设置动画.

*注意*: lv_style_t 不能是局部变量, 因为对象内部仅仅保存了此结构体的地址, 所以在使用对象的时候不能释放此结构体的内存.
***** 对象与信号
可以为对象设置一个回调函数, 当触发了一定的动作后, 便自动调用此函数.

** Qt
*** Qt插件
**** QWT
     QWT 是一个绘图工具集, 具有很多已经写好的UI插件,大大提高开发效率.
***** 安装以及使用(windows)
****** 下载
在 [[https://sourceforge.net/projects/qwt/files/qwt/][QWT下载链接]] 中进入最新版的文件夹,然后下载 =.zip= 文件(源代码)以及 =.qch= 文件(帮助文档)即可.

解压 =.zip= 文件, *解压路径不能有中文*.
****** 设置Qt环境变量
检查windows环境变量中是否包含了Qt的bin路径 =set PATH=,如果没有则添加该路径
****** 编译和安装
在解压文件夹路径中依次运行命令: =qmake qwt.pro=, =mingw32-make=, =mingw32-make install=,最后默认文件的安装路径为: =C:\Qwt-xxx=.
****** 将库移入Qt路径中
| QWT路径                                  | QT路径                          |
|------------------------------------------+---------------------------------|
| lib/libqwt.a, lib/qwtd.a                 | mingwxx_xx/lib                  |
| lib/qwt.dll, lib/qwtd.dll                | mingwxx_xx/bin                  |
| plugins/designer/qwt_designer_plugin.dll | mingwxx_xx/plugins/designer     |
| include/**                               | mingwxx_xx/include/Qwt(new dir) |
****** 载入帮助文件
工具 -> 选项 -> 帮助 -> 添加 -> =.qch= 文件
****** 使用
- 新建一个widget项目
- 添加库文件路径
#+begin_example
#在 .pro 文件中加入库路径

DEFINES += QT_DLL QWT_DLL
LIBS += -L"C:\Qt\Qt5.8.0\5.8\mingw53_32\lib" -lqwtd
LIBS += -L"C:\Qt\Qt5.8.0\5.8\mingw53_32\lib" -lqwt
INCLUDEPATH += C:\Qt\Qt5.8.0\5.8\mingw53_32\include\Qwt
#+end_example
- *显示* 的用 =Qt Designer= 来打开 =.ui= 文件,拖入控件,编译即可

** miniGUI
*** 在 linux 中安装
**** 下载及解压
在 [[www.minigui.com/en/download/][minigui-download]] 中依次下载 =MiniGUI Core Lib(V3.0.12, Linux), MiniGUI Resource(V3.0.12), MiniGUI Samples(V3.0.12)=, 然后使用命令 =tar -zxf= 依次解压.
****  安装库
#+begin_example
#进入 minigui-res-be-3.0.12
./configure
sudo make install

#进入 libminigui-3.0.12-linux
#编辑文件 src/textedit/object.h
#将 "_va.va = va; " 修改为 "strcpy(_va.va, va);"
./configure
make
sudo make install
sudo ldconfig

#进入 mg-samples-3.0.12
./configure


#+end_example
   
