#+TITLE: [What]compiler -> 区分编译器及系统
#+DATE:  <2018-04-02 Mon> 
#+TAGS: compiler
#+LAYOUT: post 
#+CATEGORIES: program,compiler
#+NAME: <program_compiler_distinguish.org>
#+OPTIONS: ^:nil 
#+OPTIONS: ^:{}

关于编译器和系统的区分老是忘记，故在此记录一下。
#+BEGIN_HTML
<!--more-->
#+END_HTML

在区分编译器和系统时，都是使用下面这个方式来判断对应宏：
#+BEGIN_SRC c
//单独区分
#ifdef xxx
#elif xxx
#endif

//组合
#if (defined(xxx) && defined(xxx))
#endif
#+END_SRC
* 区分编译器
** gcc
gcc具有以下宏来标识自己：
#+begin_example
__GNUC__
__GNUC_MINOR__
__GNUC_PATCHLEVEL__
#+end_example
实际上这些宏都是带有数字的，以表示gcc的版本号。

- 如果仅仅是判断一个编译器是不是gcc，那么使用以下方式即可
#+BEGIN_SRC c
#ifdef __GNUC__
...
#endif
#+END_SRC
- 如果对应的代码需要对于gcc不同版本,需要用以下方式
#+BEGIN_SRC c
#define GCC_VERSION (__GNUC__ * 10000 \
                     + __GNUC_MINOR__ * 100 \
                     + __GNUC_PATCHLEVEL__)
…
/* Test for GCC > 3.2.0 */
#if GCC_VERSION > 30200
#+END_SRC
** Visual C++
visual c++ 下判断最常用的就是:
#+begin_example
_MSC_FULL_VER
_MSC_VER 
#+end_example
- 如果仅仅是判断一个编译器是不是 visual c++，那么使用以下方式即可
#+BEGIN_SRC c
#ifdef _MSC_VER
...
#endif
#+END_SRC
- 如果要判断版本则需要以下方式
#+BEGIN_SRC c
//15.00.20706
#if _MSC_FULL_VER > 150020706
...
#endif
//此宏仅包含前两个版本
#if _MSC_VER > 1700
...
#endif
#+END_SRC
* 区分系统
** 通过CPU字长区分
在嵌入式开发中，应用代码经常在PC上进行模拟，模拟无误后再在目标板上执行。
现在PC基本上都是64位了，所以可以通过其字长来判断当前代码是在PC上运行还是在目标机上运行。

#+BEGIN_SRC c
#if __SIZEOF_POINTER__ == 8
//PC 64bit
#else
//target
#endif
#+END_SRC
** 通过系统类型区分
不同的系统定义了不同的宏：
- windows 
  + _WIN32  
  + _WIN64  
- linux
  + __linux__
