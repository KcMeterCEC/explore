#+TITLE: [What]数据结构与算法 -> 红黑树
#+DATE:  <2019-03-15 五> 
#+TAGS: 数据结构与算法
#+LAYOUT: post 
#+CATEGORIES: program,数据结构与算法
#+NAME: <program_DS_rb_tree.org>
#+OPTIONS: ^:nil 
#+OPTIONS: ^:{}

课程：王争 --> <数据结构与算法之美>

前导知识: [[https://www.jianshu.com/p/bbd5d5b4d1a3][红黑树的演变]]

认识传说中的红黑树。
#+BEGIN_HTML
<!--more-->
#+END_HTML
* 概念
普通的二叉查找树在理想情况下，时间复杂度是O(logn)，但当其频繁更新后有可能退化为一个链表，其时间复杂度就是O(n)。

=平衡二叉树= 为避免低效的查找效率，规定：二叉树中任意一个节点的左右 *子树* 的高度相差不能大于一。
- 也就是说任意一个节点的左右子树高度可以小于或等于一，对于前面的满二叉树和完全二叉树都满足此要求，除此之外还有很多其它树也满足。
- 因为二叉查找树的高度决定了时间复杂度，所以当树左右的高度平衡时，整体上树的高度就会低一些，对应的时间复杂度就小一些。
  
[[./balance_binary_tree.jpg]]

红黑树并未严格符合平衡二叉树的定义，其节点由红色和黑色组成，满足以下要求：
- 根节点是黑色的
- 每个叶子节点都是黑色的空节点(NIL, 不存储实际数据)
- 任何相邻的节点都不能同时为红色，红色节点被黑色节点隔开
  + 相邻的意思是指通过连线连接起来的节点
- 每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点
  
[[./rb-tree.jpg]]

