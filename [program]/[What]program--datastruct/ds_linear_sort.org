#+TITLE: [What]数据结构与算法 -> 线性排序
#+DATE:  <2018-12-19 三> 
#+TAGS: 数据结构与算法
#+LAYOUT: post 
#+CATEGORIES: program,数据结构与算法
#+NAME: <program_DS_linear_sort.org>
#+OPTIONS: ^:nil 
#+OPTIONS: ^:{}

课程：王争 --> <数据结构与算法之美>

整理常用的几种排序算法。
| 算法             | 时间复杂度 | 是否基于比较 |
|------------------+------------+--------------|
| 冒泡、插入、选择 | O(n ^ 2)   | 是           |
| 快排、归并       | O(nlogn)   | 是           |
| 桶、计数、基数   | O(n)       | 否           |

桶、计数、基数排序的时间复杂度都是O(n)，因为这些排序算法的时间复杂度是线性的，所以称为线性排序。

这三个算法都不涉及元素之间的比较操作，但对要排序的数据有一定要求。
#+BEGIN_HTML
<!--more-->
#+END_HTML
* 桶排序(Bucket sort)
** 概念
桶排序的核心思想：将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排序完毕后，再把桶里的数据按照顺序依次取出，最终的序列就是有序的了。

桶排序对数据有以下要求:
1. 要排序的数据需要很容易就能划分成多个桶， *并且桶与桶之间有着天然的大小顺序* ， 这样每个桶内的数据都排序完之后，桶与桶之间的数据不需要再进行排序。
2. 数据在各个桶之间的分布是比较均匀的。如果数据经过桶划分之后，有些桶里的数据非常多，有些非常少，那桶内数据排序的时间复杂度就不是常量级了。
  - 如果数据都被划分到一个桶里，那就退化为O(nlogn)的时间复杂度了。
    
桶排序适用于外部排序的场景：数据存储在外部磁盘，数据量太大而无法全部加载到内存中。
#+BEGIN_EXAMPLE
  假设要对10G的外部数据进行排序，但内存只有几百兆，那么思路如下：
  1. 扫描外部数据获取其数据范围
  2. 依据数据范围将它们依次划分为n个桶，桶是按照大小顺序排列的
    - 在划分桶的过程中，都是使用元数据来表示桶的排列的(不会占用很大内存)
    - 数据一般不会均匀分布，所以对于一部分数据特别集中的桶，需要将其再划分为更小的桶
  3. 按照桶的顺序依次将一个桶的数据读入内存，进行快速排序，完成后将此桶内存写回硬盘
  4. 当步骤3执行完毕后，一个大文件也就排好序了
#+END_EXAMPLE
** 分析
*** 时间复杂度
理想情况下：
- n个数据被均分到m个桶内，每个桶内就有 k=n/m 个元素。
- 每个桶都使用快速排序，其时间复杂度为O(klogk)，那么m个桶就为 O(m*(n/m)*log(n/m)) ==> O(n*log(n/m))
- 去掉低阶，就是O(n)

