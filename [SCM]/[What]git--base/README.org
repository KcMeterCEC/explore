* [What] git --> base
** 基本命令
** 使用技巧
*** git hook(在很多阶段可以自动运行一些脚本)
通过使用 .git/hook/ 中的脚本, 可以让git自动化的完成一些繁琐的操作,在此目录下已经存在了一些示例脚本.
这些脚本以 =.sample= 结尾, 如果要使用它们, 需要移除这些后缀.

脚本需要以特定的名字命名, 以让 git 在不同时期来运行这些脚本.

这些脚本可以使用 shell, ruby, python 等语言编写.

**** 客户端钩子
***** pre-commit
此脚本在 *输入提交命令,键入提交信息前运行*.如果脚本最后返回 *非零值*,则终止此次提交! 此脚本一般用于:
- 运行测试代码, 若测试不通过则终止提交
- 检查代码风格, 若风格不统一则终止提交
可以通过使用 =git commit --no-verify= 来跳过此脚本的执行.
***** pre-commit-msg 
此脚本在 *启动提交信息编辑器前, 默认信息被创建之后运行*.该脚本接收一些选项:
- 存有当前提交信息的文件的路径
- 提交类型
- 修补提交的SHA-1校验

此脚本一般用于对产生默认信息的提交,动态的插入一些其他信息. 比如合并提交, 压缩提交等.
***** commit-msg
此脚本在 *确定提交信息之后运行* , 接收的参数即为提交的信息, 用于检查提交信息是否符合指定的模板.
***** post-commit
此脚本在 *整个提交过程完成之后运行* , 没有任何参数, 一般用于一些收尾工作.
***** post-checkout
在 *checkout* 成功后运行, 可以用于对于不同切换的分支运行不同的命令.
***** post-merge
在 *merge* 成功后运行
**** 服务器端钩子 
***** pre-receive
在 *成功推送到服务器前运行*, 用于检查推送内容, 如果以非零值推出, 则阻止推送.
***** update
和 =pre-receive= 类似, 但它会为每一个准备更新的分支各运行一次. 哪个分支以非零值退出, 哪个分支就阻止提交.
***** post-receive
在 *推送过程完成之后运行* , 可以更新信息等操作.