#+TITLE: [What]计算机操作系统_进程管理
#+DATE: <2018-03-17 Sat> 
#+TAGS: 计算机操作系统
#+LAYOUT: post
#+CATEGORIES: book,计算机操作系统
#+NAME: <book_计算机操作系统_chapter2.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

在传统的操作系统中，程序并不能独立运行，作为资源分配和独立运行的基本单位都是进程。
#+BEGIN_HTML
<!--more-->
#+END_HTML
* 进程的基本概念
** 程序的顺序执行及其特征
程序个各个部分都是按照先后顺序来执行的，具有以下特征：
1. 顺序性
2. 封闭性：程序运行时独占全机资源，一旦开始运行，其执行结果不受外界因素影响
3. 可再现性：只要程序环境和初始条件一致，当程序执行时的结果都相同。
** 前趋图
前趋图(Precedence Graph)是一个 *有向无循环图(DAG, Directed Acyclic Graph)* ，用于描述进程之间的前后关系。
- 没有前趋的结点称为初始结点(Initial Node)
- 没有后继结点的称为终止结点(Final Node)
- 每个结点还具有一个重量(Weight)，用于表示该结点所含有的程序量或结点的执行时间。

注意：前趋图不能有循环！
** 程序的并发执行及其特征
*** 程序的并发执行
根据程序的执行流程，提取出流程之间相互不依赖的过程，并将它们调整为并发执行的状态。
*** 程序并发执行时的特征
提高了系统吞吐量但也产生了一些与程序顺序执行时不同的特征：
- 间断性：流程之间的并发需要做同步，一些流程可能会等待其他流程，就会具有“执行--暂停--执行”的间断性活动
- 失去封闭性：多个流程访问统一资源时的互斥导致这些资源的状态将由多个程序来改变，致使程序的运行失去了封闭性
- 不可再现性：流程的运行时间不好把握，导致运行流程不容易再现
** 进程的特征与状态
*** 进程的特征和定义
为了使程序能并发执行，且为了对并发执行的程序加以描述和控制，引入了 *进程* 的概念。
#+begin_example
定义：进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。
#+end_example

进程具有以下特征：
- 结构特征：进程控制块PCB(Process Control Blcok)、程序段、相关数据段构成了进程实体。
- 动态性：进程有一定的生命期，而程序只是一组有序指令的集合，并存放于介质上，是静态的。
- 并发性：多个进程同存于内存中，且能在一段时间内同时运行。
- 独立性：进程实体是一个能独立运行、独立分配资源和独立接受调度的基本单位。
  + 未建立PCB的程序都不能作为一个独立的单位参与运行
- 异步性：进程按各自独立的、不可预知的速度向前推进。

*** 进程的三种基本状态
运行中的进程可能具有以下三种基本状态：
- 就绪(Ready)状态：当进程已分配到除CPU以外的所有必要资源后，只要再获得CPU便可立即执行的状态。
  + 就绪状态的进程可能有多个，通常置于队列中，称为就绪队列。
- 执行状态：进程已经获得CPU并正在执行。
  + 单核系统中，只有一个进程处于执行状态。多核则有多个。
- 阻塞状态：正在执行的进程由于发生某事件和暂时无法继续执行时，便放弃处理器而处于暂停状态
  + 致使进程阻塞的典型事件有：请求I/O，申请缓冲空间等。
  + 系统会将阻塞进程放入阻塞队列
*** 挂起状态
引入挂起状态的原因：
- 终端用户请求：终端用户在自己的程序运行期间发现有可疑问题时，希望使正在执行的进程暂停。
若此时进程处于就绪态，则该进程暂不接收调度，以便用户研究其执行情况或对程序进行修改。这种静止的状态就称为挂起状态。
- 父进程请求：有时父进程希望挂起自己的某个子进程，以便考查和修改子进程或者协调各子进程间的活动。
- 负荷调节的需要：系统工作负荷较重时已可能影响到实时任务的控制时，系统把不重要的进程挂起。
- 操作系统的需要：操作系统有时希望挂起某些进程，以便检查运行中的资源使用情况或进程记账。
*** 创建状态和终止状态
- 创建状态：当一个新进程被创建时，系统已为其分配了PCB，填写了进程标识等信息，但由于该进程所必需的资源或其他信息尚未分配，
进程自身还未进入主存，还不能被调度执行，其所处的状态就是创建状态。
- 终止状态：在等待操作系统进行善后处理并清零其PCB，将PCB空间返还给系统，进程便被终止。
  + 进入终止态的进程在操作系统中依然保留一个记录，其中保持状态码和一些统计数据供其他进程收集，
一旦其它进程完成了对终止状态进程信息提取后，系统将删除该进程。
*** 状态图
[[./process_status.jpg]]




   