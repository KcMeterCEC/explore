#+TITLE: [What]软件工程_两人合作
#+DATE: <2018-02-09 Fri> 
#+TAGS: 软件工程
#+LAYOUT: post
#+CATEGORIES: book,软件工程
#+NAME: <book_se_chapter4.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

=构建之法= 中讲到：
#+begin_example
一个软件由一个人单枪匹马完成，已经很少见了...合作的最小单位是两个人...
#+end_example
大公司就是不一样......
#+BEGIN_HTML
<!--more-->
#+END_HTML 

* 代码规范
代码规范可以分成两个部分：
1. 代码风格规范：个人认为养成一个好的习惯，编码风格自然不会太差。
2. 代码设计规范：程序设计的基本原则。
** 代码风格规范
代码风格的原则是： *简明，易读，无二义性* 。
- 缩进: 4个空格（注意设置将TAB扩展为4空格）
- 行宽: 100个英文字符
  + 在vim中可以设置一个提醒竖线( let &colorcolumn="100")
- 括号: 多使用括号来表示逻辑优先级(尤其是在宏定义中)
- 断行与空白: 不要省略 "{}",括号都独占一行，每个语句都独占一行，合理使用空白便于阅读
- 命名: 个人认为使用 =名词+动词= 的面向对象方式命名(模块_类_方法)比较易于阅读，各个单词之间使用下划线做分隔
- 注释: 注释是为了解释程序做什么以及为什么这么做，注释风格使用 Doxygen 风格
  + 需要特别注意的是： *注释要和代码同步更新，否则误导后果很严重！*
  + 尽量使用英文做注释
** 代码设计规范
*** 函数
函数最重要的原则: *只做一件事，并且要做好*
- 使用 goto 来退出函数，在linux驱动中有很多这样的代码
- 所有的参数都要验证其正确性
  + 对于用户输入进行限制时，或可能发生的条件，需要使用判断处理
  + 对于肯定一些条件绝不应该发生时，使用断言
- 跨文件访问变量时，使用函数封装变量
*** c++ 和 c# 中的规范
- 使用类来封装面向对象的概念和多态
- 传递对象使用指针或引用提高效率，对于简单数据类型可以不使用类
- 对于有显示的构造和析构函数的类，不要建立全局的实体，因为你不指定它们在何时创建和消除
- 如果只是数据封装，那么使用结构体即可
- 按照 public,protected,private 的次序来说明类中的成员
- *如果一个类型要实现多态，在基类的析构函数也应该是虚函数，否则析构可能没有对应到子类而出问题*
- 构造函数主要还是初始化数据成员，不要做复杂操作
- 清理工作都放在析构函数中，如果有些资源在析构函数之前就释放了，那么要重置它们的值为NULL
* 代码复审
小团队往往会无视这个过程......
代码复审就是：看代码是否在“代码规范”的框架内正确地解决了问题。

代码复审不仅仅是找出软件的问题而改进软件，还是相互交流和提升自我的有效方式。
- 对于代码风格来说，可以使用很多的自动化脚本来完成检查。
- 但对于设计规范，一般需要同伴复审。
** 代码复审的步骤
*** 复审前的准备
- 使用最严格的编译警告等级，是代码能够无错误且无警告的编译。
- 程序员已经做过了单元测试
- 准备好复审的工具可以支持远程复审
*** 复审中
- 开发者讲述代码相比上次开发修改的理由
- 复审者根据叙述提供反馈意见，开发者要给出详尽的回应
- 开发者必须负责让所有的问题都得到满意的解释或回答
- 对于复审结果，双方必须达成一致的意见
- 复审最后，开发者需要总结并记录
*** 代码复审核查表
作为一个开发人员，需要时时反思这张表：

- 概要部分
  + 代码符合需求和规格说明么？
  + 代码设计是否考虑周全？
  + 代码可读性如何？
  + 代码容易维护么？
  + 代码的每一行都执行并检查过了吗？
- 设计规范部分
  + 设计是否遵从已知的设计模式或项目中常用的模式？
  + 有没有硬编码或字符串,数字等存在？
  + 代码有没有依赖于某一平台，是否会影响到将来的移植？
  + 开发者新写的代码能否用已有的库中的功能实现？在本项目中是否存在类似的功能可以调用而不用全部重新实现？
  + 有没有无用的代码可以清除？
- 代码规范部分
  + 是否使用自动化工具检查过代码规范了？
- 具体代码部分
  + 有没有对错误进行处理？对于调用的外部函数，是否检查了返回值或处理了异常？
  + 参数传递有无错误，字符串的长度是字节长度还是字符长度，是以0开始计数还是以1开始计数？
  + 边界条件是如何处理的？判断语句的各个分支是否已经覆盖？循环是否可能会出现死循环？
  + 有没有合理使用断言来保证程序绝不会有严重错误？
  + 对资源的申请和释放是否做到了对称？有没有泄漏的可能？有没有优化的空间？
  + 数据结构中有没有用不到的元素？
- 效能
  + 代码效能如何？是否能以图形化的方式展示？最坏的情况会怎么样？
  + 代码中是否有明显可优化的部分？
  + 对于系统的网络和调用是否会超时？如何处理
- 可读性
  + 代码可读性如何？有没有足够的注释？
- 可测试性
  + 代码是否需要新建或创建新的单元测试？

 


* 结对编程
两个开发者坐在一起开发，互补的工作。(大公司，就是不一样......)

结对编程的好处：
- 在开发层次，结对编程能提供更好的设计质量和代码质量，两人合作解决问题的能力更强。
  + 在写的过程，两个人就在不断的复审代码
- 对开发人员自身来说，结对工作能带来更多的信心，高质量的产出能带来更高的满足感。
- 开发人员还可以相互学习，共同进步。
** 结对编程的方式
- 编码者：写设计文档，进行编码和单元测试
- 观察者：审阅文档，监督编码流程，考虑单元测试的覆盖率。思考是否需要以及如何重构
- 编码者和观察者两人要不断互换角色
- 代码是两个人的代码，所以需要主动参与
- 编码者和观察者具有平等的决策权利


