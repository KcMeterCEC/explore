#+TITLE: [What]软件工程_软件工程师的成长
#+DATE: <2018-01-21 Sun> 
#+TAGS: 软件工程
#+LAYOUT: post
#+CATEGORIES: book,软件工程
#+NAME: <book_se_chapter3.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

* 个人能力的衡量与发展
** 软件开发的工作量和质量的衡量
- 通过代码行数和功能点来表示一个项目的大小
- 通过软件开发所耗费的总时间来表示项目的大小
  + 其实这个还和团队人员能力相关，同一个项目能力更强的团队所创作代码或许更精简、效率更高、花费的时间更短
- 项目质量的确定
  + 用发布时还未解决的bug数量除以代码的行数来表示
  + 用代码从最开始到发布所返工修改的行数来表示
- 交付的时间
  + 个人预计完成任务的时间与实际交付的时间，方差越小个人越成熟稳定

#+BEGIN_HTML
<!--more-->
#+END_HTML 
** 团队对个人的期望
- 能够有效、准确地和其他队员交流
- 稳定的做到按时交付任务
- 接受团队给予的不同任务并高质量的完成
- 全力以赴参加团队活动，融入团队之中
- 遵守团队的规章制度，切忌个人英雄主义
- 为新任务、新活动做好准备工作
- 完成任务时从事实和数据出发，不能让私人因素、情感因素影响自己的工作
* 软件工程师的职业发展
- 国内考试 
  + 计算机等级考试和全国计算机技术与软件专业技术资格考试
- 国际大公司的认证考试
- 发表论文
- 互联网授课
- 不断达到公司的评级制度
* 自我评价表
说明： 此表拷贝于 [[http://www.cnblogs.com/xinz/p/3852177.html][邹欣老师博客]] 用于自我反省(尤其是对于一个工作6年的老菜鸟...)。

| 类别     | 具体技能及问题                                                                               | 我目前的回答                                                                                                       |
|----------+----------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| 语言     | 最拿手的计算机语言之一，代码量是多少？                                                       | c语言嵌入式，20万行                                                                                                |
| 语言     | 最拿手的计算机语言之二，代码量是多少？                                                       | c++做UI，1万行                                                                                                     |
| 软件实现 | 你是怎么读懂别人的代码的                                                                     | 先看相关文档，然后通过其用例代码猜想其实现，通过自顶向下和自底向上两种方式列出执行层次，最后总结并写自己的用例验证 |
| 软件实现 | 采取什么办法保证新功能不会影响原来的功能                                                     | 功能和功能之间是独立的模块，通过消息机制驱动HAL动作                                                                |
| 软件实现 | 开发中碰到最复杂的bug是什么，如何解决的？                                                    | 硬件与手册不一致导致无法达到想要的要求，通过站在手册之外的角度来解决此问题                                         |
| 软件测试 | 如何测试你自己写的代码？                                                                     | 系统实现简易的SHELL，SHELL通过接口与PC通信，PC端使用Python做好单元测试并比对结果                                   |
| 软件测试 | 如何测试别人的代码？                                                                         | 别人代码如果没有单元测试，那么为其写单元测试工具                                                                   |
| 软件测试 | 掌握了多少中测试工具和方法？                                                                 | 目前只会Python这种比对性的测试                                                                                     |
| 软件测试 | 如何对一个软件进行压力测试和效能测试                                                         | 对于嵌入式系统将各种参数调至极限，测试系统是否满足基本要求                                                         |
| 软件测试 | 如何测试人机界面                                                                             | 人肉遍历...                                                                                                        |
| 效能分析 | 写过最复杂的代码是什么？如何测量和改进它的效能？                                             | 最复杂的应该是在裸机环境下还要保持高采样率吧，目前还是将任务通过中断切分并以状态机的形式来组合以改善效能           |
| 需求分析 | 你做过多少个有实际用户的项目，项目有什么创新的地方？                                         | 项目有5个吧，创新点还实在是 get 不到...                                                                            |
| 行业洞察 | 最感兴趣的领域是什么？这个领域过去10年经历了哪些创新？你要如何创新？分析过领域前10的产品吗？ | ........                                                                                                           |
| 项目管理 | 描述开发方法在你项目中的具体应用情况？如何来合理安排任务的优先级和时间                       | .....                                                                                                              |
| 软件设计 | 做过架构设计，模块化设计，接口设计吗？如何设计的，为何这样设计，有何优势和创新?              |                                                                                                                    |
| 质量意识 | 你是怎么做代码复查的，如何提高代码质量                                                       |                                                                                                                    |
| 工具     | 在各种开发平台都使用过什么工具，自己写过什么工具来改进工作效率                               | 主要还是通过写一些简单的脚本来去除一些重复性的工作吧                                                               |
| 团队协作 | 如何说服同伴采用你提出的更好解决方案，如何说服懒惰的同伴加紧工作？                           | 指出各种方案相对产品需求的优劣，把握重点                                                                           |
| 理论素养 | 学过哪些理论知识                                                                     | 只有双向链表应用最多，其他的还需再次学习...                                                                        |

- 当你看到不靠谱的设计、槽糕的代码、过时的文档和测试用例的时候，不要想“几人别人的代码已经这样了，我的代码也可以随便一点啦。”，应该主动改善并且影响其他同事一起做好。
- 要持续性的学习，并分享出去，多与人交流。
- 在一个系统中，每一个知识点都应该有一个无异议的、正规的表现形式。也就是要真正认识一个概念。
  + 它是什么，如何用？
  + 它不是什么，所以不能那样用
  + 它和什么概念相似但又不同，如何区分它们？如何应用它们？
- 在设计模块的时候，要让它们目标明确单一，能独立存在，没有不明确的外部依赖。
- 通过快速原型来学习，快速原型的目的是学习，它的价值不在于代码，而在于你通过快速原型学到了什么。
  + 快速入门，并在实际应用中不断加深并总结才算真的学好了
- 设计要接近问题领域，在设计的时候，要接近目标用户的语言和环境。
  + 面向对象，把握全局
- 估计任务所花费的时间，避免以外。在开始工作的时候，要做出时间和潜在影响估计，并通告相关人士，避免最后关头意外发生。工作中要告知可能的时间变化，事后要总结。
- 图形界面的工具有它的长处，但不要忘了命令行工具也可以发挥很高的效率，特别是可以用脚本构建各种组合命令的时候。
- 有很多代码编辑器，熟练一种，并定制它，成为自己的专属工具。
- 理解常用的设计模式，并根据情况能灵活运用。
- 重要的接口要用文档来约定，并需要制作自动化测试工具。
- 不能过多的使用异常。
- 设计中把展现模块和实体模块分开，这样设计更加灵活。
- *重视算法的效率*
- 经常重构代码，注意要解决问题的根源。
- *尽早测试，经常测试，争取实现自动化测试*
- *自动测试的时候，有意引入bug，来保证自动测试的正常*
- *如何测试没有做完，那么开发也没有做完*
- 了解用户的期望，稍稍超出用户的期望值，让用户有惊喜
- 要主动挖掘需求
- 把所有术语和项目相关的名称、缩写放在一个地方。