#+TITLE: [What]高性能服务器程序框架
#+DATE: <2019-11-15 五> 
#+TAGS: CS
#+LAYOUT: post
#+CATEGORIES: book,Linux高性能服务器编程
#+NAME: <book_linux_server_chapter_8.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

进入核心内容了。
#+BEGIN_EXPORT html
<!--more-->
#+END_EXPORT
* 服务器模型
** C/S （客户端/服务器）模型
[[./struct_cs.jpg]]

虽然 TCP/IP 协议并没有客户端和服务器的概念，节点之间都是对等的。
但由于资源的集中性，最常用的便是 C/S 模型：所有的客户端都通过访问服务器来获取所需资源。

C/S 模型实现起来简单，但其缺点是：当访问量过大时，所有的客户端得到的响应速度都可能慢下来。
** P2P （点对点）模型
[[./p2p_view.jpg]]

P2P（Peer to Peer, 点对点）模型，使得每台机器在消耗服务的同时，也给别人提供服务，所有主机回归对等的地位。

P2P 模型使得资源能够充分、自由地共享，但当用户之间传输的请求过多时，网络的负载将加重。

实际使用的 P2P 模型通常都会带有一个专门的发现服务器，此服务器主要提供查找服务，使得每个客户都能尽快地找到自己需要的资源。


* 服务器编程框架
[[./program_struct.jpg]]

如上图，服务器各个部件的含义和功能如下表：
| 模块         | 单个服务器程序             | 服务器机群                  |
|--------------+----------------------------+------------------------------|
| I/O 处理单元 | 处理客户连接，读写网络数据 | 作为接入服务器，实现负载均衡 |
| 逻辑单元     | 业务进程或线程             | 逻辑服务器                   |
| 网络存储单元 | 本地数据库、文件或缓存     | 数据库服务器                 |
| 请求队列     | 各单元之间的通信方式       | 各服务器之间的永久 TCP 连接  |

I/O 处理单元用于管理服务器和客户端之间的连接，主要职责：
- 等待并接收新的客户连接
- 接收客户数据和将服务器响应数据返回给客户端
  + 数据收发也可能在逻辑单元中执行
- 对于机群来说，I/O 处理单元就是一个专门的接入服务器，实现负载均衡，从所有逻辑服务器中选取负荷最小的一台来服务客户。

逻辑单元通常是一个进程或线程，它分析并处理客户数据，然后将结果传递给 I/O 处理单元或直接发送给客户端。
对机群来说，一个逻辑单元就是一台逻辑服务器。

网络存储单元可以是数据库、缓存、文件，但不是所有的服务都需要存储功能。

请求队列是各个单元之间通信方式的抽象。请求队列通常被实现为池的一部分。
对于服务机群而言，请求队列是各台服务器之间预先建立的、静态的、永久的 TCP 连接。
* I/O 模型
I/O 分为阻塞和非阻塞，非阻塞只有在事件已经发生的情况下操作才能提高程序效率（否则就是不断的查询，也消耗 CPU 资源），需要配合 I/O 服用和 SIGIO 信号。
- I/O 复用函数有 select、poll、epoll_wait，它们本身是阻塞的，但它们具有同时监听多个 I/O 事件的能力。
- 将 SIGIO 信号与宿主进程绑定，当事件发生时，对应的信号处理函数被触发，就可以对相应目标文件执行非阻塞 I/O 操作了。

阻塞 I/O、I/O 复用和 SIGIO 都是同步 I/O 模型，因为它们都是在 I/O 事件发生之后再执行相应的读写操作，读写操作真正发生在用户空间。

对异步 I/O 而言，用户可以提前将 I/O 操作的缓存告知内核，内核待时机一到便执行相应的 I/O 操作，然后通知用户空间操作完成，读写操作真正发生在内核空间。
* 事件处理模式
服务器程序通常需要处理三类事件：I/O 事件、信号及定时事件。

对应事件有两种高效处理模式： Reactor 和 Proactor。
- 同步 I/O 模型通常用于实现 Reactor 模式
- 异步 I/O 模型通常用于实现 Proactor 模式

** Reactor 模式
Reactor 模式要求主线程（I/O 处理单元）只负责监听文件描述符上是否有事件发生，有的话就将该事件通知工作线程（逻辑单元）。
除此之外，主线程不做其他工作。读写数据、接收新连接以及处理客户请求都在工作线程中完成。

[[./reactor_overview.jpg]]

使用同步 I/O 模型实现 Reactor 模式的工作流程是：
1. 主线程向 I/O 复用函数注册 socket 上的读就绪事件
2. 主线程调用 I/O 复用函数等待 socket 上有数据可读
3. 当 socket 上有数据可读时， I/O 复用函数通知主线程，主线程将 socket 可读事件放入请求队列
4. 睡眠在请求队列上的某个工作线程被唤醒，它从 socket 读取数据并处理请求，然后往 I/O 复用函数注册写就绪事件
5. 主线程调用 I/O 复用函数等待 socket 可写
6. 当 socket 可写时，I/O 复用函数通知主线程，主线程将 socket 可写事件放入请求队列
7. 睡眠在请求队列上的某个工作线程被唤醒，它往 socket 上写入服务器处理客户请求的结果

* 并发模式
* 有限状态机
* 提高服务器性能
