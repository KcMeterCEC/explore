#+TITLE: [What]TCP 协议
#+DATE: <2019-10-14 一> 
#+TAGS: CS
#+LAYOUT: post
#+CATEGORIES: book,Linux高性能服务器编程
#+NAME: <book_linux_server_chapter_3.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

在阅读 [[http://kcmetercec.top/categories/book/%25E5%259B%25BE%25E8%25A7%25A3TCPIP-%25E5%2585%25A5%25E9%2597%25A8/][<<图解TCPIP>>]] 时，只简单提了一下 tcp，现在将它们加深一下理解。
#+BEGIN_EXPORT html
<!--more-->
#+END_EXPORT
* TCP 服务的特点
TCP 相对于 UDP 具有如下特点：
- 面向连接
  + TCP 通信前必须先建立连接，由于 TCP 是全双工的，完成数据交换后，通信双方都必须断开连接以释放系统资源。
    + 由于 TCP 协议是一对一的，所以无法用于广播和多播，这种情况下应该使用 UDP。
- 字节流：发送端的写操作次数和接收端执行的读操作次数之间没有任何数量关系，而 UDP 则是严格对应的。
  + 在发送端，TCP 模块发出的 TCP 报文的个数和应用程序执行的写操作次数之间没有固定的数量关系。
  + 在接收端，应用程序执行的读操作次数和 TCP 模块接收到的 TCP 报文个数之间也没有固定的数量关系。
- 可靠传输
  + 应答机制：每个 TCP 报文段都必须得到接收方的应答
  + 超时重传：发送端发出一个 TCP 报文后启动定时器，如果超时未收到应答，将重发报文。
  + 数据整理：由于 IP 数据报到达目的地有可能重复和乱序，所以 TCP 协议还会进行重排和整理
    + UDP 则不会处理这些问题，而降问题丢给应用层
* TCP 头部结构
[[./tcp_header.jpg]]

之前在 <<图解TCPIP>> 时已经概览了 TCP 的头部数据，只是有以下几点需要注意。
** 固定部分

- 数据偏移：一共占 4 位，2 的 4 次方最大表示 15，这也表示 TCP 头部最长是 60 字节
- 控制位：一共占 6 位，包含下面几项
  + URG 标志：紧急指针（urgent pointer）是否有效
  + ACK 标志：确认号是否有效。携带 ACK 标志的 TCP 报文段为确认报文段
  + PSH 标志：提示接收端应用程序应该立即从 TCP 接收缓冲区中读走数据，为后续数据腾出空间
  + RST 标志：要求对方重新建立连接。称携带 RST 标志的 TCP 报文段为复位报文段
  + SYN 标志：请求建立一个连接。称携带 SYN 标志的 TCP 报文段为同步报文段
  + FIN 标志：通知对方本端要关闭连接了。称携带 FIN 标志的 TCP 报文段为结束报文段
- 16 位窗口大小：告诉对方本端的 TCP 接收缓冲区还能容纳多少字节数据，对方就可以控制发送数据的速度
- 16 位校验和：发送端填充 CRC 结果，接收端进行校验。这个校验包含头部和数据
- 16 位紧急指针：表示相对当前序号的偏移
** 头部选项
前面固定部分是 20 字节，所以头部选项部分最多为 40 字节：
[[./tcp_opt.jpg]]

kind 说明选项的类型，length 说明选项的 *总长度* ，如果有第三个字段，则是选项的具体信息。

kind = 0： 选项表结束选项

kind = 1：空操作，一般用于将 TCP 选项总长度填充为 4 字节对齐

kind = 2：最大报文段长度。在 TCP 连接初始化时，双方使用此选项确定最大报文段长度（Max Segment Size, MSS）。
TCP 模块通常将 MSS 设置为（MTU - 40)字节。
- 一般情况下 TCP 和 IP 头部都不包含选项字段，那么它们头部长度之和就是 40 字节。这种情况下，就不会产生 IP 分片。
  + 对以太网而言，MSS 值就是 1460。
    
kind = 3：是窗口扩大因子选项。在 TCP 连接初始化时，双方使用该选项协商接收通告窗口扩大因子。
- 实际的窗口大小是：TCP 头部固定部分的窗口大小左移扩大因子位（比如头部设置窗口大小是 1000，扩大因子是 2，那么实际窗口大小是 4000 字节）
  + 扩大因子取值是 0~14， =/proc/sys/net/ipv4/tcp_window_scaling= 设置此扩大因子

kind = 4：是选择性确认（Selective Acknowledgment，SACK）选项。
- 当 TCP 报文段丢失时，如果没有使能选择性确认，那么发送端会发送该丢失报文段及其后续所有报文段。但如果使能了选择性确认，则只重传丢失的部分。
  + =/proc/sys/net/ipv4/tcp_sack= 设置此选项

kind = 5：是 SACK 实际工作选项。用于告诉发送方本端已经收到并缓存的数据块，从而让发送端可以检查哪些数据块被丢失。
- “块左边沿”表示不连续块的第一个数据序号，“块又边沿”表示不连续块最后一个数据序号 *的下一个序号*
  + 表示边沿之间的数据没有收到，一对边沿占用 8 字节，那么最多包含 4 对边沿

kind = 8：是时间戳选项。提供较为准确的计算通信双方之间的回路时间（Round Trip Time,RTT）的方法，用于流量控制。
- =/proc/sys/net/ipv4/tcp_timestamps= 来启动和关闭时间戳选项

* TCP 连接的建立和关闭
** 使用 tcpdump 观察                                                                                                                                                                                        
本机通过 =telnet= 访问局域网一台主机的 =telnet server= ，使用 =tcpdump= 进行抓取:                                                                                                                           
#+BEGIN_EXAMPLE                                                                                                                                                                                             
  sudo tcpdump -i enp0s3 -nt '(src 192.168.0.253 and dst 192.168.0.103)or (src 192.168.0.103 and dst 192.168.0.253)'                                                                                        
                                                                                                                                                                                                            
  telent 192.168.0.103 80                                                                                                                                                                                   
#+END_EXAMPLE                                                                                                                                                                                               
连接后立即退出，可以抓取到如下输出：                                                                                                                                                                        
#+BEGIN_EXAMPLE                                                                                                                                                                                             
# 连接                                                                                                                                                                                                      
  IP 192.168.0.253.38336 > 192.168.0.103.80: Flags [S], seq 899063137, win 64240, options [mss 1460,sackOK,TS val 600659478 ecr 0,nop,wscale 7], length 0                                                   
  IP 192.168.0.103.80 > 192.168.0.253.38336: Flags [S.], seq 3217896549, ack 899063138, win 28960, options [mss 1460,sackOK,TS val 1442999620 ecr 600659478,nop,wscale 7], length 0                         
  IP 192.168.0.253.38336 > 192.168.0.103.80: Flags [.], ack 1, win 502, options [nop,nop,TS val 600659484 ecr 1442999620], length 0                                                                         
# 断开                                                                                                                                                                                                      
  IP 192.168.0.253.38336 > 192.168.0.103.80: Flags [F.], seq 1, ack 1, win 502, options [nop,nop,TS val 600679745 ecr 1442999620], length 0                                                                 
  IP 192.168.0.103.80 > 192.168.0.253.38336: Flags [F.], seq 1, ack 2, win 227, options [nop,nop,TS val 1443019885 ecr 600679745], length 0                                                                 
  IP 192.168.0.253.38336 > 192.168.0.103.80: Flags [.], ack 2, win 502, options [nop,nop,TS val 600679754 ecr 1443019885], length 0                                                                         
#+END_EXAMPLE                                                                                                                                                                                               
连接和断开并没有发生数据的交换，所以整个过程 TCP 报文的数据长度为 0。                                                                                                                                       
                                                                                                                                                                                                            
第一个 TCP 报文段包含 SYN 标志，表示建立连接的同步报文段，该报文段的 ISN 值为 899063137。                                                                                                                   
                                                                                                                                                                                                            
第二个 TCP 报文段是对第一个报文段的响应，表示同意连接。该报文段的 ISN 值为 3217896549，并对第一个报文段的确认值为 899063138。                                                                               
                                                                                                                                                                                                            
第三个 TCP 报文段是对第二个报文段的确认，这样 TCP 连接就建立了。称为 TCP 三次握手。

第四个 TCP 报文段包含 FIN 标志，表示结束报文段，其后的两个报文段和握手的逻辑是一样的。
