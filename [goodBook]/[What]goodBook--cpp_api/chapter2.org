#+TITLE: [What]特征
#+DATE: <2020-10-30 五> 
#+TAGS: CS
#+LAYOUT: post
#+CATEGORIES: book,c++API设计
#+NAME: <book_cppapi_chapter2.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

说明一个好的 API 的设计原则。
#+BEGIN_EXAMPLE
  优质的 API 应该设计精巧且实用性强，它不仅能带来愉悦的使用体验，且能与各种应用程序完美融合，甚至让使用者感觉不到其存在。
#+END_EXAMPLE

#+BEGIN_EXPORT html
<!--more-->
#+END_EXPORT
* 问题域建模
API 应该首先为具体问题提供一个清晰的解决方案，同时能对实际的问题域进行准确的建模。
** 提供良好的抽象
API 应该对它所解决的问题提供逻辑抽象，每个类应该符合单一职责原则，它的职责应该能通过类名和类包含的方法名体现出来。

一般的实现方式是先通过 UML 来画出应该公开的接口，并反复思考该接口的合理性。
** 关键对象建模
对象建模的目的是确定主要对象的集合，这些对象提供的操作以及对象之间的关系。
- 对象模型会有多个，对象建模的任务应该根据 API 的特定需求来确定最佳的满足方式。
  
需要明白的是：对象模型可能会由于新需求而随时变化，有的时候是小修小改，但也可能需要将对象重新建模。
* 隐藏实现细节
尽量给用户提供稳定且最小完备的 API，以避免变更的部分会影响到用户的代码。

尽量隐藏实现细节有两个方法：
- 物理隐藏：不让用户获得私有源代码
  + 在  API 的头部只提供声明
- 逻辑隐藏：使用语言特性限制用户访问 API 的某些元素，使用语言的访问控制关键字实现类的封装
  + 类的数据成员应该始终声明为私有的
  + 永远不要返回私有数据成员的非 const 指针或引用，这会破坏封装性
  + 具体实现细节的方法，也不应该声明为公有的
  + 一些纯粹是实现细节的类也应该是私有访问属性的
    
为了保证 API 的最小完备，需要注意：


