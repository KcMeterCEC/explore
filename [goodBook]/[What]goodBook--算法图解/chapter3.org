#+TITLE: [What]算法图解_递归
#+DATE: <2018-02-28 Wed> 
#+TAGS: 数据结构与算法
#+LAYOUT: post
#+CATEGORIES: book,算法图解(入门)
#+NAME: <book_算法图解_chapter3.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

递归调用可以然代码看起来更加清晰，并没有性能上的优势。
#+begin_example
如果使用循环，程序的性能可能更高。如果使用递归，程序可能更容易理解。需要根据实际情况来选择。
#+end_example
#+BEGIN_HTML
<!--more-->
#+END_HTML
* 使用递归的注意事项
递归函数具有以下两个部分：
- 基线条件(base case) : 当函数不再调用自己时的退出条件， *必须具有，否则代码会栈溢出*
- 递归条件(recursive case) : 当函数调用自己时的条件


