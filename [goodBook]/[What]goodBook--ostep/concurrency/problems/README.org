#+TITLE: [What]Common Concurrency Problems
#+DATE: <2020-06-09 二> 
#+TAGS: CS
#+LAYOUT: post
#+CATEGORIES: book,ostep
#+NAME: <book_ostep_concurrency_problems.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

整理在并发编程时，经常会遇到的一些问题。

#+BEGIN_EXPORT html
<!--more-->
#+END_EXPORT
* 非死锁 BUG
** 违反原子性 BUG
所谓的违反原子性 BUG，其实就是没有对临界区进行互斥处理。

#+BEGIN_SRC c
  Thread 1::
  if (thd->proc_info) {
    fputs(thd->proc_info, ...);
   }

  Thread 2::
  thd->proc_info = NULL;
#+END_SRC

如上面这段代码，假设线程 2 在线程 1 进入 if 判断后但在执行 fputs 之前执行，就会
出现 fputs 操作空指针的问题。

解决办法就是将这段临界区进行加锁：
#+BEGIN_SRC c
  pthread_mutex_t proc_info_lock = PTHREAD_MUTEX_INITIALIZER;

  Thread 1::
  pthread_mutex_lock(&proc_info_lock);
  if (thd->proc_info) {
    fputs(thd->proc_info, ...);
   }
  pthread_mutex_unlock(&proc_info_lock);

  Thread 2::
  pthread_mutex_lock(&proc_info_lock);
  thd->proc_info = NULL;
  pthread_mutex_unlock(&proc_info_lock);
#+END_SRC
** 违反顺序 BUG
#+BEGIN_SRC c
  Thread 1::
  void init() {
    mThread = PR_CreateThread(mMain, ...);
  }

  Thread 2::
  void mMain(...) {
    mState = mThread->State;
  }
#+END_SRC
如上面这段代码，线程 2 必须要等待线程 1 为 =mThread= 赋值后，才能正常使用。

为了完成这种顺序同步，需要使用条件变量或信号量：
#+BEGIN_SRC c
  pthread_mutex_t mtLock = PTHREAD_MUTEX_INITIALIZER;
  pthread_cond_t mtCond = PTHREAD_COND_INITIALIZER;
  int mtInit = 0;

  Thread 1::
  void init() {
    ...
    mThread = PR_CreateThread(mMain, ...);

    // signal that the thread has been created...
    pthread_mutex_lock(&mtLock);
    mtInit = 1;
    pthread_cond_signal(&mtCond);
    pthread_mutex_unlock(&mtLock);
    ...
      }

  Thread 2::
  void mMain(...) {
    ...
    // wait for the thread to be initialized...
    pthread_mutex_lock(&mtLock);
    while (mtInit == 0)
      pthread_cond_wait(&mtCond, &mtLock);
    pthread_mutex_unlock(&mtLock);

    mState = mThread->State;
    ...
      }
#+END_SRC
* 死锁 BUG
** 死锁发生的原因
死锁的发生，需要同时具备以下 4 个条件：
1. 互斥：多个线程会访问一个或多个共有资源，同一时刻只能其中一个访问
2. 保持锁和等待锁：当一个线程获取到一个资源锁的同时，又在等待另外一个资源的锁
3. 不可抢占：锁不能从持有它的线程强制释放
4. 环形等待：一个线程获得的锁被另一个线程所需要，但另一个线程需要的锁也被当前线
   程直接或间接的需要
   
以上 4 个条件，只要其中一个不满足，便不会形成死锁。
** 避免死锁
*** 环形等待
避免环形等待的本质在于是要规定好锁的获取顺序。

简单的情况，比如当代码中只有两个锁时，那么可以规定无论哪个线程获取锁时，都是统一
的先后顺序。

复杂的情况，比如像哲学家就餐问题，如果使用统一的顺序就会造成死锁，这种情况下就要
规定锁的获取顺序。甚至需要规定好几个不同的顺序。
*** 保持锁和等待锁
当一个线程需要先后获取多个锁时，可以再用一个锁包裹，以让获取锁的操作原子性：
#+BEGIN_SRC c
  pthread_mutex_lock(prevention); // begin acquisition
  pthread_mutex_lock(L1);
  pthread_mutex_lock(L2);
  ...
  pthread_mutex_unlock(prevention); // end
#+END_SRC

不过这种方式有以下缺陷：
1. 很多时候代码都是层层封装，上层应用并不能使用一个锁来很好的包裹
2. 假设获取多个锁之间有很多其他操作，如果最外层再用一个锁包裹，则会降低进行的并
   发度
*** 不可抢占
不可抢占指的是一个线程已经获取了一个锁，但在获取另一个锁的时候由于无法获取到而睡
眠了，那么它已经获取的那个锁便无法释放。

那么，一个简单的解决办法是使用 trylock 获取另一个锁，无法获取便退出：
#+BEGIN_SRC c
  top:
  pthread_mutex_lock(L1);
  if (pthread_mutex_trylock(L2) != 0) {
    pthread_mutex_unlock(L1);
    goto top;
   }
#+END_SRC
而另一个线程则使用相反的顺序：
+ 如果使用相同的顺序，则可能造成另一个线程睡眠等待 L1，但这似乎也没什么不对？
#+BEGIN_SRC c
  top:
  pthread_mutex_lock(L2);
  if (pthread_mutex_trylock(L1) != 0) {
    pthread_mutex_unlock(L2);
    goto top;
   }
#+END_SRC

这种方式也会有一些缺陷：
1. 假设两个线程正好同步了，都在同时获取各自的锁然后又释放，那么它们就会陷入
   livelock，无限循环。
  + 解决办法是在中间插入随机的延迟，而打破这种同步
2. 实际的应用场景会比较复杂，在 =goto= 时还需要释放一些资源以避免重复申请
*** 互斥
