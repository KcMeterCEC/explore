#+TITLE: [What]Semaphores
#+DATE: <2020-06-05 五> 
#+TAGS: CS
#+LAYOUT: post
#+CATEGORIES: book,ostep
#+NAME: <book_ostep_concurrency_semaphores.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

信号量是我平时使用最为频繁的同步和计数工具，看看大师怎么说……

#+BEGIN_EXPORT html
<!--more-->
#+END_EXPORT
* 信号量的基本使用
#+BEGIN_SRC c
  //先初始化再使用
  #include <semaphore.h>
  sem_t s;
  sem_init(&s, 0, 1);

  //当信号量的值为负时，对应多少个线程在等待该信号量
  int sem_wait(sem_t *s) {
    //decrement the value of semaphore s by one
    //wait if value of semaphore s is negative
                      }

  int sem_post(sem_t *s) {
    //increment the value of semaphore s by one
    //if there are one or more threads waiting, wake one
                 }
#+END_SRC
* 二值信号量作为锁
使用二值信号量可以作为锁来完成临界区的互斥：
- 进入临界区前获取该锁
- 退出临界区后释放该锁

根据以上逻辑可以知道锁的初始值为 1：
#+BEGIN_SRC c
  sem_t m;
  sem_init(&m, 0, 1); // initialize to 1; 

  sem_wait(&m);
  // critical section here
  sem_post(&m);
#+END_SRC
* 信号量用于排序（同步）
一个线程要等待另一个线程到达某个条件后，才继续往后执行，所以这种情况下信号量的初始值为 0.
#+BEGIN_SRC c
  sem_t s;

  void *child(void *arg) {
    printf("child\n");
    sem_post(&s); // signal here: child is done
    return NULL;
  }

  int main(int argc, char *argv[]) {
    sem_init(&s, 0, 0); 
    printf("parent: begin\n");
    pthread_t c;
    Pthread_create(&c, NULL, child, NULL);
    sem_wait(&s); // wait here for child
    printf("parent: end\n");
    return 0;
  }
#+END_SRC

* 使用信号量解决生产者和消费者问题
根据前面使用条件变量的实现来看，也是需要满位和空位，只是这里的满位和空位是由信号量来表示。

除此之外，对于缓存区的写入也是需要做互斥的：
#+BEGIN_SRC c
   int buffer[MAX];
   int fill = 0;
   int use = 0;

   void put(int value) {
     buffer[fill] = value; // Line F1
     fill = (fill + 1) % MAX; // Line F2
     }

   int get() {
     int tmp = buffer[use]; // Line G1
     use = (use + 1) % MAX; // Line G2
     return tmp;
     }
  void *producer(void *arg) {
    int i;
    for (i = 0; i < loops; i++) {
      sem_wait(&empty); // Line P1
      sem_wait(&mutex); // Line P1.5 (MUTEX HERE)
      put(i); // Line P2
      sem_post(&mutex); // Line P2.5 (AND HERE)
      sem_post(&full); // Line P3
      }
    }

  void *consumer(void *arg) {
    int i;
    for (i = 0; i < loops; i++) {
      sem_wait(&full); // Line C1
      sem_wait(&mutex); // Line C1.5 (MUTEX HERE)
      int tmp = get(); // Line C2
      sem_post(&mutex); // Line C2.5 (AND HERE)
      sem_post(&empty); // Line C3
      printf("%d\n", tmp);
      }
    }
#+END_SRC

*需要注意的是：* 互斥量放置位置需要在满位和空位之间，如果互斥量在满位和空位外面，则很大概率会照成死锁。 
* 读写锁
读写锁的实现逻辑如下：
#+BEGIN_SRC c
  typedef struct _rwlock_t {
     sem_t lock; // binary semaphore (basic lock)
     sem_t writelock; // allow ONE writer/MANY readers
     int readers; // #readers in critical section
     } rwlock_t;

   void rwlock_init(rwlock_t *rw) {
    rw->readers = 0;
    sem_init(&rw->lock, 0, 1);
     sem_init(&rw->writelock, 0, 1);
     }

   void rwlock_acquire_readlock(rwlock_t *rw) {
     sem_wait(&rw->lock);
     rw->readers++;
     if (rw->readers == 1) // first reader gets writelock
       sem_wait(&rw->writelock);
     sem_post(&rw->lock);
     }

   void rwlock_release_readlock(rwlock_t *rw) {
     sem_wait(&rw->lock);
     rw->readers--;
     if (rw->readers == 0) // last reader lets it go
       sem_post(&rw->writelock);
     sem_post(&rw->lock);
     }

   void rwlock_acquire_writelock(rwlock_t *rw) {
     sem_wait(&rw->writelock);
     }

   void rwlock_release_writelock(rwlock_t *rw) {
     sem_post(&rw->writelock);
     }
#+END_SRC   
需要注意的是：假设有多个频繁的读操作，有可能会导致写操作无法进行（被饿死），这种情况下使用普通的互斥锁更为高效。


