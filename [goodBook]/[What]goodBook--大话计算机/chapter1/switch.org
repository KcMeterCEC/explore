#+TITLE: [What]读书笔记-->电控开关 
#+DATE: <2019-05-14 二> 
#+TAGS: CS
#+LAYOUT: post
#+CATEGORIES: book,大话计算机
#+NAME: <book_bigcomputer_chapter_1.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

复习数字电路的关键概念。

#+BEGIN_EXPORT html
<!--more-->
#+END_EXPORT
* 实现基本的加法器
** 理解与或非门
再复杂的数字电路，都是由基本的与或非门所组成的，其电路逻辑为：
- 与门：两个开关串联，只有两个开关都闭合（为1）时，电路才接通（为1）
- 或门：两个开关并联，只要其中一个开关闭合（为1）时，电路都可以接通（为1）
- 非门：一个反向开关

基于以上3个基本门，可以创造出异或门(XOR)等其他基础逻辑门：
[[./xor.jpg]]

** 用逻辑门实现1+1=2
将等式 “1+1=2” 转换为2进制等式:
- 0 + 0 = 0
- 1 + 0 = 1
- 0 + 1 = 1
- 1 + 1 = 10

观察前3个等式，可以看出其逻辑正好与异或门一致。
- *注意: 逻辑门与数学运算概念并不等价，只是用逻辑门来表示最基础的运算*
  
等式4产生了进位，并且是两个输入同时为1时才会产生进位，那么这个逻辑正好与门一致。

最终用逻辑门实现公式 “1+1=2”的电路如下:
[[./half_adder.jpg]]

可以在[[https://circuitverse.org/users/5908/projects/16320][此处]]在线体验。

** 更多位的运算
以上加法电路并不能运算多位二进制相加的问题，回过来看二进制的运算过程还需要处理上一级产生的进位。
上面不能处理上一级进位的便是 *1位半加器* ， 反之能处理进位的便是 *1位全加器* 。
[[./half_adder.jpg]]

- 两个半加器的进位通过或门输出，其逻辑是两个半加器最多有一个会产生进位。

而多位的二进制运算便是串联形式的处理上一级产生的进位:
[[./4bits_adder.jpg]]

可以在[[https://circuitverse.org/users/5908/projects/16446][此处]]在线体验。
* 电路优化--先行/并行进位

