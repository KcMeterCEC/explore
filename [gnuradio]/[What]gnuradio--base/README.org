* [What]gnuradio --> base

** 基本知识
*** 组成
gnuradio 是一个数据处理框架,通过图形块的方式来展示一个数据处理模块, 然后将这些模块连接起来就形成了流图(flowgraph).这些模块的各种参数最后都会以代码的形式传递给
python,然后再到底层的C++参数.而模块之间的 *接口颜色则代表了不同的数据类型(通过 Help-Types 来查看).*

模块的参数再编辑时但未保存则为绿色.

*** 启动与调试
gunradio 使用命令 =gnuradio-companion=  *在命令行启动*!.
因为命令行会输出必要的调试信息!

*** 模块操作
流图最基本的有个 =Options= 块,用于对当前工程的一个总体设置.
使用 =ctrl + f= 输入关键字便可, 对模块的更改可以使用 =ctrl + z= 来撤销更改.

模块数据连接中, *当没有连接真实硬件时,需要使用 =throttle= 块,避免消耗过多的CPU.*

关于模块的正常使用方式,依然是看它的说明文档!
** 使用Python开发
当在图形界面使用 =generate= 功能时,便会生成和options中定义的ID名称一样的python文件.
**** 第一个简单的调用(如此的优雅)
#+BEGIN_SRC python
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from gnuradio import gr
from gnuradio import audio
from gnuradio import analog

#gr.top_block 是gnuradio提供的基类
class my_top_block(gr.top_block):
    def __init__(self):
        gr.top_block.__init__(self)

        sample_rate = 32000
        ampl = 0.1

#信号源
        src0 = analog.sig_source_f(sample_rate, analog.GR_SIN_WAVE, 350, ampl)
        src1 = analog.sig_source_f(sample_rate, analog.GR_SIN_WAVE, 440, ampl)

#接收机
        dst = audio.sink(sample_rate, "")
#连接信号源和接收机
        self.connect(src0, (dst, 0))
        self.connect(src1, (dst, 1))

if __name__ == "__main":
    try:
        my_top_block().run()
    except [[KeyboardInterrupt]]:
        pass
#+END_SRC

**** 先使用界面构建,然后再修改代码
可以先在UI下构建基本工程,然后在去修改源码.需要注意的是, 如果再次修改了UI,那么源码会被再次更新.
对应的办法是将此 *文件复制一份再修改*, 然后使用命令行启动代码.
**** 块操作
gnuradio 使用 gr_modtool 来开发和管理模块(module).而块(block)则是存放在module中的.
***** gr_modtool 操作
- =gr_modtool help= 调用帮助说明
- =gr_modtool newmod <modname>= 创建一个新的模块, 模块中的 python,grc 文件夹需要关注
- =gr_modtool add -t <type> -l python= 创建一个 python 模块,根据向导即可.然后会在 python,grc 文件夹下生成以测试为目的的 qa 文件, 块文件, 与GRC连接的xml文件,以及更新CMakeLists.txt文件.

在选择块文件时, 需要规范文件后缀,后缀以输入输出数据类型而定.比如 multiply_py_ff , ff 代表输入为浮点,输出也为浮点.
***** 编码操作
- 进入块稳健,修改源码以指定输入输出类型(in_sig, out_sig),以及数据运算过程(work方法).
- 单元测试

