* [What]vim --> basic
[[vimcdoc.sourceforge.net/doc/usr_toc.html][vim 参考手册]]
** 基本知识
*** 脚本
vim 的设置可以写入脚本文件中来达到批量配置的目的, 在 vim 中使用 =:scriptnames= 命令查看作用的脚本及其路径.

一般情况下, vim启动脚本路径为 =~/.vimrc= (linux) 或 =$HOME/_vimrc, $VIM/_vimrc= (windows), 其示例文件位于 =$VIMRUNTIME/vimrc_example.vim=

脚本文件可以包含任何冒号命令, 其注释使用 '"' 开头.

** 基本操作
*** 基本快捷键操作

基本快捷操作命令 *前面* 都是可以加入一个数字, 代表此命令重复执行的次数.

通常在数字的前面还可以加入其他的命令, 比如 =d4w=, 代表删除 4个单词.

使用这些组合技巧的法则除了记忆外, 更多的是大胆的尝试!有 =u= 在, 尽管尝试!

**** 插入与改动(在 Normal 模式中使用)
| 快捷键/命令                  | 说明                                                                                             |
|------------------------------+--------------------------------------------------------------------------------------------------|
| i                            | 在当前光标所在 *字符前* 插入编辑                                                                 |
| I                            | 在当前关标所在 *行首* 插入编辑                                                                   |
| a                            | 在当前光标所在 *字符后* 插入编辑                                                                 |
| A                            | 在当前光标所在 *行尾* 插入编辑                                                                   |
| o                            | 在当前光标所在 *行下插入新行* 并编辑                                                             |
| O                            | 在当前光标所在 *行上插入新行* 并编辑                                                             |
|                              |                                                                                                  |
| ~                            | 修改光标下 *字符的大小写,并移动到下一个字符*                                                     |
| cw                           | 修改一个词, =c= 与 =d= 一样,后面可以跟很多种命令                                                 |
| x                            | 删除当前 *光标所在的字符*, 与 =dl= 一样                                                          |
| X                            | 删除当前 *光标所在的左边的字符* , 与 =dh= 一样                                                   |
| D                            | 删除当前 *光标所在的字符直到行尾*, 与 =d$= 一样                                                  |
| daw                          | 删除当前 *光标所在的单词*, =das= 删除 *光标所在的句子*.                                          |
| cis                          | 修改当前 *光标所在的句子,不包括句子后的空白*, =cas= 包括空白.                                    |
| C                            | 修改当前 *光标所在的字符直到行尾*, 与 =c$= 一样                                                  |
| s                            | 修改当前 *光标所在的字符*, 与 =cl= 一样                                                          |
| S                            | 修改当前 *光标所在的行*, 与 =cc= 一样                                                            |
| dd                           | 删除当前 *光标所在的行* ,当前面接双引号加字母, 则代表 *拷贝到寄存器中!, 使用 "<reg>p 来粘贴*         |
| cc                           | 删除当前 *光标所在的行, 保留缩进,并进入编辑模式*                                                 |
| yy                           | 拷贝当前 *光标所在的行*, 与 =Y= 一样,当前面接双引号加字母, 则代表 *拷贝到寄存器中!, 使用 "<reg>p 来粘贴* |
| "\*yy                        | 拷贝一行到剪切板                                                                                 |
| "\*p                         | 从剪切板粘帖                                                                                     |
| J                            | 删除当前 *光标所在行的换行符*, 也就是将此行与下一行拼接为一行                                    |
| r                            | 替换当前光标处的字符, 并自动退回 Normal 模式                                                     |
| R                            | 替换当前光标处开始的字符, 直到 <ESC> 退回 Normal 模式                                            |
| .                            | 重复最后一次的修改操作                                                                           |
| p                            | 插入缓存的内容到光标后面, 使用 =xp= 即可交换两个字符                                             |
| P                            | 插入缓存的内容到光标前面                                                                         |
|                              |                                                                                                  |
| u                            | 撤销上次操作                                                                                     |
| CTRL-R                       | 重做刚才撤销的操作, 是 *撤销的撤销*                                                              |
| U                            | 消除对 *光标所在行的编辑操作*, 也就是行撤销                                                      |
|                              |                                                                                                  |
| :e!                          | 放弃当前文件的更代并 *重新装载当前文件*                                                          |
|                              |                                                                                                  |
| CTRL-G                       | 显示正在编辑的文件名称,以及当前光标所处的位置                                                    |
|                              |                                                                                                  |
| :vertical diffsplit filename | 将当前文件与 filename 相比较                                                                     |
|                              |                                                                                                  |
**** 可视操作(在 visual 模式中使用)
| 快捷键 | 说明                                                         |
|--------+--------------------------------------------------------------|
| v      | 进入可视模式, 'V' 进入按行选择的可视模式                     |
| CTRL-v | 进入块选择可视模式                                           |
| o      | 在选择的块中移动光标到另一端, O 用于在块可视的同一行另一个角 |
| as     | 选中一个句子                                                       |

**** 移动(在 Normal 模式中使用)
| 快捷键 | 说明                                                                                |
|--------+-------------------------------------------------------------------------------------|
| w      | 移动到 *下一个单词的首字符上*, 切换为大写, 则以空格分隔的字符串为最小单位           |
| b      | 移动到 *前一个单词的首字符上*, 切换为大写, 则以空格分隔的字符串为最小单位           |
| e      | 移动到 *下一个单词的尾字符上*, 切换为大写, 则以空格分隔的字符串为最小单位           |
| ge     | 移动到 *前一个单词的尾字符上*, 切换为大写, 则以空格分隔的字符串为最小单位           |
| $      | 移动到光标所在 *行尾*                                                               |
| ^      | 移动到光标所在 *行的第一个非空白字符上*                                             |
| 0      | 移动到光标所在 *行首*                                                               |
| f char | 向后移动到 char 字符上, F 则为向前移动, 使用 ';' 重复, ','  为反向重复.             |
| t char | 向后移动到 char 字符的 *前一个字符*, T 为向前, ';' 重复, ',' 反向重复               |
| %      | 跳转到匹配的符号上去, *当前面接数字时, 代表移动到文件的百分之多少的位置*            |
| G      | 加数字,代表跳转到对应行去.  不加数字, 跳转到最后一行                                |
| gg     | 跳转到第一行                                                                        |
| CTRL-u | 向上滚动半屏                                                                        |
| CTRL-d | 向下滚动半屏                                                                        |
| CTRL-e | 向上滚动一行                                                                        |
| CTRL-y | 向下滚动一行                                                                        |
| CTRL-f | 向下滚动一屏                                                                        |
| CTRL-b | 向上滚动一屏                                                                        |
| zz     | 将光标所在行, 置于屏幕中央                                                          |
| zt     | 将光标所在行, 置于屏幕顶端                                                          |
| zb     | 将光标所在行, 置于屏幕底端                                                          |
| H      | 移动光标到当前视图顶部                                                              |
| M      | 移动光标到当前视图中部                                                              |
| L      | 移动光标到当前视图尾部                                                              |
| ``     | 将光标定位到跳转前的位置,与 =marker= 联合使用, *小写标记是局部的, 大写标记是全局的* |
| `"     | 跳转到上次编辑的位置                                                                |
| `[     | 跳转到最后一次修改的起始位置                                                        |
| `]     | 跳转到最后一次修改的结束位置                                                        |
| [#     | 跳转到 #if, ']#' 为跳转到 #else 或 #end                                             |
| [[     | 跳转到上一个代码块首, '[]'跳转到上一个代码块尾                                      |
| ]]     | 跳转到下一个代码块首, ']['跳转到下一个代码块尾                                      |
| [/     | 跳转到注释首, ']/' 跳转到注释尾                                                     |
| CTRL-O | 跳转到之前的位置                                                                    |
| CTRL-I | 跳转到较新的位置                                                                    |
| :marks | 查看标记列表                                                                        |

**** 查找(在 Normal 模式中使用)
| 快捷键/命令     | 说明                                                                                                  |
|-----------------+-------------------------------------------------------------------------------------------------------|
| /word           | 查找 *包含* word 的字符串, ' . * [ ] ^ % / \ ? $ ' 有特殊含义, 查找这些字符需要在它们前面加上 '\'转义 |
| :set ignorecase | 查找不区分大小写, =:set noignorecase= 关闭                                                            |
| *               | 取得光标上的单词,并进入向下查找模式. '#' 使用向上查找                                                 |
| /\<word\>       | '\<' '\>' 分别代表匹配头部和尾部                                                                      |
| :set hlsearch   | 高亮查找的字符串, =:set nohlsearch= 关闭                                                              |
| :nohlsearch     | 仅仅 *去掉本次高亮显示*.                                                                              |
| :set incsearch  | 在输入字符串过程中就显示匹配点                                                                        |
| :set nowrapscan | 找到文件两端后停止查找                                                                                |
|                 |                                                                                                       |

**** 多文件编辑
| 命令              | 说明                                                                                   |
|-------------------+----------------------------------------------------------------------------------------|
| :split            | 将当前文件进行上下分隔, :vsplit 代表左右分隔                                           |
| :close            | 关闭当前光标所在窗口                                                                   |
| :only             | 仅保留当前窗口                                                                         |
| :new              | 上下分隔打开一个空缓冲区, :vnew 代表左右分隔                                           |
| :args             | 显示正在编辑的文件列表                                                                 |
| :previous         | 移动到前一个文件                                                                       |
| :next             | 移动到下一个文件                                                                       |
| :last             | 移动到最后一个文件                                                                     |
| :first            | 移动到第一个文件                                                                       |
| :view file        | 以可读的方式打开文件                                                                   |
| :saveas filename  | 另存为文件                                                                             |
| :file name        | 改变当前文件名                                                                         |
| :tabedit filename | 以标签页的方式编辑文件, 通过鼠标切换各个标签, =tabonly= 关闭除当前标签页外的所有标签页 |
|         |                                                                                        |
**** 退出/帮助(在 Normal 模式中使用)
| 快捷键/命令        | 说明                                  |
|--------------------+---------------------------------------|
| ZZ                 | 保存并关闭当前文件                    |
| :q!                | 放弃当前文件的修改并关闭当前文件      |
| :help  something   | 获取某个主题的帮助(退出帮助使用 =ZZ=), 关于如何使用 help, 使用 =:help helphelp= |
|                    |                                       |

*** 代码合并(vimdiff)
除了使用 git, 使用 vimdiff 来比对个别文件, 实现合并相当方便.

- 在一开始启动 vim 时, 使用命令 =vim -d <file1> <file2>= 或 =vimdiff <file1> <file2>=
- 在使用git的情况下, 使用命令 =git conifg --global diff.tool vimdiff=
- 在 vim 已经打开的情况下, 使用命令 =:diffthis= 打开比对功能, 使用 =:diffoff= 关闭比对.
| 快捷键      | 意义                                 |
|-------------+--------------------------------------|
| do          | 在当前光标处, 将参考文件内容合并过来 |
| dp          | 在当前光标处, 将此处内容合并过去     |
| ]c          | 跳到下一个有差异的位置               |
| [c          | 跳到上一个有差异的位置               |
| :diffupdate | 更新高亮显示                               |
*** 替换

** 基本配置
*** 基本常用设置(在脚本文件中, 需要去掉冒号!)
| 命令                            | 说明                                         |
|---------------------------------+----------------------------------------------|
| :set showmode                   | 在编辑器下方显示当前处于什么模式             |
| :set number                     | 显示绝对行号, =set nonumber= 关闭            |
| :set ruler                      | 在窗口右下角显示光标位置                     |
| :edit $MYVIMRC                  | 编辑启动脚本, =:version= 显示vim查找路径     |
| :set nocompatible               | 设置与 vi 不完全兼容                         |
| :set backspace=indent,eol,start | 指定在插入模式下可以用 <BS> 删除光标前的字符 |
| :set autoindent                 | 启动新行与前一行一样缩进                     |
| :set history=50                 | 保存50个命令和50个查找模式的历史             |
| :set showcmd                    | 在窗口右下角显示未完成的命令                 |
| :set nowrap                     | 关闭行回绕                                   |
| :set sidescroll=10              | vim 自动滚动的字符, 为了显示未看到的文字     |
| :set whichwrap=b,s,<,>,[,]      | 在行首和行尾移动可以进入下一行               |
| :set list                       | 显示TAB按键                                  |
| :set listchars=tab:>-,trail:-   | 指明 TAB 显示的字符为 '-'                    |
| :set cmdheight=3                | 显示消息空间的高度                           |
| :syntax enable                  | 语法高亮                                     |
| :set filetype                   | 查看自动检查的文件类型                       |
| :set background=dark            | 设置背景色, 需要在 =:syntax enable= 下使用   |
| :colorscheme evening            | 设置配色方案为 evening                       |
| :hardcopy                       | 打印当前文件                                 |
| :TOhtml                         | 将当前文件另存为 html 格式                   |
| :set autowrite                  | 自动保存                                     |
| :set backupext=.bak             | 设置备份文件后缀为 .bak                      |
| :set noscrollbind               | 取消在比较两个文件时的滚动绑定                             |

#+begin_example
#当覆盖一个文件的时候保留一个备份,但 VMS 系统除外, 因为它会自动产生备份.(备份文件是在原来文件名后加 '~' 字符)
if has("vms")
  set nobackup
else 
  set backup
endif
#文件类型探测, 使用文件类型相关插件, 使用缩进文件
filetype plugin indent on
#限制 vim 在一行长于 78 个字符的时候自动换行, 但仅仅对文本类型文件有效 (autocmd Filetype text).
autocmd FileType text setlocal textwidth=78.
#+end_example
*** GUI配置
| 设置               | 意义                                                                 |
|--------------------+----------------------------------------------------------------------|
| :set guioptions-=T | 默认不显示工具栏                                                     |
| :behave xterm      | 鼠标的行为和 X Windows 一致, 当为 behave mswin 则行为与 Windows 一致 |
|                    |                                                                      |
*** 键盘映射(用于脚本文件中)
映射用于把一系列的 vim 命令绑定为一个单独的一个或几个按键, 可以在 vim 运行中来指定按键映射, 不过更多的是在脚本中提前使用.

在 vim 中使用 =:map= 命令可以查看当前的按键映射.

定义格式为: =map 映射键 被映射键=, 通常为了让定义的快捷键不与默认快捷键冲突, 所以需要在快捷键前加入 *前导键*.
#+begin_example
"定义前导键为 ','
let mapleader=","
"定义切换 buffer 快捷键(需要安装 MiniBufExplorer 插件)
"<> 包含的就是控制按键, <leader> 代表前导键, <CR> 代表回车
map <leader>n :bn<CR>
map <leader>p :bp<CR>
#+end_example
*** 软件包
软件包是一组可加入 vim 的文件, 有两种软件包: 可选的和启动时自动载入的.

加入插件时, 使用命令 =packadd! packName=.

有些软件包, 需要从网上下载压缩文件, 需要在 =.vim= 中创建对应的文件夹并解压.
#+begin_example
#建立软件包 fancy 目录
mkdir -p ~/.vim/pack/fancy 
#解压
cd ~/.vim/pack/fancy 
unzip fancy.zip 
#+end_example
*** 插件
vim 可以通过插件增强功能, 插件其实是 *一个当 vim 启动的时候能被自动执行的脚本, 简单的把插件放到 vim 的 plugin 目录就可以使它生效*.

vim 中有两种插件:
- 全局插件: 用于所有类型的文件
- 文件类型插件: 仅用于特定类型的文件
**** 全局插件
添加一个全局插件只要两步:
1. 获得一个插件的拷贝
2. 把它放进合适的目录
***** 全局插件位置
插件的位置有几个:
- 与 vim 一起发布的, 在 =$VIMRUNTIME/macros= 目录或其子目录中找到
- 在 [[http://www.vim.org][官网插件]] 中下载
- 在 vim 的邮件列表中找 : maillist
- 自己写一个
***** 使用全局插件
将插件放进合适的目录即可.
| 系统       | 插件目录                                      |
|------------+-----------------------------------------------|
| Unix       | ~/.vim/plugin/                                |
| PC 和 OS/2 | $HOME/vimfiles/plugin 或 $VIM/vimfiles/plugin |
| Amiga      | s:vimfiles/plugin                             |
| Macintosh  | $VIM:vimfiles:plugin                          |
| RISC-OS    | Choices:vimfiles.plugin                       |

在 Unix 中:
#+begin_example
mkdir ~/.vim 
mkdir ~/.vim/plugin 
cp /tmp/yourplugin.vim ~/.vim/plugin 
#+end_example
也就是将插件放入 =plugin= 中即可, 当然也可以放入子目录中, 以分类处理.

或者也可以使用 *bundle* 来管理插件.
**** 文件类型插件
文件类型插件的名称前缀, 即为文件类型, 比如 =c.vim, cpp.vim=. 对应的路径为(filetype 必须对应, name 可以随意取名):
- ftplugin/<filetype>.vim 
- ftplugin/<filetype>_<name>.vim
- ftplugin/<filetype>/<name>.vim 
***** 文件类型插件位置
- 与 vim 一起发布, 在 =$VIMRUNTIME/ftplugin= 目录或其子目录中找到
***** 使用文件类型插件
与全局插件对应的是, 放于 =ftplugin= 文件夹中.
#+begin_example
mv thefile ~/.vim/ftplugin/stuff.vim 
#+end_example

**** 添加帮助
将帮助文件导入 vim 即可,如下例所示:
#+begin_example
#新建存放帮助文件的目录
:!mkdir ~/.vim/doc 
#拷贝文件
:!cp /tmp/doit.txt ~/.vim/doc 
#添加帮助文件
:helptags ~/.vim/doc 
#查看本地的帮助文件
:help local-additions 

#+end_example

*** 选项
选项也就是当前配置, 使用 =:options= 来查看所有的参数配置, 并且都可修改.

获得选项的帮助说明, 使用 help 命令获得更多帮助. *需要在选项命令前后加上单引号*. 例如 :help 'wrap'

如果一个选项设置错误后, 使用 '&' 恢复到默认值, 例如 :set iskeyword&

** 组合高级功能
*** 宏录制
宏录制可以记录一段操作, 然后重复这一操作.

**** 开始与结束
vim 通过在 normal 模式下按下 =q= 开始录制, 然后输入一个寄存器(a ~ z 的任意一个字母),则开始使用此寄存器开始录制,与此同时屏幕左下角会显示 =recording= 提示.

在操作完成后, 再次按下 =q= 结束录制. 
**** 调用
- @ + 寄存器 : 重复依次宏
- @ + @ : 重复上次使用的宏
- <num> + @ + 寄存器 : 重复宏 <num> 次
**** 修改
当进行宏录制的时候, 有可能设置的命令有误, 而重新输入一次则会浪费时间并且也会容易犯错.

比较好的解决方法是, *将保存到寄存器的操作以文本的形式编辑修改即可*.
#+begin_example
#移到行尾
G
#建立一个空行
o<Esc>
#拷贝n 寄存器中的文本, 这样将命令拷贝到此处
"np
#然后编辑这些命令
#回到行首
0
#把正确的命令再次拷贝到 n 寄存器
"ny$
#删除此行
dd
#+end_example
然后便可以通过 @n 来执行命令序列了.
**** 追加命令到寄存器
当需要追加新的命令到寄存器时, 除了使用上面的方法, 还可以使用其 *对应的大写寄存器进行录制命令,将命令追加*.
** 疑难杂症
*** vim 打开部分文件无法高亮
- 描述
在偶然的某个时间打开以前打开过的文件后, 无法语法高亮了.
- 解决
将 =~/.vimviews/= 文件夹下清空即可.
