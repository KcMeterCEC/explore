#+TITLE: [What] 构建器
#+DATE:<2020-11-10 二> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, GoF
#+NAME: <builder.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习视频：<<c++ 设计模式>>

从封装变化角度对模式分类：
- 组件协作：通过 *晚期绑定* ，来实现框架和应用之间的松耦合
  + Template Method
  + Strategy
  + Observer / Event
- 单一职责
  + Decorator
  + Bridge
- 对象创建：避免 new 对象过程中所导致的紧耦合，从而支持对象创建的稳定
  + Factory Method
  + Abstract Factory
  + Prototype
  + Builder
- 对象性能
  + Singleton
  + Flyweight
- 接口隔离
  + Facade
  + Proxy
  + Mediator
  + Adapter
- 状态变化
  + Memento
  + State
- 数据结构
  + Composite
  + Iterator
  + Chain of Resposibility
- 行为变化
  + Command
  + Visitor
- 领域问题
  + Interpreter

#+BEGIN_HTML
<!--more-->
#+END_HTML
* 问题
#+BEGIN_EXAMPLE
  在软件系统中，有时面临着“一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成。
  由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。

  如何应对这种变化？如何提供一种“封装机制”来隔离出“复杂对象的各个部分”的变化，从而保持系统中的“稳定构建算法”不随着需求改变而改变？
#+END_EXAMPLE
* 解决
#+BEGIN_EXAMPLE
  将一个复杂对象的构建与其表示相分离，使得同样的构建过程（稳定）可以创建不同的表示（变化）。
#+END_EXAMPLE

Builder 模式主要用于“分步构建一个复杂的对象”。在这其中“分步骤”是一个稳定的算法，而复杂对象的各个部分则经常变化。

变化点在哪里，封装哪里。Builder 模式主要在于对“复杂对象各个部分”的频繁需求变动。其缺点在于难以应对“分步骤构建算法”的需求变动。

在 Builder 模式中，要注意不同语言中构造器内调用虚函数的差别。
- 比如在 c++ 中就不能调用虚函数（因为父类先于子类构造，那么父类就无法在构造时调用子类的重新实现）

以 c++ 的角度来理解就是：
- 将对象的构建过程定义为接口
- 子类完成接口的定义
- 在使用时，首先主动调用构造方法来完成对象的构建，然后再使用其他方法
  
构建模式与模板方法的不同之处在于：模版方法是动态的修改算法的细节，并且会多次运行。而构建模式是在对象构建时运行一次。

按照 UML 类图的简易逻辑如下：
[[./pic/builder.jpg]]

* 示例
#+BEGIN_SRC cpp
  //director.h
  #ifndef DIRECTOR_H
  #define DIRECTOR_H


  class Director
  {
  public:
    Director();

    void Construct(void);

    virtual ~Director();
  protected:
    virtual void BuildPart1(void) = 0;
    virtual void BuildPart2(void) = 0;
  };

  #endif // DIRECTOR_H
  //director.cpp
  #include "director.h"

  Director::Director()
  {

  }
  Director::~Director()
  {

  }
  void Director::Construct(void)
  {
    BuildPart1();
    for(int i = 0; i < 3; ++i){
      BuildPart2();
    }
  }
  //concretebuildera.h
  #ifndef CONCRETEBUILDERA_H
  #define CONCRETEBUILDERA_H

  #include "director.h"

  class ConcreteBuilderA : public Director
  {
  public:
    ConcreteBuilderA();
  protected:
    void BuildPart1() override;
    void BuildPart2() override;
  };

  #endif // CONCRETEBUILDERA_H
  //concretebuildera.cpp
  #include "concretebuildera.h"

  #include <iostream>

  ConcreteBuilderA::ConcreteBuilderA()
  {

  }
  void ConcreteBuilderA::BuildPart1()
  {
    std::cout << "ConcreteBuilderA::BuildPart1\n";
  }
  void ConcreteBuilderA::BuildPart2()
  {
    std::cout << "ConcreteBuilderA::BuildPart2\n";
  }

  //concretebuilderb.h
  #ifndef CONCRETEBUILDERB_H
  #define CONCRETEBUILDERB_H

  #include "director.h"

  class ConcreteBuilderB : public Director
  {
  public:
    ConcreteBuilderB();
  protected:
    void BuildPart1() override;
    void BuildPart2() override;
  };

  #endif // CONCRETEBUILDERB_H

  //concretebuilderb.cpp
  #include "concretebuilderb.h"

  #include <iostream>

  ConcreteBuilderB::ConcreteBuilderB()
  {

  }
  void ConcreteBuilderB::BuildPart1()
  {
    std::cout << "ConcreteBuilderB::BuildPart1\n";
  }
  void ConcreteBuilderB::BuildPart2()
  {
    std::cout << "ConcreteBuilderB::BuildPart2\n";
  }

  //main.cpp
  #include "director.h"
  #include "concretebuildera.h"
  #include "concretebuilderb.h"

  #include <iostream>

  using namespace std;

  int main()
  {
    Director *director = new ConcreteBuilderA();

    director->Construct();

    delete director;

    director = new ConcreteBuilderB();
    director->Construct();

    delete director;

    return 0;
  }
#+END_SRC  
