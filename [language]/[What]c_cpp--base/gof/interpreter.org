#+TITLE: [What] 解析器
#+DATE:<2020-11-20 五> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, GoF
#+NAME: <interpreter.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习视频：<<c++ 设计模式>>

从封装变化角度对模式分类：
- 组件协作：通过 *晚期绑定* ，来实现框架和应用之间的松耦合
  + Template Method
  + Strategy
  + Observer / Event
- 单一职责
  + Decorator
  + Bridge
- 对象创建
  + Factory Method
  + Abstract Factory
  + Prototype
  + Builder
- 对象性能
  + Singleton
  + Flyweight
- 接口隔离
  + Facade
  + Proxy
  + Mediator
  + Adapter
- 状态变化
  + Memento
  + State
- 数据结构
  + Composite
  + Iterator
  + Chain of Resposibility
- 行为变化
  + Command
  + Visitor
- 领域问题：结合特定邻域，将问题抽象为语法规则，从而给出在该邻域下的一般性解决方案
  + Interpreter

#+BEGIN_HTML
<!--more-->
#+END_HTML
* 问题
#+BEGIN_EXAMPLE
  i在软件构建过程中，如果某一特定领域的问题比较复杂，类似的结构不断重复出现，如果使用普通的编程方式来实现将面临非常频繁的变化。

  在这种情况下，将特定领域的问题表达为某种语法规则下的句子，然后构建一个解释器来解释这样的句子，从而达到解决问题的目的。
#+END_EXAMPLE
* 解决
#+BEGIN_EXAMPLE
  给定一个语言，定义它的文法的一种表示，并定义一种解释器，这个解释器使用该表示来解释语言中的句子。
#+END_EXAMPLE
Interpreter 模式的应用场合是 Interpreter 模式应用中的难点，只有满足“业务规则频繁变化”，且类似的结构不断重复出现，
并且容易抽象为语法规则的问题“才适合使用 Interpreter”模式

使用 Interpreter 模式来表示文法规则，从而可以使用面向对象技巧来方便地“扩展”文法

Interpreter 模式比较适合简单的文法表示，对于复杂的文法表示，Interpreter 模式会产生比较大的类层次结构，
需要求助于语法分析生成器这样的标准工具。

按照 UML 类图的简易逻辑如下：
[[./pic/interpreter.jpg]]


