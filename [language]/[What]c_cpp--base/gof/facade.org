#+TITLE: [What] 门面模式
#+DATE:<2020-11-13 五> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, GoF
#+NAME: <facade.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习视频：<<c++ 设计模式>>

从封装变化角度对模式分类：
- 组件协作：通过 *晚期绑定* ，来实现框架和应用之间的松耦合
  + Template Method
  + Strategy
  + Observer / Event
- 单一职责
  + Decorator
  + Bridge
- 对象创建
  + Factory Method
  + Abstract Factory
  + Prototype
  + Builder
- 对象性能
  + Singleton
  + Flyweight
- 接口隔离：添加一层间接（稳定）接口来隔离本来互相紧密关联的接口
  + Facade
  + Proxy
  + Mediator
  + Adapter
- 状态变化
  + Memento
  + State
- 数据结构
  + Composite
  + Iterator
  + Chain of Resposibility
- 行为变化
  + Command
  + Visitor
- 领域问题
  + Interpreter

#+BEGIN_HTML
<!--more-->
#+END_HTML
* 问题
#+BEGIN_EXAMPLE
  客户和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦合面临很多变化的挑战。

  如何简化外部客户程序和系统之间的交互接口？如何将外部客户程序的演化和内部子系统的变化之间的依赖相互解耦？
#+END_EXAMPLE
* 解决
#+BEGIN_EXAMPLE
  为子系统中的一组接口提供一个一致（稳定）的界面，Facade 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用（复用）。
#+END_EXAMPLE

从客户程序的角度来看，Facade 模式简化了整个组件系统的接口，对于组件内部与外部客户程序来说，
达到了一种“解耦”的效果，内部子系统的任何变化不会影响 Facade 接口的变化。

Facade 设计模式更注重从架构的层次去看整个系统，而不是单个类的层次。Facade 很多时候更是一种架构设计模式。

Facade 设计模式并非一个集装箱，可以任意的放进任何多个对象。
Facade 模式中的组件内部应该是“相互耦合关系比较大的一系列组件”，而不是一个简单的功能集合。
