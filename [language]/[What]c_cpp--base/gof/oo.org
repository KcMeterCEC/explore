#+TITLE: [What] 面向对象设计原则
#+DATE:<2020-10-09 五> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, GoF
#+NAME: <oo_principle.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习视频：<<c++ 设计模式>>

面向对象是将对象作为一个独立的个体，自己负责自己的部分实现。而框架是以抽象的思维方式完成对这些对象的使用。
在需要新增一个对象时，应该要做到不需要修改框架就可以完成该对象的加入。

以前写代码都还是一个面向过程的思维方式，每次需要新增对象都还需要修改框架的多处代码，在框架中完成对 *每个具体对象* 的分别调用。
很明显这在前期开发、后期维护都需要消耗大量的精力。

在理解面向对象设计原则的基础上来学习设计模式才能够真正理解，而不是仅仅记住那堆代码。
#+BEGIN_HTML
<!--more-->
#+END_HTML 
* 依赖倒置原则（DIP）
- 高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定）
- 抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）

抽象层规定了低层模块应该需要填充的接口，高层模块使用抽象来间接的使用低层模块。

以 c++ 的方式来理解就是：
1. 为低层模块定义一个抽象类，该类提供了一些虚函数需要低层模块来填充。
2. 低层模块继承自抽象类，完成虚函数的重载，并将自己的地址加入抽象类列表。
3. 高层模块通过操作抽象类列表，在多态的支持下，来达到间接使用低层类方法的目的。
* 开放封闭原则（OCP）
- 对扩展开放，对更改封闭
- 类模块应该是可扩展的，但是不可修改
  
以 c++ 的方式来理解就是：当需要满足新的需求时，仅需要增加新的文件（类）来完成对现有系统的扩展，而原来框架部分是可以不用动的。
* 单一职责原则（SRP）
- 一个类应该仅有一个引起它变化的原因
- 变化的方向隐含着类的责任
  
简单来讲就是类的目的要简单明确，职责的简单明确就不会让这个类设计得过于复杂。
* Liskov 替换原则（LSP）
- 子类必须能够替换它们的基类（IS-A）
- 继承表达类型抽象
  
复合、委托及继承之间的关系要明确，不然本应该用复合来实现的却用了继承这就违反了这一原则。
* 接口隔离原则（ISP）
- 不应该强迫客户程序依赖它们不用的方法
- 接口应该小而完备
  
只暴露必要的接口，降低类之间的耦合。
* 优先使用对象组合，而不是类继承
- 类继承通常为“白箱复用”，对象组合通常为“黑箱复用”
- 继承在某种程序上破坏了封装性，子类父类耦合度高。而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。
* 封装变化点
- 使用封装来创建对象之间的分界层，让设计者可以在分界层一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。
* 针对接口编程，而不是针对实现编程
- 不将变量类型声明为某个特定的具体类，而是声明为某个接口
- 客户程序无需获知对象的具体类型，只需要知道对象所具有的接口
- 减少系统中各部分的依赖关系，从而实现“高内聚、松耦合”的类型设计方案。
