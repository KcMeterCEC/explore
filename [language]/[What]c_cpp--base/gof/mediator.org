#+TITLE: [What] 中介者模式
#+DATE:<2020-11-17 二> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, GoF
#+NAME: <mediator.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习视频：<<c++ 设计模式>>

从封装变化角度对模式分类：
- 组件协作：通过 *晚期绑定* ，来实现框架和应用之间的松耦合
  + Template Method
  + Strategy
  + Observer / Event
- 单一职责
  + Decorator
  + Bridge
- 对象创建
  + Factory Method
  + Abstract Factory
  + Prototype
  + Builder
- 对象性能
  + Singleton
  + Flyweight
- 接口隔离
  + Facade
  + Proxy
  + Mediator
  + Adapter
- 状态变化
  + Memento
  + State
- 数据结构
  + Composite
  + Iterator
  + Chain of Resposibility
- 行为变化
  + Command
  + Visitor
- 领域问题
  + Interpreter

#+BEGIN_HTML
<!--more-->
#+END_HTML
* 问题
#+BEGIN_EXAMPLE
  在软件构建过程中，经常会出现多个对象互相关联交互的情况，对象之间常常会维持一种复杂的引用关系，
  如果遇到一些需求更改，这种直接的引用关系将面临不断的变化。

  在这种情况下，我们可使用一个“中介对象”来管理对象间的关联关系，避免相互交互的对象之间的紧耦合引用关系，
  从而更好的抵御变化。
#+END_EXAMPLE
* 解决
#+BEGIN_EXAMPLE
  用一个中介对象来封装（封装变化）一系列的对象交互。
  中介者使各对象不需要显式的相互引用（编译时依赖 -> 运行时依赖），从而使其耦合松散（管理变化），
  而且可以独立的改变它们之间的交互。
#+END_EXAMPLE

将多个对象间复杂的关联关系解耦，Mediator 模式将多个对象间的控制逻辑进行集中管理，
变“多个对象互相关联”为“多个对象和一个中介者关联”，简化了系统的维护，抵御了可能的变化。

随着控制逻辑的复杂化，Mediator 具体对象的实现可能相当复杂，这时候可以对 Mediator 对象进行分解处理。

Facade 模式是解耦系统间（单向）的对象关联关系，Mediator 模式是解耦系统内各个对象之间（双向）的关联关系。

按照 UML 类图的简易逻辑如下：
[[./pic/mediator.jpg]]

如上图所示：通过 Mediator，ConcreteColleague1 和 ConcreteColleague2 的直接依赖关系便处理掉了。


