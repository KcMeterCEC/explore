#+TITLE: [What] 备忘录模式
#+DATE:<2020-11-18 三> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, GoF
#+NAME: <Memento.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习视频：<<c++ 设计模式>>

从封装变化角度对模式分类：
- 组件协作：通过 *晚期绑定* ，来实现框架和应用之间的松耦合
  + Template Method
  + Strategy
  + Observer / Event
- 单一职责
  + Decorator
  + Bridge
- 对象创建
  + Factory Method
  + Abstract Factory
  + Prototype
  + Builder
- 对象性能
  + Singleton
  + Flyweight
- 接口隔离
  + Facade
  + Proxy
  + Mediator
  + Adapter
- 状态变化
  + Memento
  + State
- 数据结构
  + Composite
  + Iterator
  + Chain of Resposibility
- 行为变化
  + Command
  + Visitor
- 领域问题
  + Interpreter

#+BEGIN_HTML
<!--more-->
#+END_HTML
* 问题

#+BEGIN_EXAMPLE
  在软件构建过程中，某些对象的状态在转换过程中，可能由于某种需要，要求程序能够回溯到对象之前处于某个点时的状态。
  如果使用一些公有接口来让其他对象得到对象的状态，便会暴露对象的细节实现。

  如何实现对象状态的良好保存与恢复？但同时又不会因此而破坏对象本身的封装性。
#+END_EXAMPLE
* 解决
#+BEGIN_EXAMPLE
  在不破坏封装性的前提下，捕获一个对象的内部状态，并在改对象之外保存这个状态。
  这样以后就可以将该对象恢复到原先保存的状态。
#+END_EXAMPLE

备忘录（Memento）存储原发器（Originator）对象的内部状态，在需要时恢复原发器状态。

Memento 模式的核心是信息隐藏，即 Originator 需要向外界隐藏信息，保持其封装性。
但同时又需要将状态保持到外界。

由于现代语言运行时都具有相当的对序列化支持，因此往往采用效率较高、又较容易正确实现的序列化方案来实现 Memento 模式。

按照 UML 类图的简易逻辑如下：
[[./pic/memento.jpg]]
