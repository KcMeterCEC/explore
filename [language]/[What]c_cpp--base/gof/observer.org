#+TITLE: [What] 观察者模式
#+DATE:<2020-10-13 二> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, GoF
#+NAME: <observer.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习视频：《c++ 设计模式》

从封装变化角度对模式分类：
- 组件协作：通过 *晚期绑定* ，来实现框架和应用之间的松耦合
  + Template Method
  + Strategy
  + Observer / Event
- 单一职责
  + Decorator
  + Bridge
- 对象创建
  + Factory Method
  + Abstract Factory
  + Prototype
  + Builder
- 对象性能
  + Singleton
  + Flyweight
- 接口隔离
  + Facade
  + Proxy
  + Mediator
  + Adapter
- 状态变化
  + Memento
  + State
- 数据结构
  + Composite
  + Iterator
  + Chain of Resposibility
- 行为变化
  + Command
  + Visitor
- 领域问题
  + Interpreter

#+BEGIN_HTML
<!--more-->
#+END_HTML
* 问题
在软件构建过程中，我们需要为某些对象建立一种“通知依赖关系”：一个对象（目标对象）的状态发送改变，所有依赖对象（观察者）都将得到通知。
如果这样的依赖关系过于紧密，将使软件不能很好的抵御变化。

使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系，从而实现软件体系结构的松耦合。
* 解决
#+BEGIN_EXAMPLE
定义对象间的一种一对多（变化）的依赖关系，以便当一个对象（Subject）的状态发生改变时，
所有依赖于它的对象都得到通知并自动更新。
#+END_EXAMPLE
- 使用面向对象的抽象，Observer 模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达到松耦合
- 目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。
- 观察者自己决定是否需要订阅通知，目标对象对此一无所知
- Observer 模式是基于事件的 UI 框架中非常常用的设计模式，也是 MVC 架构模式的一个重要组成部分

以 c++ 的角度来理解就是：
1. 定义一个基类，该基类定义一个虚函数用于表示发送通知的接口。
2. 观察者继承该基类，重写该接口实现，以完成接收到该通知后对应的动作。
3. 生产者以委托列表的方式包含基类，在需要发送通知时，遍历该列表依次执行接口。

按照 UML 类图的简易逻辑如下：

[[./pic/observer.jpg]]

* 示例
#+BEGIN_SRC cpp
  //file: observer.h
  #ifndef OBSERVER_H
  #define OBSERVER_H


  class Observer
  {
  public:
    virtual ~Observer();

    virtual void update(int i);
  };

  #endif // OBSERVER_H
  //file: observer.cpp
  #include "observer.h"

  #include <iostream>
  Observer::~Observer()
  {

  }

  void Observer::update(int i)
  {
    std::cout << "observer received value: " << i << std::endl;
  }
  //file: concreteobservera.h
  #ifndef CONCRETEOBSERVERA_H
  #define CONCRETEOBSERVERA_H

  #include "observer.h"

  class ConcreteObserverA : public Observer
  {
  public:
    ConcreteObserverA();

    void update(int i) override;
  };

  #endif // CONCRETEOBSERVERA_H
  //file: concreteobservera.cpp
  #include "concreteobservera.h"

  #include <iostream>
  ConcreteObserverA::ConcreteObserverA()
  {

  }
  void ConcreteObserverA::update(int i)
  {
    std::cout << "ConcreteObserverA received value " << i << std::endl;
  }
  //file: concreteobserverb.h
  #ifndef CONCRETEOBSERVERB_H
  #define CONCRETEOBSERVERB_H

  #include "observer.h"

  class ConcreteObserverB : public Observer
  {
  public:
    ConcreteObserverB();

    void update(int i) override;
  };

  #endif // CONCRETEOBSERVERB_H
  //file: concreteobserverb.cpp
  #include "concreteobserverb.h"

  #include <iostream>
  ConcreteObserverB::ConcreteObserverB()
  {

  }
  void ConcreteObserverB::update(int i)
  {
    std::cout << "ConcreteObserverB received value " << i << std::endl;
  }
  //file subject.h
  #ifndef SUBJECT_H
  #define SUBJECT_H

  #include "observer.h"

  #include <list>
  class Subject
  {
  public:
    Subject();
    void attach(Observer *observer);
    void detach(Observer *observer);
    void notify(void);
  private:
    std::list<Observer *> observer_list_;
  };
  //file subject.cpp
  #include "subject.h"

  Subject::Subject()
  {

  }
  void Subject::attach(Observer *observer)
  {
    observer_list_.push_back(observer);
  }
  void Subject::detach(Observer *observer)
  {
    observer_list_.remove(observer);
  }
  void Subject::notify(void)
  {
    for(auto v : observer_list_)
      {
        v->update(5);
      }
  }
  //file main.cpp
  #include "subject.h"
  #include "concreteobservera.h"
  #include "concreteobserverb.h"

  #include <iostream>

  using namespace std;

  int main()
  {
    Subject sub;
    ConcreteObserverA observer_a;
    ConcreteObserverB observer_b;

    sub.attach(&observer_a);
    sub.notify();

    sub.attach(&observer_b);
    sub.notify();

    return 0;
  }
#+END_SRC

