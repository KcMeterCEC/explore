#+TITLE: [What] c++ 标准库 vector
#+DATE:<2020-01-01 三> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, primer
#+NAMA: <language_cpp_vector.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习书籍：<<primer c++ 5th>>

因为标准库中的 =vector= 类使用很频繁，所以这里也记录一下。
#+BEGIN_HTML
<!--more-->
#+END_HTML 
* 基础
** 定义和初始化对象
=vector= 类是可变长的对象集合，同一个集合中的对象类型都相同，比 c 中的结构体数组可是好用太多了。
- 至于保存的是什么对象，则尤其尖括号内的信息决定

在使用 =vector= 前，需要包含其头文件，并且其名称也是定义在命名空间 =std= 中：
#+BEGIN_SRC c++
  #include <vector>
  using std::vector;
#+END_SRC 

定义和初始化常用方法如下：
| 格式                    | 说明                                                            |
|-------------------------+-----------------------------------------------------------------|
| vector<T> v1            | v1 是一个空集合，每个元素的类型是 T，执行默认初始化             |
| vector<T> v2(v1)        | v2 是元素为 T 的对象集合，其内容目前和 v1 一样（初始化）        |
| vector<T> v2 = v1       | 同上，这种方式是拷贝初始化                                      |
| vector<T> v3(n, val)    | v3 是元素为 T 的对象集合，目前有 n 个元素，其值都为 val         |
| vector<T> v4(n)         | v4 是元素为 T 的对象集合，目前有 n 个元素，每个元素是默认初始值 |
| vector<T> v5{a,b,c...}  | v5 是元素为 T 的对象集合，元素的值由列表初始化                  |
| vector<T> v5={a,b,c...} | 同上                                                            |

- 当使用圆括号时，有一个值时代表元素的数量，执行默认初始化。有两个值时，代表元素数量和初始值。
  + 如果园括号中不是数值，则是该对象内容的副本
- 当使用花括号时，则代表对应元素的初始化列表。
  + 但如果花括号中的值不能用来列表初始化，则其含义就和圆括号一致了
#+BEGIN_SRC c++
  vector<int> ivec; //创建一个元素是 int 型的对象集合
  vector<Sales_item> Sales_vec;//创建一个元素是 Sales_item 类的对象集合
  vector<vector<string>> file;//创建一个元素是 vector 模板的对象集合，其中每个元素都是 string 对象的集合
  vector<string> v5{"hi"};//列表初始化 v5 有一个元素
  vector<string> v6("hi");//错误，在圆括号情况下不能赋值元素
  vector<string> v7{10};//因为 10 不能赋值元素，所以它代表 v7 有 10 个默认初始化元素
  vector<string> v8{10, "hi"};//因为 10 不能赋值元素，所以它代表 v8 有 10 个值为 "hi" 的元素
#+END_SRC
** 常用方法
| 方法             | 说明                                                          |
|------------------+---------------------------------------------------------------|
| v.push_back(val) | 将 val 压入到 vector 对象的尾端                               |
| v.empty()        | 如果 v 为空，返回真                                           |
| v.size()         | 返回 v 元素个数                                               |
| v[n]             | 返回 v 中第 n 个位置上元素的引用                            |
| v1 = v2          | 用 v2 中元素的拷贝替换 v1 中的元素                            |
| v1 = {a,b,c...}  | 用列表中元素的拷贝替换 v1 中的元素                            |
| v1 == v2         | v1 和 v2 相等当且仅当它们的元素数量相同且对应位置的元素值相同 |
| v1 != v2         | v1 和 v2 不完全相等                                           |
| <，<=，>，>=     | 以字典顺序进行比较                                            |

需要注意的是：如果循环体内部包含有向 vector 对象添加元素的语句，则 *不能使用范围 for 循环！*
- 因为这会无限遍历下去
