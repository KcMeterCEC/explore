#+TITLE: [What] c++ 面向对象程序设计
#+DATE:<2020-03-30 一> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, primer
#+NAMA: <language_cpp_oop.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习书籍：<<c++ primer 5th>>

再来复习一下 OOP(object-oriented programming) 基本思想：数据抽象与封装、继承和动态绑定。
- 数据抽象与封装：对于类使用者来说，可以忽略类的具体实现，而使用其接口来达成其目的
- 继承：可以更容易地定义与其他类相似但不完全相同的新类
- 动态绑定：使用彼此相似的类编写程序时，可以在一定程度上忽略掉它们的区别
#+BEGIN_HTML
<!--more-->
#+END_HTML 
* OOP:概述
** 继承（inheritance）
继承表示多个类联系在一起构成的层次关系，层次的根部为 *基类（base class）* ，其他类直接或间接地从基类继承而来，这些类称为 *派生类（derived class）* 。
- 基类定义所有类共同拥有的成员
- 派生类定义各种特有的成员
  
对于某些函数，基类希望它的派生类各自定义适合自身的版本，此时基类就将这些函数声明成 *虚函数（virtual function）* 。

而派生类必须通过使用 *类派生列表（class derivation list）* 指出它是从哪个或哪些基类继承而来的。
- 类派生列表的形式是：首先是一个冒号，后面紧跟以逗号分隔的基类列表，其中每个基类前面可以有访问说明符。

派生类必须在其内部对所有重新定义的虚函数进行声明，最好加上 =override= 关键字以指明这个函数改写了基类的虚函数。
** 动态绑定（dynamic binding）
通过使用动态绑定，可以用同一段代码分别处理基类和派生类对象，这取决于传入的对象类型。
- 当我们使用基类的引用或指针调用一个 *虚函数* 时将发生动态绑定。
