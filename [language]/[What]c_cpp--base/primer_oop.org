#+TITLE: [What] c++ 面向对象程序设计
#+DATE:<2020-03-30 一> 
#+TAGS: c++
#+LAYOUT: post 
#+CATEGORIES: language, c/c++, primer
#+NAMA: <language_cpp_oop.org>
#+OPTIONS: ^:nil
#+OPTIONS: ^:{}

学习书籍：<<c++ primer 5th>>

再来复习一下 OOP(object-oriented programming) 基本思想：数据抽象与封装、继承和动态绑定。
- 数据抽象与封装：对于类使用者来说，可以忽略类的具体实现，而使用其接口来达成其目的
- 继承：可以更容易地定义与其他类相似但不完全相同的新类
- 动态绑定：使用彼此相似的类编写程序时，可以在一定程度上忽略掉它们的区别
#+BEGIN_HTML
<!--more-->
#+END_HTML 
* OOP:概述
** 继承（inheritance）
继承表示多个类联系在一起构成的层次关系，层次的根部为 *基类（base class）* ，其他类直接或间接地从基类继承而来，这些类称为 *派生类（derived class）* 。
- 基类定义所有类共同拥有的成员
- 派生类定义各种特有的成员
  
对于某些函数，基类希望它的派生类各自定义适合自身的版本，此时基类就将这些函数声明成 *虚函数（virtual function）* 。

而派生类必须通过使用 *类派生列表（class derivation list）* 指出它是从哪个或哪些基类继承而来的。
- 类派生列表的形式是：首先是一个冒号，后面紧跟以逗号分隔的基类列表，其中每个基类前面可以有访问说明符。

派生类必须在其内部对所有重新定义的虚函数进行声明，最好加上 =override= 关键字以指明这个函数改写了基类的虚函数。
** 动态绑定（dynamic binding）
通过使用动态绑定，可以用同一段代码分别处理基类和派生类对象，这取决于传入的对象类型。
- 当我们使用基类的引用或指针调用一个 *虚函数* 时将发生动态绑定。
* 定义基类和派生类
** 定义基类
基类的定义遵从如下基本原则：
- 需要具有默认构造函数，如果默认使用类内初始值，那么可以在声明时为其指定 =default= 属性，然编译器来生成函数体
  + 为类定义默认构造函数总是一个好的习惯
- 需要派生类各自定义适合自身的版本，那么需要将此函数声明为虚函数(在函数前加关键字 =virtual= )
  + 关键字 =virtual= 只能出现在类内部的声明语句之前， *不能用于类外部的函数定义*
  + 任何构造函数之外的非静态函数，都可以是虚函数
  + 如果基类把一个函数声明成虚函数，则该函数在派生类中隐式的也是虚函数
- 定义一个虚析构函数，即使该函数不执行任何实际操作
** 定义派生类
派生类的定义遵从如下基本原则：
- 必须通过 *类派生列表（class derivation list）* 明确指出它是从哪个（哪些）基类继承而来的。
  + 类派生列表的形式是：首先一个冒号，后面紧跟以逗号分隔的基类列表，每个基类前面一般带有访问说明符：public,protected,private
    + 如果一个派生是公有的，则基类的公有成员也是派生类接口的组成部分。并且公有派生类型对象可以绑定到基类的引用或指针上。
- 派生类可以将其继承而来的成员函数中需要覆盖的那些函数重新声明
  + 如果派生类没有覆盖其基类中的某个虚函数，则该虚函数的行为类似于其他普通成员，派生类会直接继承其在基类中的版本
- 派生类构造函数通过构造函数初始化列表来将实参传递给基类构造函数
  + 首先初始化基类，然后按照声明的顺序依次初始化派生类的成员
    
因为在派生类对象中含有与其基类对应的组成部分，所以可以把派生类的对象当成基类对象来使用，并且也能将基类的指针或引用绑定到派生类对象中的基类部分上。
#+BEGIN_SRC c++
  Quote item; //基类对象
  Bulk_quote bulk; //派生类对象
  Quote *p = &item;
  p = &bulk; //p 指向 bulk 的 Quote 部分
  Quote &r = bulk; //r 绑定到 bulk 的 Quote 部分
#+END_SRC 

如果基类定义了一个静态成员，则在整个继承体系中只存在该成员的唯一定义。 *不论从基类中派生出来多少个派生类，对于每个静态成员来说都只存在唯一实例。*
#+BEGIN_SRC c++
  class Base
  {
  public:
    static void statmem();
  };
  class Derived : public Base
  {
  public:
    void f(const Derived&);
  };

  void Derived::f(const Derived & derived_obj)
  {
    Base::statmem();
    Derived::statmem();
    derived_obj.statmem();
    statmem();
  }
#+END_SRC

如果不想一个类作为基类，那么可以在类名后跟关键字 =final= ：
#+BEGIN_SRC c++
  class NoDerived final //NoDerived 不能作为基类
  {

  };
  class Base
  {

  };
  class Last final : Base //last 不能作为基类
  {

  };
#+END_SRC
** 类型转换与继承
基类的指针或引用可以绑定到派生类的对象上，这具有极为重要的含义：
#+BEGIN_EXAMPLE
  当使用基类的引用（或指针）时，实际上我们并不清楚该引用（或指针）所绑定对象的真实类型。
  该对象可能是基类的对象，也可能是派生类的对象。
#+END_EXAMPLE
*** 静态类型与动态类型
当使用存在继承关系的类型是，必须将一个变量或其他表达式的 *静态类型（static type）* 与该表达式表示对象的 *动态类型(dynamic type)* 区分开来。
- 静态类型是在编译时总是已知的，它是变量声明时的类型或表达式生成的类型。
- 动态类型是在运行时才可知的，它是变量或表达式表示的内存中的对象的类型。
  + 如果表达式既不是引用也不是指针，则它的动态类型永远与静态类型一致
    
- 从派生类向基类的类型转换只对指针或引用类型有效。
- 基类向派生类不存在隐式类型转换
- 和任何其他成员一样，派生类向基类的类型转换也可能会由于访问受限而变得不可行
- 当派生类中定义了拷贝控制成员，那就可以将一个派生类对象拷贝、移动或赋值给一个基类对象。
  + 这种操作只处理派生类对象的基类部分。
* 虚函数
当某个虚函数通过指针或引用调用时，编译器产生的代码直到运行时才能确定应该调用哪个版本的函数。
被调用的函数是与绑定到指针或引用上的对象的动态类型相匹配的那个。

基类中的虚函数在派生类中隐含地也是一个虚函数，当派生类覆盖了某个虚函数时，该函数在基类中的形参必须与派生类中的形参严格匹配。
- 如果派生类中新定义的函数与基类的形参列表不同，那么这个函数被认为是新定义的函数，而不是覆盖掉基类中的版本。
  + 要养成好的习惯，在覆盖的虚函数后加 =override= 关键字，以让编译器可以检查错误。
  + 也可以在函数后加入 =final= ，这样在之后的任何尝试覆盖该函数的操作都将引发错误。
** 虚函数与默认实参
如果通过基类的引用过指针调用函数，则 *使用基类中定义的默认实参，* 即使实际运行的是派生类中的函数版本也是如此。
- 如果虚函数使用默认实参，则基类的派生类中定义的默认实参最好一致，不然结果会很迷惑人！
** 显示避免多态
可以使用作用域云算符强制执行虚函数的某个特定版本：
#+BEGIN_SRC c++
  //强行调用基类中定义的函数版本而不管 baseP 的动态类型到底是什么
  double undiscounted = baseP->Quote::net_price(42);
#+END_SRC

** 虚析构函数
同样的，当指针指向继承体系中的某个类型，则有可能出现指针的静态类型与被删除的动态类型不符的情况。
这种情况下需要将基类中的析构函数定义成虚函数，这样利用多态的特性，就可以先执行派生类的析构函数。
* 抽象基类
可以在普通的虚函数声明语句分好之前书写 “=0”，就可以将一个虚函数说明为纯虚（pure virtual）函数。
- 纯虚函数不需要定义
  
含有（或者未经覆盖直接继承）纯虚函数的类是 *抽象基类（abstract base class）* ，抽象基类负责定义接口。
- 不能直接创建一个抽象基类，因为它的目的是为了指定接口

* 访问控制与继承
protected 说明符可以看做是 public 和 private 中和后的产物：
- 和私有成员类似，受保护的成员对于类的用户来说是不可访问的
- 和公有成员类型，受保护的成员对于派生类的成员和友元来说是可访问的
- 派生类的成员或友元只能通过派生类对象来访问基类的受保护成员。派生类对于一个基类对象中的受保护成员没有任何访问特权。
