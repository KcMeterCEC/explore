* [What]c/c++ --> base

参考网站：[[www.runoob.com/cplusplus][菜鸟教程]]

- [[#基本环境][基本环境]]
- [[#基本语法][基本语法]]
- [[#数据类型][数据类型]]
- [[#存储类][存储类]]
- [[#运算符][运算符]]
- [[#函数][函数]]
- [[#数组][数组]]
- [[#字符串][字符串]]
- [[#引用][引用]]
- [[#输入和输出][输入和输出]]
- [[#对象和类][对象和类]]
- [[#继承][继承]]

** 基本环境
*** g++ 应用说明
- g++ filename.cpp : 编译文件
- g++ filename.cpp -o outputName : 指定输出的可执行文件名
- g++ file1.cpp file2.cpp -o outputName: 编译多个文件
- g++ -g -Wall -std=c++11 fileName.cpp : 包含调试信息，使能警告，使用C++11标准
常用命令选项
| 选项         | 解释                                               |
|--------------+----------------------------------------------------|
| -ansi        | 只支持 ANSI标准的C语法，将禁止 GNUC 的某些特性语法 |
| -c           | 只编译生成目标文件                                 |
| -DMACRO      | 以字符串“1”定义 MACRO 宏                           |
| -DMACRO=DEFN | 以字符串“DEFN”定义MACRO宏                          |
| -E           | 只进行预编译过程                                   |
| -g           | 生成调试信息                                       |
| -IDIRECTORY  | 指定额外的头文件搜索路径 DIRECTORY                 |
| -LDIRECTORY  | 指定额外的库函数搜索路径 DIRECTORY                 |
| -ILIBRARY    | 链接时搜索指定函数库 LIBRARY                       |
| -m486        | 针对486进行代码优化                                |
| -o           | 指定生成的输出文件                                 |
| -Ox          | 进行 X 优化，X最大为3                              |
| -shared      | 生成共享目标文件                                   |
| -static      | 禁止使用共享链接                                   |
| -UMACRO      | 取消对宏 MACRO 的定义                              |
| -w           | 不生成任何警告信息                                 |
| -Wall        | 生成所有警告信息                                   |

** 基本语法
#+BEGIN_SRC c++
#include <iostream>
using namespace std;

int main()
{
        cout << "Hello world";
        return 0;
}
#+END_SRC
相比C,C++增加了以下关键字:
| new              | this         | operator    | throw      |
| explicit         | private      | export      | protected  |
| try              | public       | catch       | typeid     |
| reinterpret_cast | typename     | friend      | const_cast |
| virtual          | delete       | static_cast | wchar_t    |
| mutable          | dynamic_cast | namespace   | template   |
** 数据类型
*** 基本类置类型
相比C来说,C++多了一个 =wchar_t= 类型， 用于显示unicode码。

对于常量来说，当前面以 ‘L’ 开头时，则表示它是一个宽字符常量（例如 L'x'),
此时它就是以 =wchar_t= 类型来存储的。
** 存储类
相比较C，C++增加了以下存储类：
- mutable
- thread_local(C++11)

=从C++11开始，auto关键字不再是C++存储类说明符，且 register关键字被弃用。=
*** auto
在从C++11及以后， auto关键字用于两种情况：
- 声明变量时根据初始化表达式自动推断该变量的类型
- 声明函数时函数返回值的占位符
#+BEGIN_SRC c++
auto f = 3.14;//double
auto s("hello"); //const char *
auto z = new auto(9);// int *
auto x1 = 5, x2 = 5.0, x3 = 'r';//错误，必须初始化为同一类型
#+END_SRC
*** static 
当 =static= 用于类数据成员上时，会导致仅有一个成员的副本被类的所有对象共享。
*** mutable
mutable 仅仅适用于类对象，它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。
*** thread_local
thread_local 仅仅可在它在其上创建的线程上访问。变量在创建线程时创建，并在销毁线程时销毁。

每个线程都有其自己的变量副本。

thread_local 不能用于函数的声明或定义。
#+BEGIN_SRC c++
thread_local int x;
class X{
        static thread_local std::string s;
};
static thread_local std::string X::s;

void foo()
{
        thread_local std::vector<int> v;
}
   
#+END_SRC
** 运算符
*** 强制转换
C++支持多种强制转换运算符：
- const_cast<type>(expr) : const_cast 运算符用于修改类型的 const/volatile属性。
除了const或volatile属性之外，目标类型必须与源类型相同。主要用来操作所传对象的const属性，可以加上const属性，也可以去掉const属性
- dynamic_cast<type>(expr):在运行时执行转换
- reinterpret_cast<type>(expr):把指针改为其他类型的指针
- static_cast<type>(expr):非动态转换，没有运行时类检查来保证转换的安全性。

** 函数
- 函数可以使用引用来修改实际参数。
- 定义函数时可以为参数列表后边的每个参数指定默认值，当调用函数时，如果实际参数值留空，则使用这个默认值。
*** lambda 函数与表达式
C++11提供了对匿名函数的支持，称为 Lambda 函数（表达式）。

Lambda 表达式把函数看作对象。

表达式形式如下：
=[capture](parameters)->return-type{body}= >> =[](int x, int y){return x < y;}=
如果没有返回值可以表示为：
=[capture](parameters){body}= >> =[]{++global_x;}=

** 数组
Array 是固定大小的，不能增加额外的元素，当我们想定义不固定大小的字符时，可以使用 vector(向量)标准库。
#+BEGIN_SRC c++
#include <iostream>
#include <vector>
using namespace std;

int main{
        vector<int> vec;
        int i;

        cout << "vector size = " << vec.size() <<endl;
        for(i = 0; i < 5; i++){
                vec.push_back(i);
        }

        cout << "extened vector size = " << vec.size() << endl;

        return 0;
}
#+END_SRC

** 字符串
*** String 类
#+BEGIN_SRC c++
#include <iostream>
#include <string>

using namespace std;

int main()
{
        string str1 = "Hello";
        string str2 = "World";
        string str3;
        int len;

        str3 = str1;
        cout << "str3:" << str3 << endl;

        str3 = str1 + str2;
        cout << "str1 + str2:" << str3 << endl;

        len = str3.size();
        cout << "str3.size():" << len << endl;

        return 0;
}
#+END_SRC
** 引用

引用是变量附属在内存位置的第二个标签。

引用与指针的不同：
- 不存在空引用。引用必须连接到一块合法内存。
- 一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向另一个对象
- 引用必须在创建时被初始化。指针可以在任何时间被初始化。
*** 创建引用
#+BEGIN_SRC c++
int i = 17;
int & r = i;
#+END_SRC
#+BEGIN_SRC c++
#include <iostream>
using namespace std;
int main()
{
        int i;
        double d;

        int& r = i;
        double& s = d;

        i = 5;
        cout << "Value of i:" << i << endl;
        cout << "Value of i reference:" << r <<endl;

        d = 11.7;
        cout << "Value of d:" << d <<endl;
        cout << "Value of d reference:" << s <<endl;

        return 0;
}
#+END_SRC

*** 引用作为参数
#+BEGIN_SRC c++
#include <iostream>
using namespace std;

void swap(int&x, int&y);
int main()
{
        int a = 100;
        int b = 200;
        cout << "交换前，a的值:" << a << endl;
        cout << "交换前, b的值:" << b << endl;

        swap(a, b);
        
        cout << "交换后，a的值:" << a << endl;
        cout << "交换后, b的值:" << b << endl;

        return 0;
}
void swap(int&x, int&y)
{
        int temp;
        temp = x;
        x = y;
        y = temp;

        
}
#+END_SRC
*** 引用作为返回值
使用引用时，需要注意：
- 返回引用时，要注意被引用的对象不能超出作用域。因为它的内存已经被释放了。
- 不能返回函数内部new分配的内存的引用。
- 可以返回类成员的引用，但最好是const。
#+BEGIN_SRC c++
#include <iostream>
using namespace std;

double vals[] = {10.1, 12.6, 33.1, 24.1, 50.0};

double& setValues(int i)
{
        return vals[i];
}
int main()
{
        cout << "改变前的值" << endl;
        for(int i = 0; i < 5; i++)
        {
                cout << "vals[" << i << "]=";
                cout << vals[i] << endl;
        }
        setValues(1) = 20.23;
        setValues(3) = 70.8;

        
        cout << "改变后的值" << endl;
        for(int i = 0; i < 5; i++)
        {
                cout << "vals[" << i << "]=";
                cout << vals[i] << endl;
        }
        return 0;
}
#+END_SRC
** 输入和输出
c++库提供了以下头文件用于IO操作：
- <iostream> : 定义了 =cin,cout,cerr,clog= 对象，对应于标准输入流，标准输出流，非缓冲标准错误流，缓冲标准错误流
- <iomanip>: 通过参数化的流操纵器(setw,setpercision)，来声明对执行标准化IO有用的服务
- <fstream>: 文件处理IO服务
*** 标准输出流(cout)
cout 是 ostream 类的一个实例，cout 与流插入运算符 << 结合使用。
#+BEGIN_SRC c++
#include <iostream>
using namespace std;

int main()
{
        char str[] = "Hello C++";

        cout << "Value of str is: " << str << endl;
}
#+END_SRC
*** 标准输入流(cin)
cin 是 istream 类的一个实例，cin 与流提取运算符 >> 结合使用。
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

int main()
{
        char name[50];

        cout << "Please enter your name:";
        cin >> name;
        cout << "Your name is :" << name << endl;
}
#+END_SRC
*** 标准错误流(cerr)
cerr 是 ostream 类的实例，cerr对象是非缓冲的，与流插入运算符 << 结合使用。
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

int main()
{
        char str[] = "Unable to read ...";

        cerr << "Error message: " << str << endl;
}
#+END_SRC
*** 标准日志流(clog)
clog 是 ostream 类的实例，clog对象是缓冲的，与流插入运算符 << 结合使用。
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

int main()
{
        char str[] = "Unable to read ....";
        clog << "Error message: " << str << endl;
}
#+END_SRC

** 对象和类
面向对象编程(OOP)是一种特殊的,设计程序的概念性方法,C++通过一些特性改进了C语言,使得应用这种方法更容易.下面是最重要的OOP特性:
- 抽象
- 封装和数据隐藏
- 多态
- 继承
- 代码的可重用性
*** 过程性编程和面向对象编程
采用过程性编程方法时,首先考虑要遵循的步骤,然后考虑如何表示这些数据.

采用OOP方法时,首先从用户的角度考虑对象,描述对象所需的数据以及描述用户与数据交互所需的操作.完成对接口的描述后,需要确定如何实现接口和数据存储.
*** 抽象和类
在计算中,为了根据信息与用户之间的接口来表示它,抽象是至关重要的.也就是说,将问题的本质特征抽象出来,并根据特征来描述解决方案.
**** 类型
在C++中,指定基本类型完成了三项工作:
1. 决定数据对象需要的内存数量
2. 决定如何解释内存中的位
3. 决定可以使用数据对象执行的操作或方法

对于内置类型来说,有关操作的信息被内置到编译器中.但在C++中定义用户自定义类型时, *必须自己提供这些信息*.付出这些劳动换来了根据实际需要定制新数据类型的强大功能和灵活性.
**** C++中的类
类是一种将抽象转换为用户定义类型的C++工具,它将数据表示和操纵数据的方法组合成一个整洁的包.

一般来说,类规范由两个部分组成(类声明提供了类的蓝图,而方法定义则提供了细节).
- 类声明: 以数据成员的方式描述数据部分,以成员函数(被称为方法)的方式描述公有接口.
- 类方法定义: 描述如何实现类成员函数.

#+BEGIN_SRC C++
class Stock// 以关键字 "class" 定义类, 类名首字符大写
{
private://只能通过公共成员访问的类成员(数据隐藏)
        char company[30];// 类成员可以是数据也可以是函数
        int shares;
        double share_val;
        double total_val;
        void set_tot() {total_val = shares * share_val;}//在类声明之内定义成员函数,为内联函数.在类声明之外,可以使用 inline 显示设定为内联
public://公共接口的类成员(抽象)
        void acquire(const char *co, int n, double pr);
        void buy(int num, double price);
        void sell(int num, double price);
        void update(double price);
        void show();
};
#+END_SRC
类设计尽可能的将公有接口与实现细节分开.公有接口表示设计的抽象组件,将实现细节放在一起并将它们与抽象分开被称为封装.

数据隐藏是一种封装,将实现的细节隐藏在私有部分中,就像Stock类对 set_tot() 所做的那样,也是一种封装.

封装的另一个例子是将类函数定义和类声明放在不同的文件中.

**** 实现类成员函数
类成员函数相比C的普通函数而言,还有两个特殊的特征:
- 定义成员函数时,使用作用域解析运算符(::)来标识函数所属的类. =void Stock::update(double price)= 作用域解析运算符确定了方法定义对应的类的身份, *类的其他成员函数不必使用作用域解析运算符,就可以使用同类下的方法*.
- 类方法可以访问类的 private 组件.
***** 创建对象
#+BEGIN_SRC C++
Stock kate,joe;

//使用对象的方法与使用结构成员一样
kate.show();
joe.show();
#+END_SRC

*** 类的构造和析构函数
**** 构造函数
在创建对象时,自动初始化对象.
***** 声明和定义构造函数
构造函数和类名相同,并且没有返回类型! 比如:Stock(const string &co, long n = 0, double pr = 0.0);
***** 使用构造函数
#+BEGIN_SRC C++
// 显式地调用
Stock food = Stock{"World Cabbage", 250, 1.25};
//隐式的调用
Stock garment{"Furry Mason", 50, 2.5};
//申请内存
Stock *pstock = new Stock{"Electroshock Games", 18, 19.0};

#+END_SRC
*当没有提供构造函数时,C++将自动提供默认构造函数,不做任何工作*.
***** 使用初始化列表来初始化字段
#+BEGIN_SRC c++
class Line
{
public:
        void setLength(double len);
        double getLength(void);
        Line(double len);
private:
        double length;
};


Line::Line(double len): length(len)
{
        cout << "Object is being created, length = " << len << endl;
}
/// 等价于
Line::Line(double len)
{
        cout << "Object is being created, length = " << len << endl;
        length = len;
}
#+END_SRC
假设类C，具有多个字段 X,Y,Z 需要初始化，多个字段使用逗号分隔
#+BEGIN_SRC c++
C::C(double a, double b, double c): X(a), Y(b), Z(c)
{
        ...
}
#+END_SRC
**** 拷贝构造函数
拷贝构造函数在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象，类的对象需要拷贝时，拷贝构造函数将会被调用，拷贝构造函数用于：
- 通过使用另一个同类型的对象类初始化新创建的对象
- 复制对象，把对象作为参数传递给函数
- 复制对象，从函数返回这个对象

如果在类中没有定义拷贝构造函数，编译器会自动定义一个。 *如果带有指针变量并有动态内存分配或构造函数中有分配其他资源，则它必须有一个拷贝构造函数*.

#+BEGIN_SRC c++
classname (const classname &obj){
}
#+END_SRC
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

class Line
{
public:
        int getLength(void);
        Line(int len);
        Line(const Line &obj);
        ~Line();
private:
        int *ptr;
                
};

Line::Line(int len)
{
        cout << "调用构造函数" << endl;
        ptr = new int;
        ,*ptr = len;
}
Line::Line(const Line &obj)
{
        cout << "调用拷贝构造函数并为指针 ptr 分配内存" << endl;
        ptr = new int;
        ,*ptr = *obj.ptr;
}
Line::~Line(void)
{
        cout <<"释放内存"<<endl;
        delete ptr;
}
int Line::getLength(void)
{
        return *ptr;
}

int main()
{
        Line line(10);

        Line line2 = line;

        return 0;
}
#+END_SRC
**** 析构函数
对象过期时,程序将自动调用一个特殊的成员函数,完成清理工作.析构函数的名称是在类名前加上 "~",因此 stock 类的析构函数为 ~Stock().
*并且没有参数也没有返回!*.

和构造函数一样,如果程序员没有提供析构函数,编译器将隐式的声明一个默认析构函数.
**** const 成员函数
为了保证方法不会修改对象的数据,C++规定将 const 关键字放在函数括号后面. 比如: void Stock::show() const;

*** 友元函数
类的友元函数是定义在类外部，但有权访问类的所有私有(private)成员和保护(protected)成员， *尽管友元函数的原型有在类的定义中出现过，但是友元函数不是成员函数*.

友元可以是一个函数，该函数被称为友元函数，友元也可以是一个类，该类被称为友元类，这种情况下，整个类及其所有成员都是友元。

使用 =friend= 关键字定义友元函数。
#+BEGIN_SRC c++
#include <iostream>
using namespace std;
class Box
{
        double width;
public:
        double length;
        friend void printWidth(Box box);
        void setWidth(double wid);
};

void Box::setWidth(double wid)
{
        width = wid;
}

void printWidth(Box box)
{
        cout << "Width of Box" << box.width << endl;
}

int main()
{
        Box box;

        box.setWidth(10.0);
        printWidth(box);

        return 0;
}

#+END_SRC
*** 内联函数
如果想把一个函数定义为内联函数，则需要在函数名前面放置关键字 inline ， 在调用函数之前需要对函数进行定义。如果已定义的函数多于一行，编译器会忽略 inline 限定符。
*** this指针
this指针指向用来 *调用成员函数的对象*.一般来说,所有的类方法都将this指针设置为调用它的对象的地址.

- 每个成员函数(包括构造函数和析构函数)都有一个this指针,this指针指向调用对象.如果方法需要引用整个调用对象,则可以使用表达式 *this.
- 在函数的括号后面使用const限定符将this限定为const,这样将不能使用this来修改对象的值.
*** 对象数组
声明对象数组的方法与声明标准类型数组相同; =Stock mystuff[4]=
#+BEGIN_SRC C++ 
const int STKS = 4;
Stock stocks[STKS] =
{
        Stock{"NanoSmart", 12.5, 20},
        Stock{"Boffo Object", 200, 20},
        Stock{"ABC", 12.5, 20},
        Stock{"Fleep", 12.5, 20},
};
//类包含多个构造函数
Stock stocks2[STKS] =
{
        Stock{"NanoSmart", 12.5, 20},
        Stock(),
        Stock{"ABC", 12.5, 20},
        Stock{"Fleep", 12.5, 20},
};
#+END_SRC
*** 类作用域
- 在类中定义的名称的作用域都为整个类,作用域为整个类的名称只在该类中是已知的,在类外是不可知的.因此可以在不同类中使用相同的类成员名而不会引起冲突.
- 类作用域意味着不能从外部直接访问类的成员,公有成员函数也是如此.
**** 作用域为类的常量
#+BEGIN_SRC C++
class Bakery
{
private:
        enum {Months = 12};
        double consts[Months];
        ....
};
#+END_SRC
*注意*: 用这种方式声明枚举并不会创建数据成员,所有对象中都不包含枚举.

#+BEGIN_SRC C++
class Bakery
{
private:
        static const int Months = 12;
        double const[Months];
        ...
#+END_SRC
上述方式将创建一个名为 Months 的常量, *该常量与其他静态变量存储在一起,而不是储存在对象中,因此只有一个Months常量,被所有bakery对象共享.*
***** C++11枚举
#+BEGIN_SRC C++
//由于枚举的作用域为类,就不会发生名称冲突了
enum class egg{Small, Medium, Large, Jumbo};
enum class t_shirt{Small, Medium, Large, Xlarge};
#+END_SRC
*** 类静态成员
使用 =static= 关键字把类成员定义为静态的。这意味着 *无论创建多少个类的对象，静态成员都只有一个副本。*
- 静态成员在类的所有对象中是共享的。如果不存在其他的初始化语句，在创建第一个对象时，所有的静态数据都会被初始化为零。
- *静态成员变量在类中仅仅是声明,没有定义，所以需要在类外面定义，实际上是给静态成员变量分配内存*

#+BEGIN_SRC c++
#include <iostream>

using namespace std;

class Box
{
public:
        static int objectCount;
        Box(double l = 2.0f, double b = 2.0f, double h = 2.0f)
        {
                cout << "Constructor was called." << endl;
                length = l;
                breadth = b;
                height = h;
                objectCount++;
        }
        double Volue()
        {
                return length * breadth * height;
        }
private:
        double length;
        double breadth;
        double height;
};

int Box::objectCount = 0;

int main(void)
{
        Box Box1(3.3, 1.2, 1.5);
        Box Box2(8.5, 6.0, 2.0);

        cout << "Total objects: " << Box::objectCount << endl;

        return 0;
}
        
#+END_SRC
如果把函数成员声明为静态的， 就可以把函数与类的任何特定对象独立开来，静态成员函数即使在类对象不存在的情况下也能被调用。

静态函数只要使用类名加范围解析运算符::就可以访问。
- 静态成员函数只能访问静态成员数据、其他静态成员函数和类外部的其他函数。
- 静态成员函数有一个类范围，他们不能访问类的 this指针。可以使用静态成员函数来判断类的某些对象是否已经被创建。
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

class Box
{
public:
        static int objectCount;
        Box(double l = 2.0, double b = 2.0, double h = 2.0)
        {
                cout << "Constructor was called." << endl;
                length = l;
                breadth = b;
                height = h;
                objectCount++;
        }
        double Volume()
        {
                return length * breadth * height;
        }
        static int getCount()
        {
                return objectCount;
        }
private:
        double length;
        double breadth;
        double height;
};
int Box::objectCount = 0;

int main(void)
{
        cout << "Initialize stage count: " << Box::getCount() << endl;
        Box Box1(3.03, 1.2, 1.5);
        Box Box2(3.03, 1.2, 1.5);

        cout << "Final stage count: " << Box::getCount() << endl;

        return 0;
}
#+END_SRC
*** 访问修饰符
类成员的访问限制是通过在类主体内部对各个区域标记 =public,private,protected= 来指定的，这些被称为访问修饰符。
成员和类的默认访问修饰符是private.

#+BEGIN_SRC c++
class Base{
public:/// 外部可以访问
protected:/// 外部不可访问，子类可以访问
private:/// 外部及子类不可访问
};
#+END_SRC
*** 抽象数据类型
*** 实例代码
**** 类成员函数
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

class Box
{
public:
        double length;
        double breadth;
        double height;

        double getVolume(void);
        void setLength(double len);
        void setBreadth(double bre);
        void setHeight(double hei);
};

double Box::getVolume(void)
{
        return length * breadth * height;
}

void Box::setLength(double len)
{
        length = len;
}

void Box::setBreadth(double bre)
{
        breadth = bre;
}
void Box::setHeight(double hei)
{
        height = hei;
}

int main()
{
        Box Box1;

        double volume = 0.0f;

        Box1.setLength(6.0);
        Box1.setBreadth(7.0);
        Box1.setHeight(8.0);

        volume = Box1.getVolume();

        cout << "Box1:" << volume << endl;
}
       
#+END_SRC
** 继承

** 内存模型和名称空间
*** 内存模型
**** 头文件格式及其包含格式
***** 文件格式
#+BEGIN_SRC C
#ifndef __COORDIN_H__
#define __COORDIN_H__
// place include file contents here
#endif
#+END_SRC
#ifndef ... #endif 的作用时为了 *避免同一个源文件将同一个头文件展开两次及以上,这会导致重复定义错误!*.而 __COORDIN_H__ 只是根据文件名而取的冷门名称而已,避免其他代码会使用这种名称.
***** 包含格式
*在包含当前项目中的文件时,我们应该使用格式 :#include "coordin.h", 而在包含系统文件时,应该使用格式: #include <coordin.h>.*

因为如果文件名包含在尖括号中,则 c/c++ 编译器将在存储标准头文件的主机系统的文件系统中查找该文件;如果文件名包含在双引号中,则编译器将首先
查找当前工作目录或源代码目录(或其他目录,这取决于编译器).如果没有在这里找到头文件,则将在标准位置查找.
**** 存储持续性,作用域和链接性
c++使用三种(在C++11中是四种)不同的方案来存储数据,这些方案的区别就在于数据保留在内存中的时间.
- 自动存储持续性:在函数定义中声明的变量(也包括函数参数)的存储持续性为自动的.它们在程序开始执行其所属的函数和代码块时被创建,
在执行完函数或代码块时,它们使用的内存被释放.c++有两种存储持续性为自动的变量.
- 静态存储持续性:在函数定义外定义的变量和使用关键字 static 定义的变量的存储持续性都为静态.它们在程序整个运行过程中都存在.c++中有3种存储持续性为静态的变量.
- 线性存储持续性(c++11):当前,多核处理器很常见,这些CPU可同时处理多个执行任务.这让程序能够将计算放在可以并行处理的不同线程种.如果变量时使用关键字 =thread_local= 
声明的,则其声明周期与所属的线程一样长.
- 动态存储持续性:用new运算符分配的内存将一直存在,直到使用delete运算符将其释放或程序结束为止.这种内存的存储持续性为动态,有时被称为自由存储(free store) 或堆(heap).
***** 作用域和链接
作用域(scope)描述了名称在文件的多大范围内可见.链接性(linkage)描述了名称如何在不同单元间共享.链接性为外部的名称可以在文件间共享,链接性为内部的名称只能由一个文件中的函数
共享.自动变量的名称没有链接性,因为它们不能共享.

C++变量的作用域有多种,作用域为局部的变量只在定义它的代码块中可用. *代码块是由花括号括起的一系列语句*.作用域为全局的变量在定义位置到文件结尾之间都可用.
自动变量的作用域为局部,静态变量的作用域是全局还是局部取决于它是如何被定义的. *在函数原型作用域(function prototype scope)中使用的名称只在包含参数列表的括号内可用,这就是为什么这些名称是什么以及是否出现都不重要的原因.* 在类中声明的成员的作用域为整个类,在名称空间中声明的变量的作用域为整个名称空间.
***** 自动存储持续性
默认情况下,在函数中声明的函数参数和变量的存储持续性为自动,作用域为局部,没有链接性. *如果在代码块中定义了变量,则该变量的存在时间和作用域将被限制在该代码块内*.

由于自动变量的数目随函数的开始和结束而增减,因此程序必须在运行时对自动变量进行管理.常用的方法是留出一段内存,并将其视为栈,以管理变量的增减.之所以被称为栈,是由于数据被象征地
放在原有数据的上面,当程序使用完后,将其从栈中删除.栈的默认长度取决于实现,但编译器通常提供改变栈长度的选项.程序使用两个指针来跟踪栈,一个指针指向栈底,一个指向下一个可用内存单元.
当函数被调用时,其自动变量将被加入到栈中,栈顶指针指向变量后面的下一个可用的内存单元.函数结束时,栈顶指针被重置为函数被调用前的值,从而释放新变量使用的内存.
***** 静态持续性变量
由于静态变量的数目在程序运行期间时不变的,因此程序不需要使用特殊的装置(如栈)来管理它们, *编译器将分配固定的内存块来存储所有的静态变量,这些变量在整个程序执行期间一直存在.另外,如果没有显示的初始化为静态变量,编译器将把它设置为0.在默认情况下,静态数组和结构将每个元素和成员的所有位都设置位0.*

要想创建链接性为外部的静态持续性变量,必须在代码块的外面声明它;要想创建链接性为内部的静态持续变量,必须在代码块的外面声明它,并且使用 static 限定符;要想创建没有链接性的静态持续性变量,必须在代码块内声明它,
并使用static 限定符.

所有的静态持续变量都有下述初始化特征:未被初始化的静态变量的所有位都被设置位0.这种变量被称为零初始化的(zero-initialized).
***** 静态持续性,外部链接性
c++ 有"单定义规则"(One Definition Rule, ODR),该规则指出,变量只能有一次定义.为满足这种需求,c++提供了两种变量声明.
一种时定义声明(defining declaration)或简称为定义(definition), *它给变量分配存储空间*. 另一种是引用声明(referencing declaration) 或简称为声明(declaration),
*它不给变量分配存储空间,因为它引用已有的变量*.

引用声明使用关键字 extern,且不进行初始化, *否则,声明为定义,导致分配存储空间*.如果要在多个文件重使用外部变量,只需要在一个文件中包含该变量的定义,但在使用该变量的其他所有文件中,
都必须使用关键字 extern 声明它.
***** 静态持续性,内部链接性
***** 静态持续性,无链接性
***** 说明符和限定符
有些被称为存储说明符(storage class specifier) 或 cv-限定符(cv-qualifier)的c++关键字提供了其他有关储存的信息.下面是存储说明符:
- auto(在c++11中不再是说明符)
- register
- static
- extern
- thread_local(c++11)
- mutable

在同一个声明中不能使用多个说明符,但 thread_local 除外,它可以与 static 或 extern 结合使用.在c++11之前, auto用于指出变量为自动变量,register 用于在声明中指示寄存器存储.
但在c++11中,auto用于自动类型推断, register指出变量是自动的.
****** cv-限定符
- const : 内存被初始化后,程序便不能再对它进行修改.
在C++(但不在C语言)中, const限定符对默认存储类型稍有影响.在默认情况下全局变量的链接性为外部, *但const全局变量的链接性为内部的*.在C++看来,全局const定义就像使用了 static 说明符一样.
如果出于某种原因,程序员希望某个常量的链接性为外部的,则可以使用extern关键字来覆盖默认的内部链接性.
#+BEGIN_SRC C++
extern const int states = 50; //definition with external linkage
#+END_SRC
- volatile : 让编辑器每次都要在主内存中读取变量值,不允许被优化
****** mutable
用来指出, *即使结构(或类)变量为const,其某个成员也可以被修改*.
#+BEGIN_SRC C
struct data
{
        char name[30];
        mutable int accesses;
        ...
};

const data veep = {"Claybourne Clodde", 0, ...};
strcpy(veep.name, "Joye Joux"}; // not allowed
veep.accesses++;                //allowed
#+END_SRC



***** 函数和链接性
***** 语言链接性(language linking)
语言链接性指的是对符号的修饰规则,在c++中要使用c的库函数,需要使用 extern "C".
***** 存储方案和动态分配
动态内存由运算符new和delete控制,而不是由作用域和链接性规则控制.因此,可以在一个函数中分配动态内存,而在另一个函数中将其释放.与自动内存不同,动态内存不是LIFO,
其分配和释放的顺序要取决于new和delete在何时以何种方式被使用.通常,编译器使用三块独立的内存:一块用于静态变量,一块用于自动变量,一块用于动态存储.
****** 使用new运算符初始化
#+BEGIN_SRC C++
/*
  c++ 98
 ,*/
//如果要为内置的标量类型分配存储空间并初始化,可以在类型名后面加上初始值,并将其用括号括起
int *pi = new int(6);
double *pd = new double(99.99);

/*
  c++ 11
 ,*/
//要初始化常规结构或数组,需要使用大括号的列表初始化,这要求编译器支持C++11
struct where {double x; double y; double z;};
where *one = new where{2.5,5.3,7.2};//c++ 11
int *ar = new int [4] {2,4,6,7};
//还可以将列表初始化用于单值变量
int *pin = new int{6};
double *pdo = new double{99.99};
#+END_SRC
****** new失败时
返回空指针.
****** new:运算符,函数和替换函数
运算符new和new[]分别调用如下函数:
#+BEGIN_SRC C++
void *operator new{std::size_t};  //used by new
void *operator new[] {std::size_t} //used by new[]
#+END_SRC
这些函数被称为分配函数,它们位于全局名称空间中.同样的也有delete 和 delete[];
它们使用运算符重载语法,std::size_t 是一个 typedef,对应与合适的整型.
#+BEGIN_SRC C++
int *pi = new int;
//被转换为
int *pi = new(sizeof(int));

int *pa = new int[40];
//被转换为
int *pa = new(40 * sizeof(int));

delete pi;
//被转换为
delete (pi);

#+END_SRC


****** 定位new运算符
通常,new负责载堆中找到一个足以能够满足要求的内存块.new 运算符还有另一种变体,被称为定位new运算符,它让你能够指定要使用的位置.
程序员可能使用这种特性来设置其内存管理规程,处理需要通过特性地址进行访问的硬件和特定位置创建的对象.
*要使用定位new特性,首先需要包含头文件new*,然后将new运算符用于提供了所需地址的参数.

定位new运算符的另一种用法是,将其与初始化结合使用,从而将信息放在特定的硬件地址处.

*注意*:
当new定位在静态内存中时,不能使用delete.
#+BEGIN_SRC C++
#include <new>
struct chaff
{
        char dross[20];
        int slag;
};

char buffer1[50];
char buffer2[500];
int main()
{
        chaff *p1, *p2;
        int *p3, *p4;
        //first, the regular forms of new
        p1 = new chaff; //place structure in heap
        p3 = new int[20]; // place int array in heap
        //now the two forms of placement new
        p2 = new (buffer1) chaff; //place struct in buffer1
        p4 = new (buffer2) int[20];//place int array in buffer2
}

#+END_SRC
*** 名称空间
**** 传统的c++ 名称空间
- 声明区域(declaration region)
声明区域是可以在其中进行声明的区域.
- 潜在作用域(potential scope).
变量的潜在作用域从声明点开始,到其声明区域的结尾.因此潜在作用域必声明区域效,这是由于变量必须定义后才能使用.
**** 新的名称空间特性
- 一个名称空间中的名称不会与另外一个名称空间的相同名称发生冲突,同时允许程序的其他部分使用该名称空间中声明的东西.
- 名称空间可以是全局的,也可以位于另一个名称空间中,但不能位于代码块中.因此,在默认情况下,在名称空间中声明的名称的链接性为外部的.
- 除了用户定义的名称空间外,还存在另一个名称空间---全局名称空间(global namespace).它对应与文件级声明区域,因此前面所说的全局变量选择被描述为位于全局名称空间中.
- 名称空间是开放的,即可以把名称加入到已有的名称空间中.
- 访问名称空间中的名称,最简单的方法是使用作用域解析运算符 "::"
#+BEGIN_SRC C++
namespace Jack{
        double pail;
        void fetch();
        int pal;
        struct Well{...};
}
namespace Jill{
        double bucket(double n) {....}
        double fetch;
        int pal;
        struct Hill {...};
}

//将名称goose添加到Jill中
namespace Jill{
        char * goose{const char *};
}
//在Jack中提供fetch定义
namespace Jack{
        void fetch()
        {
                ...
        }
};

Jack::pail = 12.34;
Jack::fetch();
Jill::Hill mole;
#+END_SRC

***** using 声明和 using 编译指令
using 声明使特定的标识符可用,using 编译指令使整个名称空间可用.
using 声明由被限定的名称和它前面的关键字 using 组成.
#+BEGIN_SRC C++
namespace Jill{
        double bucket(double n) {...}
        double fetch;
        struct Hill {...};
};
char fetch;
int main()
{
        using Jill::fetch; // put fetch into local namespace
        double fetch; //Error! Already have a local fetch
        cin >> fetch; //read a value into Jill::fetch
        cin >> ::fetch;//read a value into global fetch
        ....
}
#+END_SRC
using 声明使一个名称可用,而using编译使所有的名称都可用.using编译指令由名称空间名和它前面的关键字 =using namespace= 组成,它使名称空间中的所有名称都可用,而不需要作用域解析运算符.
#+BEGIN_SRC C++
#include <iostream>
using namespace std;

int main()
{
...
};
#+END_SRC
*编译器不允许同时使用上述两个using声明,这将导致二义性.*
***** using编译指令和using声明之比较
使用using编译指令导入一个名称空间中所有的名称与使用多个using声明使不一样的,而更象是大量使用作用域解析运算符.使用using声明时,就好像声明了相应的名称一样.
如果某个名称已经在函数中声明了,则不能使用using声明导入相同的名称.然而,使用using编译指令时,将进行名称解析,就像在包含using声明和名称空间本身的最小声明区域中声明了名称用于.
#+BEGIN_SRC C++
namespace Jill{
        double bucket(double n){...};
        double fetch;
        struct Hill{...};
}
char fetch;  //global namespace
int main()
{
        using namespace Jill;
        Hill Thrill; 
        double water = bucket(2);
        double fetch; //not an error; hides Jill::fetch
        cin >> fetch;//read a value into the local fetch
        cin >> ::fetch;//read a value into global fetch
        cin >> Jill::fetch;//read a value into Jill::fetch
}

int foom()
{
        Hill top;//error
        Jill::Hill creat;//vaild
}
#+END_SRC

*注意*: 假设名称空间和声明区域定义了相同的名称,如果试图使用using 声明将名称空间的名称导入该声明区域,则这两个名称会发生冲突,从而出错.
*如果使用using 编译指令将该名称空间的名称导入该声明区域,则局部版本将隐藏名称空间版本.*

一般説来,使用using声明必使用using编译指令更安全,这是由于它只导入指定的名称.如果该名称与局部发生冲突,编译器将发出指示.using编译指令导入所有名称,
包括可能并不需要的名称.如果与局部名称发生冲突,则局部名称将覆盖名称空间版本,而编译器并不会发出警告.另外,名称空间的开放性意味着名称空间的名称可能分散在多个地方,
这使得难以准确知道添加了哪些名称.

***** 名称空间的其他特性
- 可以将名称空间声明进行嵌套
#+BEGIN_SRC C++
namespace elements
{
        namespace fire
        {
                int flame;
                ...
        }
        float water;
}
#+END_SRC
上面代码的 flame指的是 elements::fire::flame. 也可以使用 "using namespace elements::fire" 使内部的名称可用.
- 可以在名称空间中使用using编译指令和using 声明
#+BEGIN_SRC C++ 
namespace myth
{
        using Jill::fetch;
        using namespace elements;
        using std::cout;
        using std::cin;
}
#+END_SRC
访问 fetch 可以使用 "myth::fetch". 或 "Jill::fetch".
当使用 "using namespace myth" 时,等价于也使用了 elements.
- 名称空间别名
namespace mvft = myth;
***** 未命名的名称空间
通过省略名称空间的名称来创建未命名的名称空间:
#+BEGIN_SRC C++
namespace
{
        int ice;
        int bandycoot;
}
#+END_SRC
在该名称空间中声明的名称的潜在作用域为:从声明点到该声明区的末尾.由于没有名称,所以不能在未命名名称空间所属文件之外的其他文件中,使用该名称空间中的名称.
**** 名称空间及其前途
下面时指导原则:
- 使用在已命名的名称空间中声明的变量,而不是使用外部全局变量.
- 使用在已命名的名称空间中声明的变量,而不是使用静态全局变量.
- 如果开发了一个函数库或类库,将其放在一个名称空间中.事实上,c++当前提倡将标准函数库放在名称空间std中,扩展了来自C语言中的函数.
- 仅将编译指令using 作为一种将旧代码转换为使用名称空间的权宜之计.
- 不要在头文件中使用using编译指令.
- 导入名称时,首选使用作用域解析运算符或using声明方法.
- 对于using声明,首选将其作用域设置为局部而不是全部.

** 运算符重载
运算符重载将重载的概念扩展到运算符上,允许赋予C++运算符多种含义. *C++根据操作数的数目和类型来决定采用哪种操作*.

要重载运算符,需要使用被称为运算符的函数的特殊函数形式.运算符函数的格式为: =operatorop(argument-list)=
例如, operator + ()重载 + 运算符, operator * ()重载 * 运算符. *op必须是有效的C++运算符,不能虚构一个新的符号*.

示例:
#+BEGIN_SRC C++
//mytime.h
#ifndef MYTIME0_H__
#define MYTIME0_H__
class Time
{
private:
        int hours;
        int minutes;
public:
        Time();
        Time(int h, int m = 0);
        void AddMin(int m);
};
#endif
#+END_SRC
